{
    "version": "https://jsonfeed.org/version/1",
    "title": "Course Of Growth",
    "subtitle": "",
    "icon": "https://nc3021.github.io/images/favicon.ico",
    "description": "只要立刻开始一切都还没晚",
    "home_page_url": "https://nc3021.github.io",
    "items": [
        {
            "id": "https://nc3021.github.io/2021/12/28/front-end/%E9%9D%A2%E7%BB%8F/",
            "url": "https://nc3021.github.io/2021/12/28/front-end/%E9%9D%A2%E7%BB%8F/",
            "title": "前端面经",
            "date_published": "2021-12-28T12:04:03.738Z",
            "content_html": "<h1 id=\"前端面经\"><a class=\"anchor\" href=\"#前端面经\">#</a> 前端面经</h1>\n<p>[TOC]</p>\n<h2 id=\"html篇\"><a class=\"anchor\" href=\"#html篇\">#</a> HTML 篇</h2>\n<h3 id=\"简述一下你对-html-语义化的理解\"><a class=\"anchor\" href=\"#简述一下你对-html-语义化的理解\">#</a> 简述一下你对 HTML 语义化的理解？</h3>\n<p>用正确的标签做正确的事情。<br />\nhtml 语义化让页面的内容结构化，结构更清晰，便于对浏览器、搜索引擎解析；即使在没有样式 CSS 情况下也以一种文档格式显示，并且是容易阅读的；<br />\n 搜索引擎的爬虫也依赖于 HTML 标记来确定上下文和各个关键字的权重，利于 SEO;<br />\n 使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解。</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMjU3MDQyMw==\">初探・HTML5 语义化 - 知乎 (zhihu.com)</span></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211228145604.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211228145932.png\" alt=\"\" /></p>\n<h3 id=\"img标签上-title-与-alt-属性的区别是什么\"><a class=\"anchor\" href=\"#img标签上-title-与-alt-属性的区别是什么\">#</a> &lt;img&gt; 标签上 title 与 alt 属性的区别是什么？</h3>\n<p>alt 是给搜索引擎识别，在图像无法显示时的替代文本；<br />\ntitle 是关于元素的注释信息，主要是给用户解读。<br />\n当鼠标放到文字或是图片上时有 title 文字显示。</p>\n<h3 id=\"href与src的区别\"><a class=\"anchor\" href=\"#href与src的区别\">#</a> href 与 src 的区别？</h3>\n<ul>\n<li><strong>href</strong>：指定资源的位置，用于建立当前页面与引用资源之间的关系（链接），</li>\n<li><strong>src</strong>：（source 的缩写），指向外部资源的位置，指向的内容将会应用到文档中当前标签所在位置。</li>\n<li>遇到 href，页面会并行加载后续内容；而 src 则不同，浏览器需要加载完毕 src 的内容才会继续往下走。</li>\n</ul>\n<h3 id=\"很多网站不常用table-iframe这两个元素知道原因吗\"><a class=\"anchor\" href=\"#很多网站不常用table-iframe这两个元素知道原因吗\">#</a> 很多网站不常用 table  iframe 这两个元素，知道原因吗？</h3>\n<p>因为浏览器页面渲染的时候是从上至下的，而 table 和 iframe 这两种元素会改变这样渲染规则，他们是要等待自己元素内的内容加载完才整体渲染。用户体验会很不友好。</p>\n<h3 id=\"html5新增了哪些新特性\"><a class=\"anchor\" href=\"#html5新增了哪些新特性\">#</a> HTML5 新增了哪些新特性？</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vYmluZ3VvNjY2L3AvMTA5Mjg5MDcuaHRtbA==\">html5 新特性总结 - 斌果 - 博客园 (cnblogs.com)</span></p>\n<ul>\n<li>\n<p>新的语义标签</p>\n</li>\n<li>\n<table>\n<thead>\n<tr>\n<th>标签</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&lt;header&gt;</td>\n<td>定义了文档的头部区域</td>\n</tr>\n<tr>\n<td>&lt;footer&gt;</td>\n<td>定义了文档的尾部区域</td>\n</tr>\n<tr>\n<td>&lt;nav&gt;</td>\n<td>定义文档的导航</td>\n</tr>\n<tr>\n<td>&lt;section&gt;</td>\n<td>定义文档中的节</td>\n</tr>\n<tr>\n<td>&lt;article&gt;</td>\n<td>定义文章</td>\n</tr>\n<tr>\n<td>&lt;aside&gt;</td>\n<td>定义页面以外的内容</td>\n</tr>\n<tr>\n<td>&lt;details&gt;</td>\n<td>定义用户可以看到或者隐藏的额外细节</td>\n</tr>\n<tr>\n<td>&lt;summary&gt;</td>\n<td>标签包含 details 元素的标题</td>\n</tr>\n<tr>\n<td>&lt;dialog&gt;</td>\n<td>定义对话框</td>\n</tr>\n<tr>\n<td>&lt;figure&gt;</td>\n<td>定义自包含内容，如图表</td>\n</tr>\n<tr>\n<td>&lt;main&gt;</td>\n<td>定义文档主内容</td>\n</tr>\n<tr>\n<td>&lt;mark&gt;</td>\n<td>定义文档的主内容</td>\n</tr>\n<tr>\n<td>&lt;time&gt;</td>\n<td>定义日期 / 时间</td>\n</tr>\n</tbody>\n</table>\n</li>\n<li>\n<p>画布 (Canvas) API</p>\n</li>\n<li>\n<p>地理定位 (Geolocation) API</p>\n</li>\n<li>\n<p>本地离线存储 localStorage 长期存储数据，浏览器关闭后数据不丢失；<br />\nsessionStorage 的数据在浏览器关闭后自动删除</p>\n</li>\n<li>\n<p>新的技术 webworker, websocket, Geolocation</p>\n</li>\n<li>\n<p>拖拽释放 API</p>\n</li>\n<li>\n<p>音频、视频 API (audio,video)</p>\n</li>\n<li>\n<p>表单控件，calendar、date、time、email、url、searc</p>\n</li>\n</ul>\n<h3 id=\"块级标签行内标签行内块标签\"><a class=\"anchor\" href=\"#块级标签行内标签行内块标签\">#</a> 块级标签，行内标签，行内块标签</h3>\n<ul>\n<li>\n<p>块级元素：独占一行，对宽高的属性值生效；如果不给宽度，块级元素就默认为浏览器的宽度，即就是 100% 宽；</p>\n<p>块标签：包含 p、div、ul、ol、li、dl、dt、h1~h6、form；</p>\n</li>\n<li>\n<p>行内元素：可以多个标签存在一行，对宽高属性值不生效，完全靠内容撑开宽高！</p>\n<p>行内标签：包含 a、span、em、i、strong、b、ins、u、label、br；</p>\n</li>\n<li>\n<p>行内块元素：结合的行内和块级的有点，不仅可以对宽高属性值生效，还可以多个标签存在一行显示；</p>\n<p>行内块标签：img,input,textarea</p>\n</li>\n<li>\n<p>各种标签之间的转换</p>\n<ul>\n<li>块级标签转换为行内标签：display:inline;</li>\n<li>行内标签转换为块级标签：display:block;</li>\n<li>转换为行内块标签：display：inline-block;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"xhtml和html的区别\"><a class=\"anchor\" href=\"#xhtml和html的区别\">#</a> XHTML 和 HTML 的区别</h3>\n<ul>\n<li>html 元素必须正确嵌套，不能乱；</li>\n<li>属性必须是小写的；</li>\n<li>属性值必须加引号；</li>\n<li>标签必须有结束，单标签也应该用  “/” 来结束掉；</li>\n</ul>\n<h3 id=\"每个html文件里开头都有个很重要的东西doctype知道这是干什么的吗\"><a class=\"anchor\" href=\"#每个html文件里开头都有个很重要的东西doctype知道这是干什么的吗\">#</a> 每个 HTML 文件里开头都有个很重要的东西，Doctype，知道这是干什么的吗？</h3>\n<p>声明位于文档中的最前面的位置，处于 标签之前。此标签可告知浏览器文档使用哪种 HTML 或 XHTML 规范。（重点：告诉浏览器按照何种规范解析页面）</p>\n<h3 id=\"你能描述一下渐进增强和优雅降级之间的不同吗\"><a class=\"anchor\" href=\"#你能描述一下渐进增强和优雅降级之间的不同吗\">#</a> 你能描述一下渐进增强和优雅降级之间的不同吗？</h3>\n<ul>\n<li>渐进增强 progressive enhancement：针对低版本浏览器进行构建页面，保证最基本的功能，然后再针对高级浏览器进行效果、交互等改进和追加功能达到更好的用户体验。</li>\n<li>优雅降级 graceful degradation：一开始就构建完整的功能，然后再针对低版本浏览器进行兼容</li>\n</ul>\n<h2 id=\"css篇\"><a class=\"anchor\" href=\"#css篇\">#</a> CSS 篇</h2>\n<h3 id=\"盒子模型的介绍\"><a class=\"anchor\" href=\"#盒子模型的介绍\">#</a> 盒子模型的介绍</h3>\n<p>盒模型： 内容 (content)、填充 (padding)、 边框 (border)、边界 (margin)；</p>\n<p>类型：IE 盒子模型，标准 W3C 盒子模型</p>\n<p>区 别： IE 的 content 部分把 border 和 padding 计算了进去；</p>\n<h3 id=\"css-选择器优先级\"><a class=\"anchor\" href=\"#css-选择器优先级\">#</a> css 选择器优先级？</h3>\n<ul>\n<li>\n<p>单个选择器：</p>\n<p>!important &gt; 行内样式（比重 1000）&gt; ID 选择器（比重 100） &gt; 类选择器（比重 10） &gt; 标签（比重 1） &gt; 通配符 &gt; 继承 &gt; 浏览器默认属性</p>\n</li>\n<li>\n<p>复合选择器：</p>\n<p><img data-src=\"https://i.loli.net/2021/11/10/fo56NnKBygda2Dr.png\" alt=\"\" /></p>\n</li>\n</ul>\n<h3 id=\"垂直居中几种方式\"><a class=\"anchor\" href=\"#垂直居中几种方式\">#</a> 垂直居中几种方式？</h3>\n<ul>\n<li>单行文本: line-height = height</li>\n<li>图片: vertical-align: middle;</li>\n<li>flex: justify-content:center</li>\n<li>transform + absolute : top: 50%;left: 50%;transform: translate(-50%, -50%);</li>\n<li>absolute+margin 负值：top: 50%;left: 50%;margin-top: -50px;margin-left: -100px;</li>\n<li>暂略</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMzYxMzYyMTI=\">CSS 垂直居中，你会多少种写法？ - 知乎 (zhihu.com)</span></li>\n</ul>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211228190526.png\" alt=\"\" /></p>\n<h3 id=\"简明说一下-css-link-与-import-的区别和用法\"><a class=\"anchor\" href=\"#简明说一下-css-link-与-import-的区别和用法\">#</a> 简明说一下 CSS link 与 @import 的区别和用法？</h3>\n<ul>\n<li>** 加载顺序：**link 是先将 css 文件加载到网页，然后再进行编译。@import 是先加载完 html 结构再加载 css 文件，如果网速较慢则会影响视觉效果。</li>\n<li>** 兼容性：**link 是 xhtml 标签无兼容问题，@import 是 css2.1 提出的所以不支持 IE5 以前的浏览器。</li>\n<li>**DOM 支持：**link 支持 DOM 改变样式，@import 不支持。</li>\n</ul>\n<h3 id=\"rgba和opacity的透明效果有什么不同\"><a class=\"anchor\" href=\"#rgba和opacity的透明效果有什么不同\">#</a> rgba 和 opacity 的透明效果有什么不同？</h3>\n<ul>\n<li><strong>opacity</strong> ：子元素会继承父元素的 opacity 属性；</li>\n<li><strong>RGBA</strong> ：设置的元素的后代元素不会继承不透明属性。</li>\n</ul>\n<h3 id=\"displaynone和visibilityhidden的区别\"><a class=\"anchor\" href=\"#displaynone和visibilityhidden的区别\">#</a> display:none 和 visibility:hidden 的区别？</h3>\n<ul>\n<li><strong>display:none</strong> ：隐藏对应的元素，在文档布局中不再给它分配空间，它各边的元素会合拢，就当他从来不存在；</li>\n<li><strong>visibility:hidden</strong> ：隐藏对应的元素，但是在文档布局中仍保留原来的空间。</li>\n</ul>\n<h3 id=\"有哪些方式可以对一个dom设置它的css样式\"><a class=\"anchor\" href=\"#有哪些方式可以对一个dom设置它的css样式\">#</a> 有哪些方式可以对一个 DOM 设置它的 CSS 样式？</h3>\n<ul>\n<li>外部样式表，引入一个外部 css 文件</li>\n<li>内部样式表，将 css 代码放在 标签内部</li>\n<li>内联样式，将 css 样式直接定义在 HTML 元素内部</li>\n</ul>\n<h3 id=\"文档流是什么\"><a class=\"anchor\" href=\"#文档流是什么\">#</a> 文档流是什么？</h3>\n<p>文档流也称为普通流，即网页在解析时，遵循从上向下，从左向右的顺序。</p>\n<p>css 中的定位机制，共三种：</p>\n<ol>\n<li>正常的文档流</li>\n<li>float</li>\n<li>postion 的 absolute</li>\n<li>flex</li>\n</ol>\n<h3 id=\"position的值-relative和absolute分别是相对于谁进行定位的\"><a class=\"anchor\" href=\"#position的值-relative和absolute分别是相对于谁进行定位的\">#</a> position 的值， relative 和 absolute 分别是相对于谁进行定位的？</h3>\n<ul>\n<li>relative: 相对定位，相对于自己本身在正常文档流中的位置进行定位。</li>\n<li>absolute: 生成绝对定位，相对于最近一级定位不为 static 的父元素进行定位。</li>\n<li>fixed: （老版本 IE 不支持）生成绝对定位，相对于浏览器窗口或者 frame 进行定</li>\n<li>static: 默认值，没有定位，元素出现在正常的文档流中。</li>\n<li>sticky: 生成粘性定位的元素，容器的位置根据正常文档流计算得出。</li>\n</ul>\n<h3 id=\"divcss的布局较table布局有什么优点\"><a class=\"anchor\" href=\"#divcss的布局较table布局有什么优点\">#</a> div+css 的布局较 table 布局有什么优点？</h3>\n<ul>\n<li>改版的时候更方便 只要改 css 文件。</li>\n<li>页面加载速度更快、结构化清晰、页面显示简洁。</li>\n<li>表现与结构相分离。</li>\n<li>易于优化（seo）搜索引擎更友好，排名更容易靠前。</li>\n</ul>\n<h3 id=\"如何创建块级格式化上下文block-formatting-contextbfc有什么用\"><a class=\"anchor\" href=\"#如何创建块级格式化上下文block-formatting-contextbfc有什么用\">#</a> 如何创建块级格式化上下文 (block formatting context),<strong>BFC</strong> 有什么用？</h3>\n<ul>\n<li>\n<p>什么是 BFC?</p>\n<p>​\tBFC 格式化上下文，它是一个独立的渲染区域，让处于 BFC 内部的元素和外部的元素相互隔离，使内外元素的定位不会相互影响</p>\n</li>\n<li>\n<p>如何产生 BFC?</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute/fixed</pre></td></tr></table></figure></li>\n<li>\n<p>BFC 作用</p>\n<p>​\tBFC 最大的一个作用就是：在页面上有一个独立隔离容器，容器内的元素和容器外的元素布局不会相互影响。</p>\n</li>\n</ul>\n<h3 id=\"css3有哪些新特性\"><a class=\"anchor\" href=\"#css3有哪些新特性\">#</a> CSS3 有哪些新特性？</h3>\n<ul>\n<li>\n<p>弹性盒模型 display: flex;</p>\n</li>\n<li>\n<p>颜色透明度 color: rgba（255, 0, 0, 0.75）；</p>\n</li>\n<li>\n<p>圆角 border-radius: 5px;</p>\n</li>\n<li>\n<p>阴影 box-shadow:3px 3px 3px rgba（0, 64, 128, 0.3）；</p>\n</li>\n<li>\n<p>2d，3d 变换；</p>\n</li>\n<li>\n<p>平滑过渡 transition: all .3s ease-in .1s;</p>\n<p>动画 @keyframes anim-1 {50% {border-radius: 50%;}} animation: anim-1 1s;</p>\n</li>\n<li>\n<p>新增伪类选择器：:checked、:enabled、:disabled</p>\n</li>\n<li>\n<p>暂略</p>\n</li>\n</ul>\n<h3 id=\"css3动画简单动画的实现如旋转等\"><a class=\"anchor\" href=\"#css3动画简单动画的实现如旋转等\">#</a> CSS3 动画（简单动画的实现，如旋转等）</h3>\n<p>​\t依靠 CSS3 中提出的三个属性：transition、transform、animation</p>\n<ul>\n<li><strong>transition</strong>：定义了元素在变化过程中是怎么样的，包含 transition-property、transition-duration、transition-timing-function、transition-delay。</li>\n<li><strong>transform</strong>：定义元素的变化结果，包含 rotate、scale、skew、translate。</li>\n<li><strong>animation</strong>：动画定义了动作的每一帧（@keyframes）有什么效果，包括 animation-name，animation-duration、animation-timing-function、animation-delay、animation-iteration-count、animation-direction</li>\n</ul>\n<h3 id=\"常见兼容性问题\"><a class=\"anchor\" href=\"#常见兼容性问题\">#</a> 常见兼容性问题？</h3>\n<ul>\n<li>浏览器默认的 margin 和 padding 不同。解决方案是加一个全局的 *{margin:0;padding:0;} 来统一。</li>\n<li>Chrome 中文界面下默认会将小于 12px 的文本强制按照 12px 显示，<br />\n 可通过加入 CSS 属性 -webkit-text-size-adjust: none; 解决.</li>\n</ul>\n<h2 id=\"js篇\"><a class=\"anchor\" href=\"#js篇\">#</a> JS 篇</h2>\n<h3 id=\"js数据类型\"><a class=\"anchor\" href=\"#js数据类型\">#</a> JS 数据类型</h3>\n<ul>\n<li>基本数据类型： Undefined、Null、Boolean、Number、String、Symbol</li>\n<li>引用数据类型： Object (包括 Object 、Array 、Function、Date、RegExp、Set)</li>\n</ul>\n<blockquote>\n<ul>\n<li>声明变量时不同的内存地址分配：\n<ul>\n<li>简单类型的值存放在栈中，在栈中存放的是对应的值</li>\n<li>引用类型对应的值存储在堆中，在栈中存放的是指向堆内存的地址</li>\n</ul>\n</li>\n<li>不同的类型数据导致赋值变量时的不同：\n<ul>\n<li>简单类型赋值，是生成相同的值，两个对象对应不同的地址</li>\n<li>复杂类型赋值，是将保存对象的内存地址赋值给另一个变量。也就是两个变量指向堆内存中同一个对象</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h3 id=\"和-区别分别在什么情况使用\"><a class=\"anchor\" href=\"#和-区别分别在什么情况使用\">#</a> == 和 === 区别，分别在什么情况使用</h3>\n<ol>\n<li>\n<p><strong>等于操作符</strong></p>\n<p>操作符（==）在比较中会先进行类型转换，再确定操作数是否相等</p>\n<p>遵循以下规则：</p>\n<p>​\t如果任一操作数是布尔值，则将其转换为数值再比较是否相等；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>​\t如果一个操作数是字符串，另一个操作数是数值，则尝试将字符串转换为数值，再比较是否相等；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"55\"</span> <span class=\"token operator\">==</span> <span class=\"token number\">55</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>​\t如果一个操作数是对象，另一个操作数不是，则调用对象的  <code>valueOf()</code>  方法取得其原始值，再根据前面的规则进行比较；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token function-variable function\">valueOf</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>​\t <code>null</code>  和 <code>undefined</code>  相等；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p>​\t如果有任一操作数是  <code>NaN</code>  ，则相等操作符返回  <code>false</code> ；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">==</span> <span class=\"token number\">NaN</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><p>​\t如果两个操作数都是对象，则比较它们是不是同一个对象。如果两个操作数都指向同一个对象，则相等操作符返回 <code>true</code> ；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">\"xxx\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> result1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>obj1 <span class=\"token operator\">==</span> obj2 <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><blockquote>\n<p>简单小结：</p>\n<ul>\n<li>两个都为简单类型，字符串和布尔值都会转换成数值，再比较</li>\n<li>简单类型与引用类型比较，对象转化成其原始类型的值，再比较</li>\n<li>两个都为引用类型，则比较它们是否指向同一个对象</li>\n<li>null 和 undefined 相等</li>\n<li>存在 NaN 则返回 false</li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p><strong>全等操作符</strong></p>\n<p>​\t全等操作符由 3 个等于号（ === ）表示，只有两个操作数在不转换的前提下相等才返回  <code>true</code> 。即类型相同，值也需相同；</p>\n<blockquote>\n<p><code>undefined</code>  和  <code>null</code>  与自身严格相等</p>\n</blockquote>\n</li>\n<li>\n<p><strong>小结</strong></p>\n<p>​\t除了在比较对象属性为 <code>null</code>  或者 <code>undefined</code>  的情况下，我们可以使用相等操作符（==），其他情况建议一律使用全等操作符（===）;</p>\n<p>相等运算符隐藏的类型转换，会带来一些违反直觉的结果</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">''</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token string\">''</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token string\">'false'</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token string\">'0'</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token boolean\">false</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token string\">' \\t\\r\\n'</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"判断一个值是什么类型的方法\"><a class=\"anchor\" href=\"#判断一个值是什么类型的方法\">#</a> 判断一个值是什么类型的方法</h3>\n<ul>\n<li>typeof 运算符</li>\n<li>instanceof 运算符</li>\n<li>Object.prototype.toString.call (xx) 方法</li>\n</ul>\n<h3 id=\"null-和-undefined-的区别\"><a class=\"anchor\" href=\"#null-和-undefined-的区别\">#</a> null 和 undefined 的区别？</h3>\n<ul>\n<li>null 表示一个对象被定义了，值为 “空值”；</li>\n<li>undefined 表示不存在这个值。\n<ul>\n<li>变量被声明了，但没有赋值时，就等于 undefined</li>\n<li>调用函数时，应该提供的参数没有提供，该参数等于 undefined</li>\n<li>对象没有赋值的属性，该属性的值为 undefined</li>\n<li>函数没有返回值时，默认返回 undefined。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"的区别\"><a class=\"anchor\" href=\"#的区别\">#</a> “===”、“ ==” 的区别？</h3>\n<p><code>==</code> : 当且仅当两个运算数相等时，它返回 true，即不检查数据类型；<br />\n <code>===</code> : 只有在无需类型转换运算数就相等的情况下，才返回 true，需要检查数据类型；</p>\n<h3 id=\"eval是做什么的\"><a class=\"anchor\" href=\"#eval是做什么的\">#</a> eval 是做什么的？</h3>\n<p>​\t它的功能是把对应的字符串解析成 JS 代码并运行；<br />\n应该避免使用 eval，不安全，非常耗性能（2 次，一次解析成 js 语句，一次执行）;</p>\n<h3 id=\"箭头函数有哪些特点\"><a class=\"anchor\" href=\"#箭头函数有哪些特点\">#</a> 箭头函数有哪些特点？</h3>\n<ul>\n<li>不需要 function 关键字来创建函数；</li>\n<li>省略 return 关键字；</li>\n<li>改变 this 指向；</li>\n</ul>\n<h3 id=\"var-let-const-区别\"><a class=\"anchor\" href=\"#var-let-const-区别\">#</a> var、let、const 区别？</h3>\n<ul>\n<li>var 存在变量提升。</li>\n<li>let 只能在块级作用域内访问。</li>\n<li>const 用来定义常量，必须初始化，不能修改（对象特殊）。</li>\n</ul>\n<h3 id=\"宏任务与微任务\"><a class=\"anchor\" href=\"#宏任务与微任务\">#</a> 宏任务与微任务</h3>\n<ol>\n<li>JS 分为同步任务和异步任务</li>\n<li>同步任务都在主线程上执行，形成一个执行栈</li>\n<li>主线程之外，事件触发线程管理着一个任务队列，只要异步任务有了运行结果，就在任务队列之中放置一个事件。</li>\n<li>一旦执行栈中的所有同步任务执行完毕（此时 JS 引擎空闲），系统就会读取任务队列，将可运行的异步任务添加到可执行栈中，开始执行。</li>\n</ol>\n<p><strong>宏任务</strong></p>\n<p>​\t<strong>(macro)task</strong>，可以理解是每次执行栈执行的代码就是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行）。浏览器为了能够使得 JS 内部 (macro) task 与 DOM 任务能够有序的执行，会在一个 (macro) task 执行结束后，在下一个 (macro) task 执行开始前，对页面进行重新渲染；</p>\n<p>宏任务包含：</p>\n<ul>\n<li>script (整体代码)</li>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>I/O</li>\n<li>UI 交互事件</li>\n<li>postMessage</li>\n<li>MessageChannel</li>\n<li>setImmediate (Node.js 环境)</li>\n</ul>\n<p><strong>微任务</strong></p>\n<p>​\tmicrotask, 可以理解是在当前 task 执行结束后立即执行的任务。也就是说，在当前 task 任务后，下一个 task 之前，在渲染之前。</p>\n<p>微任务报含：</p>\n<ul>\n<li>Promise.then、</li>\n<li>Object.observe</li>\n<li>MutationObserver</li>\n<li>process.nextTick (Node.js 环境)</li>\n</ul>\n<p><strong>运行机制</strong></p>\n<p>在事件循环中，每进行一次循环操作称为 tick，每一次 tick 的任务处理模型是比较复杂的，但关键步骤如下：</p>\n<ul>\n<li>执行一个宏任务（栈中没有就从事件队列中获取）</li>\n<li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li>\n<li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li>\n<li>当前宏任务执行完毕，开始检查渲染，然后 GUI 线程接管渲染</li>\n<li>渲染完毕后，JS 线程继续接管，开始下一个宏任务（从事件队列中获取）</li>\n</ul>\n<h3 id=\"new操作符具体干了什么呢\"><a class=\"anchor\" href=\"#new操作符具体干了什么呢\">#</a> new 操作符具体干了什么呢？</h3>\n<ul>\n<li>\n<p>创建一个新的对象 <code>obj</code> ；</p>\n</li>\n<li>\n<p>将新对象与构建函数 <code>Mother</code>  的原型通过原型链连接起来；</p>\n<p><code>obj.__proto__=Mother.prototype</code></p>\n</li>\n<li>\n<p>将构建函数中的 <code>this</code>  绑定到新建的对象 <code>obj</code>  上；</p>\n</li>\n<li>\n<p>根据构建函数返回类型作判断，如果是原始值则被忽略，如果是返回对象，需要正常处理</p>\n</li>\n</ul>\n<h3 id=\"json是什么\"><a class=\"anchor\" href=\"#json是什么\">#</a> JSON 是什么？</h3>\n<p>​\tJSON 的全称是”JavaScript Object Notation”，意思是 JavaScript 对象表示法，它是一种基于文本，独立于语言的轻量级数据交换格式。</p>\n<h3 id=\"ajax-是什么-如何创建一个ajax\"><a class=\"anchor\" href=\"#ajax-是什么-如何创建一个ajax\">#</a> Ajax 是什么？如何创建一个 Ajax？</h3>\n<p>AJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。而传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。</p>\n<ol>\n<li>创建 XMLHttpRequest 对象，也就是创建一个异步调用对象；</li>\n<li>创建一个新的 HTTP 请求，并指定该 HTTP 请求的方法、URL 及验证信息；</li>\n<li>设置响应 HTTP 请求状态变化的函数；</li>\n<li>发送 HTTP 请求；</li>\n<li>获取异步调用返回的数据；</li>\n<li>使用 JavaScript 和 DOM 实现局部刷新；</li>\n</ol>\n<h3 id=\"call和apply方法的区别\"><a class=\"anchor\" href=\"#call和apply方法的区别\">#</a> call () 和 apply () 方法的区别</h3>\n<p><code>call</code>  和 <code>apply</code>  可以用来<strong>重新定义函数的执行环境</strong>，也就是 <code>this</code>  的指向； <code>call</code>  和 <code>apply</code>  都是为了改变某个函数运行时的 <code>context</code> ，即上下文而存在的，换句话说，就是为了改变函数体内部 <code>this</code>  的指向。</p>\n<p>从定义中也可以看出来， <code>call()</code>  和 <code>apply()</code>  的不同点就是<strong>接收参数的方式不同</strong>。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">People</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">People</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><strong>apply () 方法</strong>接收两个参数，一个是函数运行的作用域（ <code>this</code> ），另一个是参数数组。</li>\n<li><strong>call () 方法</strong>不一定接受两个参数，第一个参数也是函数运行的作用域（ <code>this</code> ），但是传递给函数的参数必须列举出来。</li>\n</ul>\n<h3 id=\"innerhtml-innertext-outerhtml的区别\"><a class=\"anchor\" href=\"#innerhtml-innertext-outerhtml的区别\">#</a> innerHTML、innerText、outerHTML 的区别？</h3>\n<p><strong>innerHTML</strong>：对象的起始位置到终止位置的全部内容，包括 Html 标签。<br />\n<strong>innerText</strong>  ：从起始位置到终止位置的内容，但它去除 Html 标签。</p>\n<p><strong>outerHTML</strong>：除了包含 innerHTML 的全部内容外，还包含对象标签本身。</p>\n<h3 id=\"documenwrite-和-innerhtml-的区别\"><a class=\"anchor\" href=\"#documenwrite-和-innerhtml-的区别\">#</a> documen.write 和 innerHTML 的区别？</h3>\n<ul>\n<li>document.write 只能重绘整个页面；</li>\n<li>innerHTML 可以重绘页面的一部分；</li>\n</ul>\n<h3 id=\"typeof-与-instanceof-区别\"><a class=\"anchor\" href=\"#typeof-与-instanceof-区别\">#</a> typeof 与 instanceof 区别</h3>\n<p><strong> <code>typeof</code> </strong></p>\n<p>​\t操作符返回一个字符串，表示未经计算的操作数的类型；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token number\">1</span> <span class=\"token comment\">// 'number'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token string\">'1'</span> <span class=\"token comment\">// 'string'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">undefined</span> <span class=\"token comment\">// 'undefined'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span> <span class=\"token comment\">// 'boolean'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 'symbol'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span> <span class=\"token comment\">// 'object'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// 'object'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// 'object'</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">typeof</span> console <span class=\"token comment\">// 'object'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">typeof</span> console<span class=\"token punctuation\">.</span>log <span class=\"token comment\">// 'function'</span></pre></td></tr></table></figure><p>如果我们想要判断一个变量是否存在，可以使用 <code>typeof</code> ：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> a <span class=\"token operator\">!=</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 变量存在</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong> <code>instanceof</code> </strong></p>\n<p>​\t运算符用于检测构造函数的  <code>prototype</code>  属性是否出现在某个实例对象的原型链上，即构造函数通过 <code>new</code>  可以实例对象， <code>instanceof</code>  能判断这个对象是否是之前那个构造函数生成的对象；</p>\n<p>实现原理：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">myInstanceof</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">left<span class=\"token punctuation\">,</span> right</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 这里先用 typeof 来判断基础数据类型，如果是，直接返回 false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> left <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span> <span class=\"token operator\">||</span> left <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//getProtypeOf 是 Object 对象自带的 API，能够拿到参数的原型对象</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">let</span> proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>                  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>proto <span class=\"token operator\">===</span> right<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 找到相同原型对象，返回 true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        proto <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeof</span><span class=\"token punctuation\">(</span>proto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>typeof</code>  与 <code>instanceof</code>  都是判断数据类型的方法，区别如下：</p>\n<ul>\n<li><code>typeof</code>  会返回一个变量的基本类型， <code>instanceof</code>  返回的是一个布尔值</li>\n<li><code>instanceof</code>  可以准确地判断复杂引用数据类型，但是不能正确判断基础数据类型</li>\n<li>而 <code>typeof</code>  也存在弊端，它虽然可以判断基础数据类型（ <code>null</code>  除外），但是引用数据类型中，除了 <code>function</code>  类型以外，其他的也无法判断</li>\n</ul>\n<p>如果需要通用检测数据类型，可以采用 <code>Object.prototype.toString</code> ，调用该方法，统一返回格式 <code>“[object Xxx]”</code>  的字符串</p>\n<h3 id=\"js的事件模型及其事件流\"><a class=\"anchor\" href=\"#js的事件模型及其事件流\">#</a> JS 的事件模型及其事件流</h3>\n<p><code>\tjavascript</code>  中的事件，可以理解就是在 <code>HTML</code>  文档或者浏览器中发生的一种交互操作，使得网页具备互动性， 常见的有加载事件、鼠标事件、自定义事件等</p>\n<p>​\t由于 <code>DOM</code>  是一个树结构，如果在父子节点绑定事件时候，当触发子节点的时候，就存在一个顺序问题，这就涉及到了事件流的概念</p>\n<p>事件流都会经历三个阶段：</p>\n<ul>\n<li>事件捕获阶段 (capture phase)</li>\n<li>处于目标阶段 (target phase)</li>\n<li>事件冒泡阶段 (bubbling phase)</li>\n</ul>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220113132252.png\" alt=\"\" /></p>\n<p><mark><strong>事件模型：</strong></mark></p>\n<p>事件模型可以分为三种：</p>\n<ul>\n<li>原始事件模型（DOM0 级）</li>\n<li>标准事件模型（DOM2 级）</li>\n<li>IE 事件模型（基本不用）</li>\n</ul>\n<p><strong>原始事件模型</strong></p>\n<p>事件绑定监听函数比较简单，有两种方式：</p>\n<ul>\n<li>HTML 代码中直接绑定</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> onclick<span class=\"token operator\">=</span><span class=\"token string\">\"fun()\"</span><span class=\"token operator\">></span></pre></td></tr></table></figure><ul>\n<li>通过 <code>JS</code>  代码绑定</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>btn<span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> fun<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>特性：</p>\n<ul>\n<li>\n<p>绑定速度快</p>\n<p><code>DOM0</code>  级事件具有很好的跨浏览器优势，会以最快的速度绑定，但由于绑定速度太快，可能页面还未完全加载出来，以至于事件可能无法正常运行</p>\n</li>\n<li>\n<p>只支持冒泡，不支持捕获</p>\n</li>\n<li>\n<p>同一个类型的事件只能绑定一次</p>\n</li>\n</ul>\n<p><strong>标准事件模型</strong></p>\n<p>在该事件模型中，一次事件共有三个过程:</p>\n<ol>\n<li>事件捕获阶段：事件从 <code>document</code>  一直向下传播到目标元素，依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li>\n<li>事件处理阶段：事件到达目标元素，触发目标元素的监听函数</li>\n<li>事件冒泡阶段：事件从目标元素冒泡到 <code>document</code> , 依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'eventType'</span><span class=\"token punctuation\">,</span> handler<span class=\"token punctuation\">,</span> useCapture<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>参数如下：</p>\n<ul>\n<li><code>eventType</code>  指定事件类型 (不要加 on)</li>\n<li><code>handler</code>  是事件处理函数</li>\n<li><code>useCapture</code>  是一个 <code>boolean</code>  用于指定是否在捕获阶段进行处理，一般设置为 <code>false</code>  与 IE 浏览器保持一致</li>\n</ul>\n<p>特性：</p>\n<ul>\n<li>可以在一个 <code>DOM</code>  元素上绑定多个事件处理器，各自并不会冲突；</li>\n<li>执行时机可能选择。当第三个参数 ( <code>useCapture</code> ) 设置为 <code>true</code>  就在捕获过程中执行，反之在冒泡过程中执行处理函数；</li>\n</ul>\n<p><strong>IE 事件模型</strong></p>\n<p>IE 事件模型共有两个过程:</p>\n<ul>\n<li>事件处理阶段：事件到达目标元素，触发目标元素的监听函数。</li>\n<li>事件冒泡阶段：事件从目标元素冒泡到 <code>document</code> , 依次检查经过的节点是否绑定了事件监听函数，如果有则执行</li>\n</ul>\n<h3 id=\"请解释一下-javascript-的同源策略\"><a class=\"anchor\" href=\"#请解释一下-javascript-的同源策略\">#</a> 请解释一下 JavaScript 的同源策略？</h3>\n<ul>\n<li>概念：同源策略是客户端脚本（尤其是 Netscape Navigator2.0，其目的是防止某个文档或脚本从多个不同源装载。</li>\n<li>所谓 “同源” 指的是” 三个相同 “。<strong>相同的域名、端口和协议</strong>，这三个相同的话就视为同一个域，本域下的 JS 脚本只能读写本域下的数据资源，无法访问其它域的资源。</li>\n<li>同源策略是一种安全协议，指一段脚本只能读取来自同一来源的窗口和文档的属性。</li>\n</ul>\n<p><strong>同源策略的作用</strong></p>\n<ol>\n<li>无法用 js 读取非同源的 Cookie、LocalStorage 和 IndexDB：这个主要是为了防止恶意网站通过 js 获取用户其他网站的 cookie 等用户信息。</li>\n<li>无法用 js 获取非同源的 DOM：防止恶意网站通过 iframe 获取页面 dom，从而窃取页面的信息。</li>\n<li>无法用 js 发送非同源的 AJAX 请求：防止恶意的请求攻击服务器窃取数据信息。</li>\n</ol>\n<h3 id=\"跨域问题的解决方案\"><a class=\"anchor\" href=\"#跨域问题的解决方案\">#</a> 跨域问题的解决方案</h3>\n<p><strong>JSONP</strong></p>\n<p>​\t创建一个 script 标签，将 src 改成我们要请求的接口，并将 script 添加在 body 中，那么当浏览器解析到这个 script 时，会想 src 对应的服务器发送一个 get 请求，并将参数带过去。<br />\n然后当浏览器接收到服务端返回的数据，就会触发参数中 callbak 对应的回调函数 cb，从而完成整个 get 请求。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> script <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>script<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">'http://localhost:3000/api/test.do?a=1&amp;b=2&amp;callback=cb'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">cb</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// do something</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<ul>\n<li>只支持 get 请求</li>\n<li>需要后台配合，将返回结果包装成 callback (res) 的形式</li>\n</ul>\n</blockquote>\n<p><strong>cors</strong></p>\n<p>​\tcors 是一个 W3C 标准，全称是 &quot;跨域资源共享&quot;（Cross-origin resource sharing），它允许浏览器向跨源服务器发送 XMLHttpRequest 请求，从而克服了 AJAX 只能同源使用的限制<br />\n cors 需要浏览器和服务器同时支持，整个 CORS 通信过程，都是浏览器自动完成不需要用户参与，对于开发者来说，cors 的代码和正常的 ajax 没有什么差别，浏览器一旦发现跨域请求，就会添加一些附加的头信息。</p>\n<blockquote>\n<ol>\n<li>请求方式只能是：GET、POST、HEAD</li>\n<li>HTTP 请求头限制这几种字段：Accept、Accept-Language、Content-Language、Content-Type、Last-Event-ID</li>\n<li>Content-type 只能取：application/x-www-form-urlencoded、multipart/form-data、text/plain</li>\n</ol>\n</blockquote>\n<p><strong>服务器反向代理</strong></p>\n<p>​\t通过服务器的方向代理，将前端访问域名跟后端服务域名映射到同源的地址下，从而实现前端服务和后端服务的同源</p>\n<h3 id=\"什么是执行上下文\"><a class=\"anchor\" href=\"#什么是执行上下文\">#</a> 什么是执行上下文？</h3>\n<p>简而言之，执行上下文就是当前 JavaScript 代码被解析和执行时所在环境的抽象概念， JavaScript 中运行任何的代码都是在执行上下文中运行。</p>\n<p><strong>执行上下文的类型</strong></p>\n<p>执行上下文总共有三种类型：</p>\n<ul>\n<li>全局执行上下文： 这是默认的、最基础的执行上下文。不在任何函数中的代码都位于全局执行上下文中。它做了两件事：1. 创建一个全局对象，在浏览器中这个全局对象就是 window 对象。2. 将 this 指针指向这个全局对象。一个程序中只能存在一个全局执行上下文。</li>\n<li>函数执行上下文： 每次调用函数时，都会为该函数创建一个新的执行上下文。每个函数都拥有自己的执行上下文，但是只有在函数被调用的时候才会被创建。</li>\n<li>Eval 函数执行上下文： 运行在 eval 函数中的代码也获得了自己的执行上下文。</li>\n</ul>\n<p><strong>执行上下文的生命周期</strong></p>\n<p>​\t执行上下文的生命周期包括三个阶段：创建阶段 → 执行阶段 → 回收阶段</p>\n<ul>\n<li>\n<p>创建阶段</p>\n<p>创建阶段即当函数被调用，但未执行任何其内部代码之前</p>\n<p>创建阶段做了三件事：</p>\n<ul>\n<li>确定 this 的值，也被称为  <code>This Binding</code></li>\n<li>LexicalEnvironment（词法环境） 组件被创建</li>\n<li>VariableEnvironment（变量环境） 组件被创建</li>\n</ul>\n</li>\n<li>\n<p>执行阶段</p>\n<p>在这阶段，执行变量赋值、代码执行</p>\n</li>\n<li>\n<p>回收阶段</p>\n<p>执行上下文出栈等待虚拟机回收执行上下文</p>\n</li>\n</ul>\n<h3 id=\"执行栈\"><a class=\"anchor\" href=\"#执行栈\">#</a> 执行栈</h3>\n<p>​\t执行栈，也叫调用栈，具有 LIFO（后进先出）结构，用于存储在代码执行期间创建的所有执行上下文。</p>\n<p>​\t当 <code>Javascript</code>  引擎开始执行你第一行脚本代码的时候，它就会创建一个全局执行上下文然后将它压到执行栈中；</p>\n<p>每当引擎碰到一个函数的时候，它就会创建一个函数执行上下文，然后将这个执行上下文压到执行栈中；</p>\n<p>引擎会执行位于执行栈栈顶的执行上下文 (一般是函数执行上下文)，当该函数执行结束后，对应的执行上下文就会被弹出，然后控制流程到达执行栈的下一个执行上下文。</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220116214335.png\" alt=\"\" /></p>\n<h3 id=\"this的理解\"><a class=\"anchor\" href=\"#this的理解\">#</a> this 的理解</h3>\n<ol>\n<li>\n<p>this 永远指向一个对象；</p>\n</li>\n<li>\n<p>this 的指向完全取决于函数调用的位置</p>\n</li>\n<li>\n<p>根据不同的使用场合， <code>this</code>  有不同的值，主要分为下面几种情况：</p>\n<ul>\n<li>\n<p>默认绑定</p>\n</li>\n<li>\n<p>隐式绑定</p>\n</li>\n<li>\n<p>new 绑定</p>\n</li>\n<li>\n<p>显示绑定</p>\n<p>其中：new 绑定优先级 &gt; 显示绑定优先级 &gt; 隐式绑定优先级 &gt; 默认绑定优先级</p>\n</li>\n</ul>\n</li>\n</ol>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvdGhpcy5odG1sIyVFNCVCOCU4MCVFMyU4MCU4MSVFNSVBRSU5QSVFNCVCOSU4OQ==\">面试官：谈谈 this 对象的理解 | web 前端面试 - 面试官系列 (vue3js.cn)</span></p>\n<h3 id=\"介绍一下闭包和闭包的常用场景\"><a class=\"anchor\" href=\"#介绍一下闭包和闭包的常用场景\">#</a> 介绍一下闭包和闭包的常用场景？</h3>\n<ol>\n<li>闭包是指有权访问另一个函数作用域中的变量的函数，创建闭包常见方式，就是在一个函数的内部创建另一个函数。</li>\n<li>使用闭包主要为了设计私有的方法和变量，闭包的优点是可以避免变量的污染，缺点是闭包会常驻内存，会增大内存使用量，使用不当很容易造成内存泄露。<br />\n在 js 中，函数即闭包，只有函数才会产生作用域的概念。</li>\n</ol>\n<ul>\n<li>\n<p>闭包有三个特性：</p>\n<ul>\n<li>函数嵌套函数</li>\n<li>函数内部可以引用外部的参数和变量</li>\n<li>参数和变量不会被垃圾回收机制回收</li>\n</ul>\n</li>\n<li>\n<p>应用场景：</p>\n<ul>\n<li>\n<p>创建私有变量</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">makeSizer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">size</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>fontSize <span class=\"token operator\">=</span> size <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> size12 <span class=\"token operator\">=</span> <span class=\"token function\">makeSizer</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> size14 <span class=\"token operator\">=</span> <span class=\"token function\">makeSizer</span><span class=\"token punctuation\">(</span><span class=\"token number\">14</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> size16 <span class=\"token operator\">=</span> <span class=\"token function\">makeSizer</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'size-12'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> size12<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'size-14'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> size14<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'size-16'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>onclick <span class=\"token operator\">=</span> size16<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>延长变量的生命周期</p>\n</li>\n</ul>\n</li>\n<li>\n<p>不适用场景：返回闭包的函数是个非常大的函数</p>\n</li>\n<li>\n<p>闭包的缺点就是常驻内存，会增大内存使用量，使用不当会造成内存泄漏</p>\n</li>\n</ul>\n<h3 id=\"javascript的内存垃圾回收机制\"><a class=\"anchor\" href=\"#javascript的内存垃圾回收机制\">#</a> javascript 的内存 (垃圾) 回收机制？</h3>\n<ul>\n<li>垃圾回收器会每隔一段时间找出那些不再使用的内存，然后为其释放内存</li>\n<li>一般使用<strong>标记清除方法 (mark and sweep)</strong>, 当变量进入环境标记为进入环境，离开环境标记为离开环境<br />\n垃圾回收器会在运行的时候给存储在内存中的所有变量加上标记，然后去掉环境中的变量以及被环境中变量所引用的变量（闭包），在这些完成之后仍存在标记的就是要删除的变量了</li>\n<li>还有<strong>引用计数方法 (reference counting)</strong>, 在低版本 IE 中经常会出现内存泄露，很多时候就是因为其采用引用计数方式进行垃圾回收。引用计数的策略是跟踪记录每个值被使用的次数，当声明了一个 变量并将一个引用类型赋值给该变量的时候这个值的引用次数就加 1，如果该变量的值变成了另外一个，则这个值得引用次数减 1，当这个值的引用次数变为 0 的时 候，说明没有变量在使用，这个值没法被访问了，因此可以将其占用的空间回收，这样垃圾回收器会在运行的时候清理掉引用次数为 0 的值占用的空间。</li>\n</ul>\n<h3 id=\"作用域链的理解\"><a class=\"anchor\" href=\"#作用域链的理解\">#</a> 作用域链的理解？</h3>\n<p>我们一般将作用域分成：</p>\n<ul>\n<li>\n<p><strong>全局作用域</strong></p>\n<p>​\t任何不在函数中或是大括号中声明的变量，都是在全局作用域下，全局作用域下声明的变量可以在程序的任意位置访问</p>\n</li>\n<li>\n<p><strong>函数作用域</strong></p>\n<p>​\t函数作用域也叫局部作用域，如果一个变量是在函数内部声明的它就在一个函数作用域下面。这些变量只能在函数内部访问，不能在函数以外去访问</p>\n</li>\n<li>\n<p><strong>块级作用域</strong></p>\n<p>​\tES6 引入了 <code>let</code>  和 <code>const</code>  关键字，和 <code>var</code>  关键字不同，在大括号中使用 <code>let</code>  和 <code>const</code>  声明的变量存在于块级作用域中。在大括号之外不能访问这些变量</p>\n</li>\n</ul>\n<h3 id=\"javascript原型原型链-有什么特点\"><a class=\"anchor\" href=\"#javascript原型原型链-有什么特点\">#</a> JavaScript 原型，原型链？有什么特点？</h3>\n<ol>\n<li><code>JavaScript</code>  常被描述为一种基于原型的语言 —— 每个对象拥有一个原型对象，即每个对象都会在其内部初始化一个属性，就是 proto；</li>\n<li>当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么他就会去 prototype 里找这个属性，这个 prototype 又会有自己的 prototype，于是就这样一直找下去，也就是我们平时所说的原型链的概念；</li>\n<li>特点：<br />\nJavaScript 对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变。</li>\n</ol>\n<blockquote>\n<ol>\n<li>对象有属性__proto__，指向该对象的构造函数的原型对象；</li>\n<li>方法除了有属性__proto__，还有属性 prototype，prototype 指向该方法的原型对象；而它的__proto__通常指向 Function.prototype;</li>\n</ol>\n</blockquote>\n<p><strong>总结：</strong></p>\n<p><code>__proto__</code> 作为不同对象之间的桥梁，用来指向创建它的构造函数的原型对象的：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220116165843.png\" alt=\"\" /></p>\n<p>举个例子：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 第二步 创建实例</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">var</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'person'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220116165808.png\" alt=\"\" /></p>\n<ul>\n<li>一切对象都是继承自 <code>Object</code>  对象， <code>Object</code>  对象直接继承根源对象 <code>null</code></li>\n<li>一切的函数对象（包括  <code>Object</code>  对象），都是继承自  <code>Function</code>  对象</li>\n</ul>\n<h3 id=\"js如何实现继承的\"><a class=\"anchor\" href=\"#js如何实现继承的\">#</a> JS 如何实现继承的？</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly92dWUzanMuY24vaW50ZXJ2aWV3L0phdmFTY3JpcHQvaW5oZXJpdC5odG1sIyVFNCVCOCU4MCVFMyU4MCU4MSVFNiU5OCVBRiVFNCVCQiU4MCVFNCVCOSU4OA==\">面试官：Javascript 如何实现继承？ | web 前端面试 - 面试官系列 (vue3js.cn)</span></p>\n<h2 id=\"vue篇\"><a class=\"anchor\" href=\"#vue篇\">#</a> Vue 篇</h2>\n<h3 id=\"谈谈你对mvvm开发模式的理解\"><a class=\"anchor\" href=\"#谈谈你对mvvm开发模式的理解\">#</a> 谈谈你对 MVVM 开发模式的理解？</h3>\n<ul>\n<li>MVVM 分为 Model、View、ViewModel 三者；</li>\n<li>Model 代表数据模型，数据和业务逻辑都在 Model 层中定义；</li>\n<li>View 代表 UI 视图，负责数据的展示；</li>\n<li>ViewModel 负责监听 Model 中数据的改变并且控制视图的更新，处理用户交互操作；</li>\n<li>Model 和 View 并无直接关联，而是通过 ViewModel 来进行联系的，Model 和 ViewModel 之间有着双向数据绑定的联系。因此当 Model 中的数据改变时会触发 View 层的刷新，View 中由于用户交互操作而改变的数据也会在 Model 中同步。</li>\n<li>这种模式实现了 Model 和 View 的数据自动同步，因此开发者只需要专注对数据的维护操作即可，而不需要自己亲自操作 dom。</li>\n</ul>\n<h3 id=\"你对spa单页面的理解它的优缺点分别是什么如何实现spa应用呢\"><a class=\"anchor\" href=\"#你对spa单页面的理解它的优缺点分别是什么如何实现spa应用呢\">#</a> 你对 SPA 单页面的理解，它的优缺点分别是什么？如何实现 SPA 应用呢？</h3>\n<p>​\tSPA（single-page application），翻译过来就是单页应用 <code>SPA</code>  是一种网络应用程序或网站的模型，它通过动态重写当前页面来与用户交互，这种方法避免了页面之间切换打断用户体验在单页应用中，所有必要的代码（ <code>HTML</code> 、 <code>JavaScript</code>  和 <code>CSS</code> ）都通过单个页面的加载而检索，或者根据需要（通常是为响应用户操作）动态装载适当的资源并添加到页面，页面在任何时间点都不会重新加载。</p>\n<p><strong>单页应用优缺点</strong></p>\n<p>优点：</p>\n<ul>\n<li>具有桌面应用的即时性、网站的可移植性和可访问性</li>\n<li>用户体验好、快，内容的改变不需要重新加载整个页面</li>\n<li>良好的前后端分离，分工更明确</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>不利于搜索引擎的抓取</li>\n<li>首次渲染速度相对较慢</li>\n</ul>\n<h3 id=\"生命周期有哪些\"><a class=\"anchor\" href=\"#生命周期有哪些\">#</a> 生命周期有哪些？</h3>\n<p>Vue 生命周期总共可以分为 8 个阶段：创建前后，载入前后，更新前后，销毁前销毁后，以及一些特殊场景的生命周期</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">生命周期</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">beforeCreate</td>\n<td style=\"text-align:left\">组件实例被创建之初，组件的属性生效之前</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">created</td>\n<td style=\"text-align:left\">组件实例已经完全创建，属性也绑定，但真实 dom 还没有生成，$el 还不可用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">beforeMount</td>\n<td style=\"text-align:left\">在挂载开始之前被调用：相关的 render 函数首次被调用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">mounted</td>\n<td style=\"text-align:left\">el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">beforeUpdate</td>\n<td style=\"text-align:left\">组件数据发生变化，发生在虚拟 DOM 打补丁之前</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">updated</td>\n<td style=\"text-align:left\">组件数据更新之后</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">beforeDestroy</td>\n<td style=\"text-align:left\">组件实例销毁之前</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">destroyed</td>\n<td style=\"text-align:left\">组件实例销毁之后</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">activated</td>\n<td style=\"text-align:left\">keep-alive 专属，组件被激活时调用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">deactivated</td>\n<td style=\"text-align:left\">keep-alive 专属，组件被销毁时调用</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">errorCaptured</td>\n<td style=\"text-align:left\">捕获一个来自子孙组件的错误时被调用</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"v-if-和-v-show-有什么区别\"><a class=\"anchor\" href=\"#v-if-和-v-show-有什么区别\">#</a> v-if 和 v-show 有什么区别？</h3>\n<ul>\n<li>v-if 是真正的条件渲染，会控制这个 DOM 节点的存在与否。因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是惰性的：如果在初始渲染时条件为假，则什么也不做 —— 直到条件第一次变为真时，才会开始渲染条件块。</li>\n<li>v-show 就简单得多 —— 不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 “display” 属性进行切换。</li>\n</ul>\n<h3 id=\"你使用过-vuex-吗\"><a class=\"anchor\" href=\"#你使用过-vuex-吗\">#</a> 你使用过 Vuex 吗？</h3>\n<p>​\t在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读 / 写数据或方法），也是一种组件间通信的方式，且适用于任意组件间通信。</p>\n<h3 id=\"computed-和-watch-的区别和运用的场景\"><a class=\"anchor\" href=\"#computed-和-watch-的区别和运用的场景\">#</a> computed 和 watch 的区别和运用的场景？</h3>\n<ul>\n<li>computed： 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；</li>\n<li>watch： 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；</li>\n<li>运用场景：\n<ul>\n<li>当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算；</li>\n<li>当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 (访问一个 API)，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"直接给一个数组项赋值vue-能检测到变化吗\"><a class=\"anchor\" href=\"#直接给一个数组项赋值vue-能检测到变化吗\">#</a> 直接给一个数组项赋值，Vue 能检测到变化吗？</h3>\n<p>由于 JavaScript 的限制，Vue 不能检测到以下数组的变动：</p>\n<blockquote>\n<ul>\n<li>当你利用索引直接设置一个数组项时，例如： <code>vm.items[indexOfItem] = newValue</code></li>\n<li>当你修改数组的长度时，例如： <code>vm.items.length = newLength</code></li>\n</ul>\n</blockquote>\n<ul>\n<li>\n<p>为了解决第一个问题，Vue 提供了以下操作方法：</p>\n<pre><code class=\"language-vue\">// Vue.set\nVue.set(vm.items, indexOfItem, newValue)\n// vm.$set，Vue.set的一个别名\nvm.$set(vm.items, indexOfItem, newValue)\n// Array.prototype.splice\nvm.items.splice(indexOfItem, 1, newValue)\n</code></pre>\n</li>\n<li>\n<p>为了解决第二个问题，Vue 提供了以下操作方法：</p>\n<pre><code class=\"language-vue\">// Array.prototype.splice\nvm.items.splice(newLength)\n</code></pre>\n</li>\n</ul>\n<h3 id=\"vue-的父组件和子组件生命周期钩子函数执行顺序\"><a class=\"anchor\" href=\"#vue-的父组件和子组件生命周期钩子函数执行顺序\">#</a> Vue 的父组件和子组件生命周期钩子函数执行顺序？</h3>\n<ul>\n<li>加载渲染过程 :<br />\n 父 beforeCreate -&gt; 父 created -&gt; 父 beforeMount -&gt; 子 beforeCreate -&gt; 子 created -&gt; 子 beforeMount -&gt; 子 mounted -&gt; 父 mounted</li>\n<li>子组件更新过程 :<br />\n 父 beforeUpdate -&gt; 子 beforeUpdate -&gt; 子 updated -&gt; 父 updated</li>\n<li>父组件更新过程 :<br />\n 父 beforeUpdate -&gt; 父 updated</li>\n<li>销毁过程 :<br />\n 父 beforeDestroy -&gt; 子 beforeDestroy -&gt; 子 destroyed -&gt; 父 destroyed</li>\n</ul>\n<h3 id=\"组件中-data-为什么是一个函数\"><a class=\"anchor\" href=\"#组件中-data-为什么是一个函数\">#</a> 组件中 data 为什么是一个函数？</h3>\n<ul>\n<li>因为组件是用来复用的，且 JS 里对象是引用关系，如果组件中 data 是一个对象，那么这样作用域没有隔离，子组件中的 data 属性值会相互影响，</li>\n<li>如果组件中 data 选项是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的 data 属性值不会互相影响；而 new Vue 的实例，是不会被复用的，因此不存在引用对象的问题。</li>\n</ul>\n<h3 id=\"v-model-的原理\"><a class=\"anchor\" href=\"#v-model-的原理\">#</a> v-model 的原理？</h3>\n<p>我们在 vue 项目中主要使用 v-model 指令在表单 input、textarea、select 等元素上创建双向数据绑定，我们知道 v-model 本质上不过是语法糖，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p>\n<ul>\n<li>text 和 textarea 元素使用 value 属性和 input 事件；</li>\n<li>checkbox 和 radio 使用 checked 属性和 change 事件；</li>\n<li>select 字段将 value 作为 prop 并将 change 作为事件。</li>\n</ul>\n<h3 id=\"vue-组件间通信有哪几种方式\"><a class=\"anchor\" href=\"#vue-组件间通信有哪几种方式\">#</a> Vue 组件间通信有哪几种方式？</h3>\n<ol>\n<li><code>props</code> / <code>$emit</code>  (父传子 / 子传父)</li>\n<li><code>$emit</code> / <code>$on</code> （全局事件总线）</li>\n<li><code>vuex</code>  (实现集中式状态（数据）管理的插件)</li>\n</ol>\n<h3 id=\"对于-vue30-特性你有什么了解的吗\"><a class=\"anchor\" href=\"#对于-vue30-特性你有什么了解的吗\">#</a> 对于 vue3.0 特性你有什么了解的吗？</h3>\n<h2 id=\"flutter\"><a class=\"anchor\" href=\"#flutter\">#</a> Flutter</h2>\n<h2 id=\"网络协议篇\"><a class=\"anchor\" href=\"#网络协议篇\">#</a> 网络协议篇</h2>\n<h3 id=\"tcp-传输的三次握手-四次挥手策略\"><a class=\"anchor\" href=\"#tcp-传输的三次握手-四次挥手策略\">#</a> TCP 传输的三次握手、四次挥手策略</h3>\n<ul>\n<li>\n<p>三次握手：</p>\n<p>为了准确无误地吧数据送达目标处，TCP 协议采用了三次握手策略。用 TCP 协议把数据包送出去后，TCP 不会对传送后的情况置之不理，他一定会向对方确认是否送达，握手过程中使用 TCP 的标志：SYN 和 ACK</p>\n<ul>\n<li>发送端首先发送一个带 SYN 的标志的数据包给对方</li>\n<li>接收端收到后，回传一个带有 SYN/ACK 标志的数据包以示传达确认信息</li>\n<li>最后，发送端再回传一个带 ACK 的标志的数据包，代表 “握手” 结束</li>\n</ul>\n</li>\n<li>\n<p>如在握手过程中某个阶段莫明中断，TCP 协议会再次以相同的顺序发送相同的数据包</p>\n</li>\n</ul>\n<hr />\n<ul>\n<li>断开一个 TCP 连接需要 “四次挥手”\n<ul>\n<li>第一次挥手：主动关闭方发送一个 FIN，用来关注主动方到被动关闭方的数据传送，也即是主动关闭方告诫被动关闭方：我已经不会再给你发数据了（在 FIN 包之前发送的数据，如果没有收到对应的 ACK 确认报文，主动关闭方依然会重发这些数据）。但是，此时主动关闭方还可以接受数据</li>\n<li>第二次挥手：被动关闭方收到 FIN 包后，发送一个 ACK 给对方，确认序号收到序号 +1（与 SYN 相同，一个 FIN 占用一个序号）</li>\n<li>第三次挥手：被动关闭方发送一个 FIN。用来关闭被动关闭方到主动关闭方的数据传送，也就是告诉主动关闭方，我的数据也发送完了，不会给你发送数据了</li>\n<li>第四次挥手：主动关闭方收到 FIN 后，发送一个 ACK 给被动关闭方，确认序号为收到序号 + 1，至此，完成四次挥手</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"http协议的理解\"><a class=\"anchor\" href=\"#http协议的理解\">#</a> HTTP 协议的理解</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC80NTE3Mzg2Mg==\">深入理解 HTTP 协议 - 知乎 (zhihu.com)</span></p>\n<h3 id=\"http常见的状态码\"><a class=\"anchor\" href=\"#http常见的状态码\">#</a> HTTP 常见的状态码？</h3>\n<ul>\n<li>100 Continue 继续，一般在发送 post 请求时，已发送了 http header 之后服务端将返回此信息，表示确认，之后发送具体参数信息</li>\n<li>200 OK 正常返回信息</li>\n<li>201 Created 请求成功并且服务器创建了新的资源</li>\n<li>202 Accepted 服务器已接受请求，但尚未处理</li>\n<li>301 Moved Permanently 请求的网页已永久移动到新位置。</li>\n<li>302 Found 临时性重定向，请求的网页暂时被移动到了新位置。</li>\n<li>303 See Other 临时性重定向，请求的资源在其它的 URl 上，且总是使用 GET 请求新的 URI。</li>\n<li>304 Not Modified 自从上次请求后，请求的网页未修改过。</li>\n<li>400 Bad Request 服务器无法理解请求的格式，客户端不应当尝试再次使用相同的内容发起请求。</li>\n<li>401 Unauthorized 应该用来表示缺失或错误的认证。</li>\n<li>403 Forbidden 权限不够而禁止访问。</li>\n<li>404 Not Found 找不到如何与 URI 相匹配的资源。</li>\n<li>406 Not Acceptable 表示客户端无法解析服务端返回的内容.</li>\n<li>500 Internal Server Error 最常见的服务器端错误。</li>\n<li>503 Service Unavailable 服务器端暂时无法处理请求（可能是过载或维护）。</li>\n</ul>\n<h3 id=\"http-和-https为什么https安全\"><a class=\"anchor\" href=\"#http-和-https为什么https安全\">#</a> HTTP 和 HTTPS，为什么 HTTPS 安全？</h3>\n<ul>\n<li>HTTP 协议通常承载与 TCP 协议之上，在 HTTP 和 TCP 之间添加一个安全协议层（SSL 或 TSL），这个时候，就成了我们常说的 HTTPS</li>\n<li>默认 HTTP 的端口号为 80，HTTPS 的端口号为 443</li>\n<li>因为网络请求需要中间有很多的服务器路由的转发，中间的节点都可能篡改信息，而如果使用 HTTPS，密钥在你和终点站才有，https 之所有说比 http 安全，是因为他利用 ssl/tls 协议传输。包含证书，流量转发，负载均衡，页面适配，浏览器适配，refer 传递等，保障了传输过程的安全性</li>\n</ul>\n<h3 id=\"http协议下常用的7种请求方法\"><a class=\"anchor\" href=\"#http协议下常用的7种请求方法\">#</a> HTTP 协议下常用的 7 种请求方法</h3>\n<ul>\n<li><strong>GET</strong>：发出请求从服务器获取一份文档；</li>\n<li><strong>HEAD</strong>：同 GET 但只从服务器获取文档的首部；</li>\n<li><strong>POST</strong>：向服务器发送带要处理的数据，并可以接收处理过后的数据；</li>\n<li><strong>PUT</strong>：将请求的主体部分存储在服务器上；</li>\n<li><strong>TRACE</strong>：对可能经过代理服务器传送到服务器上去的报文进行追踪；</li>\n<li><strong>OPTIONS</strong>：请求 Web 服务器告知其支持的各种功能；</li>\n<li><strong>DELETE</strong>：从服务器上删除一份文档；</li>\n</ul>\n<h3 id=\"tcp与udp的区别\"><a class=\"anchor\" href=\"#tcp与udp的区别\">#</a> TCP 与 UDP 的区别？</h3>\n<p>TCP (Transmission Control Protocol) 和 UDP (User Datagram Protocol) 协议属于传输层协议，它们之间的区别包括：</p>\n<ul>\n<li>TCP 是面向连接的，UDP 是无连接的；</li>\n<li>TCP 是可靠的，UDP 是不可靠的；</li>\n<li>TCP 只支持点对点通信，UDP 支持一对一、一对多、多对一、多对多的通信模式；</li>\n<li>TCP 是面向字节流的，UDP 是面向报文的；</li>\n<li>TCP 有拥塞控制机制；UDP 没有拥塞控制，适合媒体通信；</li>\n<li>TCP 首部开销 (20 个字节) 比 UDP 的首部开销 (8 个字节) 要大；</li>\n</ul>\n<h3 id=\"什么是-http-协议无状态协议怎么解决http协议无状态协议\"><a class=\"anchor\" href=\"#什么是-http-协议无状态协议怎么解决http协议无状态协议\">#</a> 什么是 HTTP 协议无状态协议？怎么解决 Http 协议无状态协议？</h3>\n<p>HTTP 是一个无状态的协议，也就是没有记忆力，这意味着每一次的请求都是独立的，缺少状态意味着如果后续处理需要前面的信息，则它必须要重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就很快。</p>\n<p>HTTP 的这种特性有优点也有缺点：</p>\n<ul>\n<li><strong>优点</strong>：解放了服务器，每一次的请求 “点到为止”，不会造成不必要的连接占用</li>\n<li><strong>缺点</strong>：每次请求会传输大量重复的内容信息，并且，在请求之间无法实现数据的共享</li>\n</ul>\n<p>解决方案：使用 Cookie 技术</p>\n<h3 id=\"sql-注入\"><a class=\"anchor\" href=\"#sql-注入\">#</a> SQL 注入</h3>\n<p>​\tSQL 注入就是通过把 SQL 命令插入到 Web 表单提交或输入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意的 SQL 命令。</p>\n<h3 id=\"xss-攻击\"><a class=\"anchor\" href=\"#xss-攻击\">#</a> XSS 攻击</h3>\n<p>​\tXSS 是一种经常出现在 web 应用中的计算机安全漏洞，与 SQL 注入一起成为 web 中最主流的攻击方式。XSS 是指恶意攻击者利用网站没有对用户提交数据进行转义处理或者过滤不足的缺点，进而添加一些脚本代码嵌入到 web 页面中去，使别的用户访问都会执行相应的嵌入代码，从而盗取用户资料、利用用户身份进行某种动作或者对访问者进行病毒侵害的一种攻击方式。</p>\n<h3 id=\"osi-网络体系结构与-tcpip-协议模型\"><a class=\"anchor\" href=\"#osi-网络体系结构与-tcpip-协议模型\">#</a> OSI 网络体系结构与 TCP/IP 协议模型</h3>\n<p>​\tOSI 是一个理论上的网络通信模型，而 TCP/IP 则是实际上的网络通信标准。</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211228204916.png\" alt=\"\" /></p>\n<h2 id=\"git篇\"><a class=\"anchor\" href=\"#git篇\">#</a> Git 篇</h2>\n<p><a href=\"https://nc3021.github.io/2021/11/25/hybrid-learning/Git/\">Git 使用说明 - 杂学 | Sakura = Course Of Growth (nc3021.github.io)</a></p>\n<h3 id=\"什么是git\"><a class=\"anchor\" href=\"#什么是git\">#</a> 什么是 Git？</h3>\n<p>​\tGit 是分布式版本控制系统（DVCS）。它可以跟踪文件的更改，并允许你恢复到任何特定版本的更改。</p>\n<h3 id=\"git-是用什么语言编写的\"><a class=\"anchor\" href=\"#git-是用什么语言编写的\">#</a> Git 是用什么语言编写的？</h3>\n<p>​\tGit 使用 C 语言编写。 GIT 很快，C 语言通过减少运行时的开销来做到这一点。</p>\n<h3 id=\"git-pull-和-git-fetch-有什么区别\"><a class=\"anchor\" href=\"#git-pull-和-git-fetch-有什么区别\">#</a> git pull 和 git fetch 有什么区别？</h3>\n<p><strong>git pull</strong> 命令从中央存储库中提取特定分支的新更改或提交，并更新本地存储库中的目标分支。</p>\n<p><strong>git fetch</strong> 也用于相同的目的，但它的工作方式略有不同。当你执行 git fetch 时，它会从所需的分支中提取所有新提交，并将其存储在本地存储库中的新分支中。如果要在目标分支中反映这些更改，必须在 git fetch 之后执行 git merge。只有在对目标分支和获取的分支进行合并后才会更新目标分支。</p>\n<h3 id=\"什么是-git-stash\"><a class=\"anchor\" href=\"#什么是-git-stash\">#</a> 什么是 git stash?</h3>\n<p><strong>git stash</strong> 会将你的工作目录，即修改后的跟踪文件和暂存的更改保存在一堆未完成的更改中，你可以随时重新应用这些更改。</p>\n<h3 id=\"什么时候使用git-rebase代替git-merge\"><a class=\"anchor\" href=\"#什么时候使用git-rebase代替git-merge\">#</a> 什么时候使用 git rebase 代替 git merge？</h3>\n<p>使用变基时，意味着使用另一个分支作为集成修改的新基础。一般只有在完全自信且为了使历史分支记录更为清晰的时候使用。</p>\n<h3 id=\"提交时发生冲突你能解释冲突是如何产生的吗你是如何解决的\"><a class=\"anchor\" href=\"#提交时发生冲突你能解释冲突是如何产生的吗你是如何解决的\">#</a> 提交时发生冲突，你能解释冲突是如何产生的吗？你是如何解决的？</h3>\n<p>​\t开发过程中，我们都有自己的特性分支，所以冲突发生的并不多，但也碰到过。诸如公共类的公共方法，我和别人同时修改同一个文件，他提交后我再提交就会报冲突的错误。<br />\n发生冲突，在 IDE 里面一般都是对比本地文件和远程分支的文件，然后把远程分支上文件的内容手工修改到本地文件，然后再提交冲突的文件使其保证与远程分支的文件一致，这样才会消除冲突，然后再提交自己修改的部分。<br />\n​\t发生冲突，也可以使用命令：</p>\n<ul>\n<li>通过 git stash 命令，把工作区的修改提交到栈区，目的是保存工作区的修改；</li>\n<li>通过 git pull 命令，拉取远程分支上的代码并合并到本地分支，目的是消除冲突；</li>\n<li>通过 git stash pop 命令，把保存在栈区的修改部分合并到最新的工作空间中；</li>\n</ul>\n<h3 id=\"git-如何撤销-commit-git-commit-提交之后如何取消本次提交\"><a class=\"anchor\" href=\"#git-如何撤销-commit-git-commit-提交之后如何取消本次提交\">#</a> git 如何撤销 commit、git commit 提交之后如何取消本次提交？</h3>\n<p>可以先用 git reflog 查看历史提交记录</p>\n<p><strong>软撤销 --soft</strong><br />\n 本地代码不会变化，只是 git 转改会恢复为 commit 之前的状态</p>\n<p>不删除工作空间改动代码，撤销 commit，不撤销 git add .</p>\n<pre><code>git reset --soft HEAD~1\n</code></pre>\n<p>表示撤销最后一次的 commit ，1 可以换成其他更早的数字</p>\n<p><strong>硬撤销</strong><br />\n本地代码会直接变更为指定的提交版本，慎用</p>\n<p>删除工作空间改动代码，撤销 commit，撤销 git add .</p>\n<p>注意完成这个操作后，就恢复到了上一次的 commit 状态。</p>\n<pre><code>git reset --hard HEAD~1\n</code></pre>\n<h3 id=\"使用过git-cherry-pick有什么作用\"><a class=\"anchor\" href=\"#使用过git-cherry-pick有什么作用\">#</a> 使用过 git cherry-pick，有什么作用？</h3>\n<p>​\t命令 git cherry-pick 可以把 branch A 的 commit 复制到 branch B 上。</p>\n<p>​\t在 branch B 上进行命令操作：</p>\n<pre><code>git cherry-pick commitId\n</code></pre>\n<h2 id=\"杂项篇\"><a class=\"anchor\" href=\"#杂项篇\">#</a> 杂项篇</h2>\n<h3 id=\"常见的浏览器内核有哪些\"><a class=\"anchor\" href=\"#常见的浏览器内核有哪些\">#</a> 常见的浏览器内核有哪些</h3>\n<ul>\n<li>浏览器内核主要分成两部分：渲染引擎 (layout engineer 或 Rendering Engine) 和 JS 引擎。\n<ul>\n<li>渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入 CSS 等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器、电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核。</li>\n<li>JS 引擎则：解析和执行 javascript 来实现网页的动态效果。</li>\n</ul>\n</li>\n<li>常见内核：\n<ul>\n<li>Trident 内核：IE, MaxThon, TT, The World, 360, 搜狗浏览器等。[又称 MSHTML]</li>\n<li>Gecko 内核：FireFox</li>\n<li>Webkit 内核：Safari, Chrome 等。 [Chrome 的：Blink（WebKit 的分支）]</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"网页前端性能优化的方式有哪些\"><a class=\"anchor\" href=\"#网页前端性能优化的方式有哪些\">#</a> 网页前端性能优化的方式有哪些？</h3>\n<ol>\n<li>\n<p>图片懒加载；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211228134934.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>压缩 css, js, 图片；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211228135208.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>减少 http 请求次数， 合并 css、js 、合并图片（雪碧图）；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211228135609.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>浏览器缓存；</p>\n</li>\n<li>\n<p>样式表置顶、脚本置低</p>\n<ul>\n<li>加载并发数是有上限的，js 和 css 混合放置，会导致 css 的延迟，会导致页面闪动，所以 js 要置底</li>\n<li>css 放在 header 中，阻塞页面的渲染，css 加载完，再加载 dom，放置页面样式跳变，从而保证渲染一步到位</li>\n<li>css 不会阻塞后面 js 并发加载，但会阻塞 js 的执行。如果 js 放在 header 中，会阻塞 html 的渲染。</li>\n</ul>\n</li>\n<li>\n<p>使用 CDN</p>\n<p>内容分发网络（CDN）是位于不同地理位置的服务器组成的网络。每个服务器都拥有所有网站的文件副本。当用户请求文件和网页时，就可以直接从就近的网站服务器获取相应资源（也可以是从负载最小的服务器）。你可以使用<span class=\"exturl\" data-url=\"aHR0cDovL2F3cy5hbWF6b24uY29tL2Nsb3VkZnJvbnQv\"> Amazon cloud front </span>或者<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWF4Y2RuLmNvbS8=\"> MaxCDN</span> 为网站开启 CDN 加速。</p>\n</li>\n<li>\n<p>减少 dom 元素数量 (Vue）；</p>\n</li>\n</ol>\n<h3 id=\"sessionstorage-localstorage-和-cookie-之间的区别\"><a class=\"anchor\" href=\"#sessionstorage-localstorage-和-cookie-之间的区别\">#</a> sessionStorage 、localStorage 和 cookie 之间的区别？</h3>\n<ul>\n<li>共同点：都是保存在浏览器端，且同源的。</li>\n<li>区别：\n<ol>\n<li>cookie 数据始终在同源的 http 请求中携带（即使不需要），即 cookie 在浏览器和服务器间来回传递。而 sessionStorage 和 localStorage 不会自动把数据发给服务器，仅在本地保存。</li>\n<li>存储大小限制也不同，cookie 数据不能超过 4k；sessionStorage 和 localStorage 虽然也有存储大小的限制，但比 cookie 大得多，可以达到 5M 或更大。</li>\n<li>数据有效期不同，sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持；localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie 只在设置的 cookie 过期时间之前一直有效，即使窗口或浏览器关闭。</li>\n<li>作用域不同，sessionStorage 不在不同的浏览器窗口中共享，即使是同一个页面；localStorage 在所有同源窗口中都是共享的；cookie 也是在所有同源窗口中都是共享的。</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220113221719.png\" alt=\"\" /></p>\n<h3 id=\"在cssjs代码上线之后开发人员经常会优化性能从用户刷新网页开始一次js请求一般情况下有哪些地方会有缓存处理\"><a class=\"anchor\" href=\"#在cssjs代码上线之后开发人员经常会优化性能从用户刷新网页开始一次js请求一般情况下有哪些地方会有缓存处理\">#</a> 在 css/js 代码上线之后开发人员经常会优化性能，从用户刷新网页开始，一次 js 请求一般情况下有哪些地方会有缓存处理？</h3>\n<ul>\n<li>\n<p>DNS 缓存</p>\n<p>全称 Domain Name System , 即域名系统</p>\n</li>\n<li>\n<p>CDN 缓存</p>\n<p>全称 Content Delivery Network, 即内容分发网络（缓存服务器）</p>\n</li>\n<li>\n<p>浏览器缓存</p>\n</li>\n<li>\n<p>服务器缓存</p>\n</li>\n</ul>\n<h3 id=\"网页从输入网址到渲染完成经历了哪些过程\"><a class=\"anchor\" href=\"#网页从输入网址到渲染完成经历了哪些过程\">#</a> 网页从输入网址到渲染完成经历了哪些过程？</h3>\n<p>大致可以分为如下 7 步：</p>\n<ul>\n<li>输入网址；</li>\n<li>发送到 DNS 服务器，并获取域名对应的 web 服务器对应的 ip 地址；</li>\n<li>与 web 服务器建立 TCP 连接；</li>\n<li>浏览器向 web 服务器发送 http 请求；</li>\n<li>web 服务器响应请求，并返回指定 url 的数据（或错误信息，或重定向的新的 url 地址）；</li>\n<li>浏览器下载 web 服务器返回的数据及解析 html 源文件；</li>\n<li>生成 DOM 树，解析 css 和 js，渲染页面，直至显示完成；</li>\n</ul>\n<h3 id=\"浏览器的渲染原理和过程\"><a class=\"anchor\" href=\"#浏览器的渲染原理和过程\">#</a> 浏览器的渲染原理和过程</h3>\n<p>浏览器渲染的过程主要包括以下五步：</p>\n<ol>\n<li>浏览器将获取的 HTML 文档解析成 DOM 树；</li>\n<li>处理 CSS 标记，构成层叠样式表模型 CSSOM (CSS Object Model)；</li>\n<li>将 DOM 和 CSSOM 合并为渲染树 ( <code>rendering tree</code> )，代表一系列将被渲染的对象；</li>\n<li>渲染树的每个元素包含的内容都是计算过的，它被称之为布局 <code>layout</code> 。浏览器使用一种流式处理的方法，只需要一次绘制操作就可以布局所有的元素；</li>\n<li>将渲染树的各个节点绘制到屏幕上，这一步被称为绘制 <code>painting</code> 。</li>\n</ol>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220112195009.png\" alt=\"\" /></p>\n<p><strong>具体流程：</strong></p>\n<p>构建 DOM 树：</p>\n<p>​\t当浏览器接收到服务器响应来的 HTML 文档后，会遍历文档节点，生成 DOM 树。</p>\n<p>备注：</p>\n<blockquote>\n<ul>\n<li>DOM 树在构建的过程中可能会被 CSS 和 JS 的加载而执行阻塞</li>\n<li><code>display:none</code>  的元素也会在 DOM 树中</li>\n<li>注释也会在 DOM 树中</li>\n<li><code>script</code>  标签会在 DOM 树中</li>\n</ul>\n</blockquote>\n<p>构建 CSSOM 规则树:</p>\n<p>​\t浏览器解析 CSS 文件并生成 CSSOM，每个 CSS 文件都被分析成一个 StyleSheet 对象，每个对象都包含 CSS 规则。CSS 规则对象包含对应于 CSS 语法的选择器和声明对象以及其他对象。</p>\n<blockquote>\n<ul>\n<li>CSS 解析可以与 DOM 解析同时进行。</li>\n<li>CSS 解析与 <code>script</code>  的执行互斥 。</li>\n<li>在 Webkit 内核中进行了 <code>script</code>  执行优化，只有在 JS 访问 CSS 时才会发生互斥。</li>\n</ul>\n</blockquote>\n<p>构建渲染树（Render Tree）:</p>\n<p>​\t通过 DOM 树和 CSS 规则树，浏览器就可以通过它两构建渲染树了。浏览器会先从 DOM 树的根节点开始遍历每个可见节点，然后对每个可见节点找到适配的 CSS 样式规则并应用。</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220112195539.png\" alt=\"\" /></p>\n<p>备注：</p>\n<blockquote>\n<ul>\n<li>Render Tree 和 DOM Tree 不完全对应</li>\n<li><code>display: none</code>  的元素不在 Render Tree 中</li>\n<li><code>visibility: hidden</code>  的元素在 Render Tree 中</li>\n</ul>\n</blockquote>\n<p>渲染树布局 (layout of the render tree):</p>\n<p>​\t布局阶段会从渲染树的根节点开始遍历，由于渲染树的每个节点都是一个 Render Object 对象，包含宽高，位置，背景色等样式信息。所以浏览器就可以通过这些样式信息来确定每个节点对象在页面上的确切大小和位置，布局阶段的输出就是我们常说的盒子模型，它会精确地捕获每个元素在屏幕内的确切位置与大小。</p>\n<p>备注：</p>\n<blockquote>\n<ul>\n<li><code>float</code>  元素， <code>absoulte</code>  元素， <code>fixed</code>  元素会发生位置偏移。</li>\n<li>我们常说的脱离文档流，其实就是脱离 Render Tree。</li>\n</ul>\n</blockquote>\n<p>更多请见：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9lNjI1MmRjOWJlMzI=\">浏览器渲染原理与过程 - 简书 (jianshu.com)</span></p>\n<h3 id=\"cookie的设置以及在响应报文的位置\"><a class=\"anchor\" href=\"#cookie的设置以及在响应报文的位置\">#</a> Cookie 的设置以及在响应报文的位置</h3>\n<p>cookie 信息位于 headers 的 set-cookie 字段。有多少个 cookie 信息加入就有多少个 set-cookie 字段。客户端接收到 cookie 后就将 cookie 存储在本地固定位置。</p>\n<h3 id=\"线程与进程的联系与区别\"><a class=\"anchor\" href=\"#线程与进程的联系与区别\">#</a> 线程与进程的联系与区别？</h3>\n<ul>\n<li>进程：程序在执行过程中分配和管理资源的基本单位，是资源分配的最小单位，并拥有自己的独立地址空间；</li>\n<li>线程：线程是进程中执行运算的最小单位，是进程中的一个实体，是被系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，但它可与同属一个进程的其它线程共享进程所拥有的全部资源。一个线程可以创建和撤消另一个线程，同一进程中的多个线程之间可以并发执行；</li>\n<li>进程和线程的关系：\n<ul>\n<li>一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程。</li>\n<li>资源分配给进程，同一进程的所有线程共享该进程的所有资源。</li>\n<li>处理机分给线程，即真正在处理机上运行的是线程。</li>\n<li>线程在执行过程中，需要协作同步。不同进程的线程间要利用消息通信的办法实现同步。线程是指进程内的一个执行单元，也是进程内的可调度实体.</li>\n<li>线程作为调度和分配的基本单位，进程作为拥有资源的基本单位</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"什么是事务事务四大特性\"><a class=\"anchor\" href=\"#什么是事务事务四大特性\">#</a> 什么是事务？事务四大特性？</h3>\n<p>​\t事务是对数据库中一系列操作进行统一的回滚或者提交的操作，主要用来保证数据的完整性和一致性。</p>\n<ul>\n<li><strong>原子性（Atomicity）:</strong><br />\n 原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</li>\n<li><strong>一致性（Consistency）:</strong><br />\n 事务开始前和结束后，数据库的完整性约束没有被破坏。比如 A 向 B 转账，不可能 A 扣了钱，B 却没收到。</li>\n<li><strong>隔离性（Isolation）:</strong><br />\n 隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。同一时间，只允许一个事务请求同一数据，不同的事务之间彼此没有任何干扰。比如 A 正在从一张银行卡中取钱，在 A 取钱的过程结束前，B 不能向这张卡转账。</li>\n<li><strong>持久性（Durability）:</strong><br />\n 持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</li>\n</ul>\n<h3 id=\"事务的并发问题\"><a class=\"anchor\" href=\"#事务的并发问题\">#</a> 事务的并发问题？</h3>\n<h3 id=\"数据库语言\"><a class=\"anchor\" href=\"#数据库语言\">#</a> 数据库语言</h3>\n<p><strong>SQL 语言共分为四大类：</strong></p>\n<ul>\n<li>数据查询语言 DQL</li>\n<li>数据操纵语言 DML</li>\n<li>数据定义语言 DDL</li>\n<li>数据控制语言 DCL。</li>\n</ul>\n<p><strong>1. 数据查询语言 DQL</strong></p>\n<p>数据查询语言 DQL 基本结构是由 SELECT 子句，FROM 子句，WHERE 子句组成的查询块：</p>\n<p>SELECT<br />\nFROM<br />\nWHERE</p>\n<p><strong>2 . 数据操纵语言 DML</strong></p>\n<p>数据操纵语言 DML 主要有三种形式：</p>\n<ol>\n<li>插入：INSERT</li>\n<li>更新：UPDATE</li>\n<li>删除：DELETE</li>\n</ol>\n<p><strong>3. 数据定义语言 DDL</strong></p>\n<p>数据定义语言 DDL 用来创建数据库中的各种对象 ----- 表、视图、索引、同义词、聚簇等如：<br />\nCREATE TABLE/VIEW/INDEX/SYN/CLUSTER</p>\n<p>表 视图 索引 同义词 簇</p>\n<p>DDL 操作是隐性提交的！不能 rollback</p>\n<p><strong>4. 数据控制语言 DCL</strong></p>\n<p>数据控制语言 DCL 用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的时间及效果，对数据库实行监视等。如：</p>\n<ol>\n<li>GRANT：授权。</li>\n<li>ROLLBACK [WORK] TO [SAVEPOINT]：回退到某一点。回滚 ---ROLLBACK；回滚命令使数据库状态回到上次最后提交的状态。其格式为：<br />\nSQL&gt;ROLLBACK;</li>\n<li>COMMIT [WORK]：提交。</li>\n</ol>\n<h3 id=\"事务的隔离级别\"><a class=\"anchor\" href=\"#事务的隔离级别\">#</a> 事务的隔离级别</h3>\n<ol>\n<li>\n<p><strong>第一种隔离级别：Read uncommitted (读未提交)</strong><br />\n 如果一个事务已经开始写数据，则另外一个事务不允许同时进行写操作，但允许其他事务读此行数据。</p>\n<p><strong>解决了更新丢失，但还是可能会出现脏读</strong></p>\n</li>\n<li>\n<p><strong>第二种隔离级别：Read committed (读提交)</strong></p>\n<p>​\t如果是一个读事务 (线程)，则允许其他事务读写，如果是写事务将会禁止其他事务访问该行数据。</p>\n<p><strong>解决了更新丢失和脏读问题</strong></p>\n</li>\n<li>\n<p><strong>第三种隔离级别：Repeatable read (可重复读取)</strong></p>\n<p>​\t可重复读取是指在一个事务内，多次读同一个数据，在这个事务还没结束时，其他事务不能访问该数据 (包括了读写)，这样就可以在同一个事务内两次读到的数据是一样的，因此称为是可重复读隔离级别，读取数据的事务将会禁止写事务 (但允许读事务)，写事务则禁止任何其他事务 (包括了读写)。</p>\n<p><strong>解决了更新丢失、脏读、不可重复读、但是还会出现幻读</strong></p>\n</li>\n<li>\n<p><strong>第四种隔离级别：Serializable (可序化)</strong></p>\n<p>​\t提供严格的事务隔离，它要求事务序列化执行，事务只能一个接着一个地执行，但不能并发执行。</p>\n<p><strong>解决了更新丢失、脏读、不可重复读、幻读 (虚读)</strong></p>\n</li>\n</ol>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211228170325.png\" alt=\"\" /></p>\n<p><strong>事务的并发问题</strong></p>\n<p>**1、脏读：** 事务 A 读取了事务 B 更新的数据，然后 B 回滚操作，那么 A 读取到的数据是脏数据</p>\n<p>**2、不可重复读：** 事务 A 多次读取同一数据，事务 B 在事务 A 多次读取的过程中，对数据作了更新并提交，导致事务 A 多次读取同一数据时，结果因此本事务先后两次读到的数据结果会不一致。</p>\n<p>**3、幻读：** 幻读解决了不重复读，保证了同一个事务里，查询的结果都是事务开始时的状态（一致性）。</p>\n<p>例如：事务 T1 对一个表中所有的行的某个数据项做了从 “1” 修改为 “2” 的操作 这时事务 T2 又对这个表中插入了一行数据项，而这个数据项的数值还是为 “1” 并且提交给数据库。 而操作事务 T1 的用户如果再查看刚刚修改的数据，会发现还有跟没有修改一样，其实这行是从事务 T2 中添加的，就好像产生幻觉一样，这就是发生了幻读。</p>\n<h3 id=\"什么是死锁\"><a class=\"anchor\" href=\"#什么是死锁\">#</a> 什么是死锁？</h3>\n<p>​\t死锁是指两个或两个以上的进程在执行过程中，由于竞争资源或者由于彼此通信而造成的一种阻塞的现象，若无外力作用，它们都将无法推进下去。此时称系统处于死锁状态或系统产生了死锁，这些永远在互相等待的进程称为死锁进程。</p>\n<p>产生死锁的四个必要条件：</p>\n<ul>\n<li>互斥条件：一个资源每次只能被一个进程使用。</li>\n<li>请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。</li>\n<li>不剥夺条件：进程已获得的资源，在末使用完之前，不能强行剥夺。</li>\n<li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li>\n</ul>\n<h2 id=\"主观篇\"><a class=\"anchor\" href=\"#主观篇\">#</a> 主观篇</h2>\n<h3 id=\"你都做过什么项目呢具体聊某一个项目中运用的技术\"><a class=\"anchor\" href=\"#你都做过什么项目呢具体聊某一个项目中运用的技术\">#</a> 你都做过什么项目呢？具体聊某一个项目中运用的技术？</h3>\n<h3 id=\"你遇到过比较难的技术问题是你是如何解决的\"><a class=\"anchor\" href=\"#你遇到过比较难的技术问题是你是如何解决的\">#</a> 你遇到过比较难的技术问题是？你是如何解决的？</h3>\n<h3 id=\"常使用的库有哪些常用的前端开发工具开发过什么应用或组件\"><a class=\"anchor\" href=\"#常使用的库有哪些常用的前端开发工具开发过什么应用或组件\">#</a> 常使用的库有哪些？常用的前端开发工具？开发过什么应用或组件？</h3>\n<h3 id=\"除了前端以外还了解什么其它技术么你最最厉害的技能是什么\"><a class=\"anchor\" href=\"#除了前端以外还了解什么其它技术么你最最厉害的技能是什么\">#</a> 除了前端以外还了解什么其它技术么？你最最厉害的技能是什么？</h3>\n<h3 id=\"对前端开发工程师这个职位是怎么样理解的它的前景会怎么样\"><a class=\"anchor\" href=\"#对前端开发工程师这个职位是怎么样理解的它的前景会怎么样\">#</a> 对前端开发工程师这个职位是怎么样理解的？它的前景会怎么样？</h3>\n<p>前端是最贴近用户的程序员，前端的能力就是能让产品从 90 分进化到 100 分，甚至更好，</p>\n<h3 id=\"你的优点是什么缺点是什么\"><a class=\"anchor\" href=\"#你的优点是什么缺点是什么\">#</a> 你的优点是什么？缺点是什么？</h3>\n<h2 id=\"手写题\"><a class=\"anchor\" href=\"#手写题\">#</a> 手写题</h2>\n<h3 id=\"如何从url中获取参数\"><a class=\"anchor\" href=\"#如何从url中获取参数\">#</a> 如何从 Url 中获取参数？</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>url <span class=\"token operator\">=</span> <span class=\"token string\">'http://www.jianshu.com/search?q=js&amp;page=1&amp;type=note'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//split 拆分法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> n <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'没有参数'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> ary <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> arg <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ary<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> item<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        arg<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> arg</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 正则表达式法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">regUrl</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">url</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'?'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'没有参数'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">let</span> regArg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\w+=\\w+</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">let</span> aryValue <span class=\"token operator\">=</span> url<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>regArg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    aryValue <span class=\"token operator\">=</span> aryValue<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> aryValue<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        result<span class=\"token punctuation\">[</span>aryValue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> aryValue<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">regUrl</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"手写call-apply-bind\"><a class=\"anchor\" href=\"#手写call-apply-bind\">#</a> 手写 call、apply、bind</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> egg <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'sakura'</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//call</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">newCall</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> obj <span class=\"token operator\">||</span> window</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>p</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>person<span class=\"token punctuation\">.</span><span class=\"token function\">newCall</span><span class=\"token punctuation\">(</span>egg<span class=\"token punctuation\">,</span> <span class=\"token string\">'mu'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'zi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chuang'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ye'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">//apply</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">newApply</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj<span class=\"token punctuation\">,</span> ary</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> obj <span class=\"token operator\">||</span> window</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    obj<span class=\"token punctuation\">.</span>p <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">let</span> result</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ary<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        result <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> ary <span class=\"token operator\">!=</span> <span class=\"token string\">'Object'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>        result <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span>ary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        result <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">p</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>ary<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">delete</span> obj<span class=\"token punctuation\">.</span>p</pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>person<span class=\"token punctuation\">.</span><span class=\"token function\">newApply</span><span class=\"token punctuation\">(</span>egg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'mu'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'zi'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'chuang'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'ye'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre><span class=\"token comment\">//bind (待完成)</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// Function.prototype.newBind = function (obj) &#123; &#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token comment\">// person.newBind(egg, 'mu', 'zi', 'chuang', 'ye')</span></pre></td></tr></table></figure><h3 id=\"数组去重\"><a class=\"anchor\" href=\"#数组去重\">#</a> 数组去重</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> ary <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">15</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">23</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// SET(es6)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span>ary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//filter</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> ary<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> self</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//object</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>ary<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr3<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">let</span> item <span class=\"token operator\">=</span> arr3<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!==</span> <span class=\"token string\">'undefined'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        arr3<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr3<span class=\"token punctuation\">[</span>arr3<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        i<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        arr3<span class=\"token punctuation\">.</span>length<span class=\"token operator\">--</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        obj<span class=\"token punctuation\">[</span>item<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 正则</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">let</span> arr4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>ary<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>arr4<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>arr4 <span class=\"token operator\">=</span> arr4<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">','</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">let</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(\\d+,)\\1*</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> arr44 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>arr4<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">val<span class=\"token punctuation\">,</span> group</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    arr44<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>group<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr44<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"深拷贝与浅拷贝\"><a class=\"anchor\" href=\"#深拷贝与浅拷贝\">#</a> 深拷贝与浅拷贝</h3>\n<ul>\n<li>浅拷贝是拷贝一层，属性为对象时，浅拷贝是复制，两个对象指向同一个地址</li>\n<li>深拷贝是递归拷贝深层次，属性为对象时，深拷贝是新开栈，两个对象指向不同的地址</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 浅拷贝</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'浅拷贝'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    b<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    c<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> d<span class=\"token operator\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//way1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj1<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>obj1<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    obj2<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">//way2 (推荐)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">let</span> obj3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span>obj1 <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//way3</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">let</span> obj33 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> obj1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>obj1<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj33<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token comment\">//slice 与 concat 方法也可以浅拷贝字符串和数组</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 深拷贝</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'深拷贝'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token comment\">//way1 (不能复制方法)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">let</span> obj4 <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>obj2<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//way2</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">let</span> obj5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>    b<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>    c<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        c1<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>        c2<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token function-variable function\">d</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    e<span class=\"token operator\">:</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\d+$</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>    f<span class=\"token operator\">:</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"51\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"52\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj <span class=\"token operator\">!==</span> <span class=\"token string\">'object'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> obj</pre></td></tr><tr><td data-num=\"53\"></td><td><pre>    <span class=\"token comment\">// 不直接创建空对象的目的：克隆的结果和之前保持相同的所有类</span></pre></td></tr><tr><td data-num=\"54\"></td><td><pre>    <span class=\"token keyword\">let</span> newObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">obj<span class=\"token punctuation\">.</span>constructor</span></pre></td></tr><tr><td data-num=\"55\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"56\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"57\"></td><td><pre>            newObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"58\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"59\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"60\"></td><td><pre>    <span class=\"token keyword\">return</span> newObj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"61\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"62\"></td><td><pre><span class=\"token keyword\">let</span> obj6 <span class=\"token operator\">=</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>obj5<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"63\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj5<span class=\"token punctuation\">.</span>b <span class=\"token operator\">===</span> obj6<span class=\"token punctuation\">.</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"64\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj5<span class=\"token punctuation\">.</span>c <span class=\"token operator\">===</span> obj6<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"65\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj5<span class=\"token punctuation\">.</span>d <span class=\"token operator\">===</span> obj6<span class=\"token punctuation\">.</span>d<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"66\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj5<span class=\"token punctuation\">.</span>e <span class=\"token operator\">===</span> obj6<span class=\"token punctuation\">.</span>e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"67\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj5<span class=\"token punctuation\">.</span>f <span class=\"token operator\">===</span> obj6<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"防抖与节流\"><a class=\"anchor\" href=\"#防抖与节流\">#</a> 防抖与节流</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>html lang<span class=\"token operator\">=</span><span class=\"token string\">\"zh-CN\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"UTF-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta http<span class=\"token operator\">-</span>equiv<span class=\"token operator\">=</span><span class=\"token string\">\"X-UA-Compatible\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"IE=edge\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">&lt;</span>meta name<span class=\"token operator\">=</span><span class=\"token string\">\"viewport\"</span> content<span class=\"token operator\">=</span><span class=\"token string\">\"width=device-width, initial-scale=1.0\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token operator\">&lt;</span>title<span class=\"token operator\">></span>Document<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>title<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token operator\">&lt;</span>input type<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"剁手\"</span> id<span class=\"token operator\">=</span><span class=\"token string\">\"button\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">const</span> button <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">payMoney</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'已剁'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token comment\">// 防抖</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        <span class=\"token keyword\">let</span> timer</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>            <span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>            <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> arguments</pre></td></tr><tr><td data-num=\"26\"></td><td><pre>            <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>            timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>                <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>    <span class=\"token comment\">// 节流</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>        <span class=\"token keyword\">let</span> pre <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>            <span class=\"token keyword\">let</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>            <span class=\"token keyword\">let</span> args <span class=\"token operator\">=</span> arguments</pre></td></tr><tr><td data-num=\"39\"></td><td><pre>            <span class=\"token keyword\">let</span> now <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> pre <span class=\"token operator\">></span> delay<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>                <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>                pre <span class=\"token operator\">=</span> now</pre></td></tr><tr><td data-num=\"43\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token comment\">// button.addEventListener('click', debounce(payMoney, 1000))</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>    button<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span>payMoney<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre>    <span class=\"token comment\">// button.addEventListener('click', payMoney)</span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre></pre></td></tr><tr><td data-num=\"51\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><h3 id=\"函数柯里化\"><a class=\"anchor\" href=\"#函数柯里化\">#</a> 函数柯里化</h3>\n<p>​\t计算机科学中，柯里化（Currying）是把接受多个参数的函数变换成接受一个单一参数 (最初函数的第一个参数) 的函数，并且返回接受余下的参数且返回结果的新函数的技术。这个技术以逻辑学家 Haskell Curry 命名的。</p>\n<p>​\t柯里化的目的在于避免频繁调用具有相同参数函数的同时，又能够轻松的重用。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 函数柯里化例子</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">curryingAdd</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">z</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 调用</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">curryingAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 即</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> <span class=\"token function\">curryingAdd</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> fn1 <span class=\"token operator\">=</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">fn1</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 假设我们有一个求长方形面积的函数</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">width<span class=\"token punctuation\">,</span> height</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">return</span> width <span class=\"token operator\">*</span> height</pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 如果我们碰到的长方形的宽老是 10</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">const</span> area1 <span class=\"token operator\">=</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">const</span> area2 <span class=\"token operator\">=</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">const</span> area3 <span class=\"token operator\">=</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 我们可以使用闭包柯里化这个计算面积的函数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">width</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token parameter\">height</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">return</span> width <span class=\"token operator\">*</span> height</pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">const</span> getTenWidthArea <span class=\"token operator\">=</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 之后碰到宽度为 10 的长方形就可以这样计算面积</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">const</span> area1 <span class=\"token operator\">=</span> <span class=\"token function\">getTenWidthArea</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">// 而且如果遇到宽度偶尔变化也可以轻松复用</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">const</span> getTwentyWidthArea <span class=\"token operator\">=</span> <span class=\"token function\">getArea</span><span class=\"token punctuation\">(</span><span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": [
                "前端",
                "前端",
                "面试"
            ]
        },
        {
            "id": "https://nc3021.github.io/2021/12/23/front-end/Vue/",
            "url": "https://nc3021.github.io/2021/12/23/front-end/Vue/",
            "title": "Vue学习",
            "date_published": "2021-12-22T17:07:34.400Z",
            "content_html": "<h1 id=\"vue\"><a class=\"anchor\" href=\"#vue\">#</a> Vue</h1>\n<h2 id=\"认识vue\"><a class=\"anchor\" href=\"#认识vue\">#</a> 认识 Vue</h2>\n<h3 id=\"基本认识\"><a class=\"anchor\" href=\"#基本认识\">#</a> 基本认识</h3>\n<p>​\tVue 是一种渐进式 JavaScript 框架，用来动态构建用户界面。</p>\n<p>​\t<strong>开发者</strong><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211217175501.png\" alt=\"\" /></p>\n<h3 id=\"基本特点\"><a class=\"anchor\" href=\"#基本特点\">#</a> 基本特点</h3>\n<ul>\n<li>遵循 MVVM 模式</li>\n<li>编码简洁，体积小，运行效率高，适合 移动 / PC 端开发</li>\n<li>它本身只关注 UI，可以轻松引入 vue 插件或其它第三方库开发项目</li>\n<li>采用组件化模式，提高代码复用率、且让代码更好维护</li>\n<li>声明式编码，让编码人员无需直接操作 DOM，提高开发效率</li>\n<li>使用虚拟 DOM 和 Diff 算法，尽量复用 DOM 节点</li>\n</ul>\n<p><strong>与其它前端 JS 框架的关联：</strong></p>\n<ul>\n<li>借鉴 angular 的 <strong>模板</strong> 和 <strong>数据绑定</strong> 技术</li>\n<li>借鉴 react 的 <strong>组件化</strong> 和 <strong>虚拟 DOM</strong> 技术</li>\n</ul>\n<h3 id=\"vue的使用\"><a class=\"anchor\" href=\"#vue的使用\">#</a> Vue 的使用</h3>\n<h4 id=\"引入vuejs\"><a class=\"anchor\" href=\"#引入vuejs\">#</a> 引入 Vue.js</h4>\n<ol>\n<li>\n<p>本地引入</p>\n<pre><code class=\"language-vue\">&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;\n</code></pre>\n</li>\n<li>\n<p>CDN 引入</p>\n</li>\n</ol>\n<h4 id=\"创建vue对象\"><a class=\"anchor\" href=\"#创建vue对象\">#</a> 创建 Vue 对象</h4>\n<ul>\n<li>想让 Vue 工作，就必须创建一个 Vue 实例，且要传入一个配置对象；</li>\n<li>root 容器里的代码依然符合 html 规范，只不过混入了一些特殊的 Vue 语法；</li>\n<li>root 容器里的代码被称为【Vue 模板】；</li>\n<li>Vue 实例和容器是一一对应的；</li>\n<li>真实开发中只有一个 Vue 实例，并且会配合着组件一起使用；</li>\n<li>\n中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性；\n</li>\n<li>一旦 data 中的数据发生改变，那么页面中用到该数据的地方也会自动更新；</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    el<span class=\"token operator\">:</span> <span class=\"token string\">'#root'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        name<span class=\"token operator\">:</span> <span class=\"token string\">'Sakura'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        address<span class=\"token operator\">:</span><span class=\"token string\">'chengdu'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>​\t由 Vue 管理的函数，一定不要写箭头函数，一旦写了箭头函数，this 就不再是 Vue 实例了。</p>\n<h4 id=\"el与data\"><a class=\"anchor\" href=\"#el与data\">#</a> el 与 data</h4>\n<p><code>el</code> ：用于指定当前 Vue 实例为哪个容器服务，值通常为 CSS 选择器字符串；</p>\n<p><code>data</code> ：用于存储数据，数据供 el 所指定的容器去使用；</p>\n<p><strong>el 的两种写法</strong></p>\n<ol>\n<li>\n<p>new Vue 的时候配置 el 属性</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tel<span class=\"token operator\">:</span><span class=\"token string\">'#root'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tdata<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'Sakura'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>先创建 Vue 实例，再通过 v.$mount (xxx) 指定 el 的值</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> v <span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tdata<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'Sakura'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>v<span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<p><strong>data 的两种写法</strong></p>\n<ol>\n<li>\n<p>对象式</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>data<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tname<span class=\"token operator\">:</span><span class=\"token string\">'sakura'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>函数式</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@@@'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'sakura'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"mvvm模型\"><a class=\"anchor\" href=\"#mvvm模型\">#</a> MVVM 模型</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211217220326.png\" alt=\"\" /></p>\n<p><strong>M</strong></p>\n<p>模型 (Model) ：data 中的数据</p>\n<p><strong>V</strong></p>\n<p>视图 (View) ：模板代码（不是静态页面） （两个语法：指令，大括号表达式）</p>\n<p><strong>VM</strong></p>\n<p>viewModel: 视图模型（Vue 的实例）</p>\n<ul>\n<li>Dom Listeners （Dom 监听）</li>\n<li>Data Bindings （数据绑定）</li>\n</ul>\n<p><strong>MVVM</strong><br />\nMVVM 本质上是 MVC （Model-View- Controller）的改进版。即模型 - 视图 - 视图模型。</p>\n<p>​\t模型 model 指的是后端传递的数据，视图 view 指的是所看到的页面。</p>\n<p>​\t视图模型 viewModel 是 mvvm 模式的核心，它是连接 view 和 model 的桥梁。它有两个方向：</p>\n<p>​\t将模型转化成视图，即将后端传递的数据转化成所看到的页面。实现的方式是：数据绑定<br />\n​\t将视图转化成模型，即将所看到的页面转化成后端的数据。实现的方式是：DOM 事件监听</p>\n<p>​\t这两个方向都实现的，我们称之为数据的双向绑定</p>\n<h2 id=\"模板语法\"><a class=\"anchor\" href=\"#模板语法\">#</a> 模板语法</h2>\n<h3 id=\"插值语法\"><a class=\"anchor\" href=\"#插值语法\">#</a> 插值语法</h3>\n<ol>\n<li>语法： <code>&#123;&#123;XXX&#125;&#125;</code>   xxx 是 js 表达式，可以直接读取到 data 中的所有属性；</li>\n<li>功能：用于解析标签体内容，向页面输出数据</li>\n</ol>\n<h3 id=\"指令语法\"><a class=\"anchor\" href=\"#指令语法\">#</a> 指令语法</h3>\n<h4 id=\"v-bind\"><a class=\"anchor\" href=\"#v-bind\">#</a> v-bind</h4>\n<p>功能：强制数据绑定（单向绑定）</p>\n<p>语法：</p>\n<pre><code class=\"language-vue\">v-bind:xxx='yyy'   //yyy会作为表达式解析执行\n:xxx='yyy'        //简写\n</code></pre>\n<p>特点：数据只能从 data 流向页面</p>\n<h4 id=\"v-model\"><a class=\"anchor\" href=\"#v-model\">#</a> v-model</h4>\n<p>功能：强制数据绑定（双向绑定）</p>\n<p>语法：</p>\n<pre><code class=\"language-vue\">v-model:value='xxx'    \nv-model='xxx'        //简写\n</code></pre>\n<p>特点：</p>\n<ol>\n<li>数据不仅能从 data 流向页面，还能从页面流向 data</li>\n<li>只能用于表单类元素（输入类元素）</li>\n</ol>\n<h4 id=\"v-on\"><a class=\"anchor\" href=\"#v-on\">#</a> v-on</h4>\n<p>功能：绑定指定事件名的回调函数</p>\n<p>语法：</p>\n<pre><code class=\"language-vue\">v-on:click='xxx'\nv-on:click='xxx($event，参数)'  //获得参数与点击事件\n@keyup='xxx'          //按钮抬起时触发\n@keydown='xxx'        //按钮敲下时触发\n@click='xxx'          //简写\n</code></pre>\n<h4 id=\"v-show\"><a class=\"anchor\" href=\"#v-show\">#</a> v-show</h4>\n<p>功能：条件渲染；</p>\n<p>语法：</p>\n<pre><code class=\"language-vue\">&lt;div v-show='xxx'&gt;&lt;/div&gt;   \n//xxx表达式的值为ture或false\n</code></pre>\n<p>适用于：切换频率较高的场景；</p>\n<p>特点：不展示的 DOM 元素未被移除，只是被隐藏掉</p>\n<h4 id=\"v-if\"><a class=\"anchor\" href=\"#v-if\">#</a> v-if</h4>\n<p>功能：条件渲染；</p>\n<p>语法：</p>\n<pre><code class=\"language-vue\">&lt;div v-if='xxx'&gt;&lt;/div&gt;\n&lt;div v-else-if='xxx'&gt;&lt;/div&gt;\n&lt;div v-else&gt;&lt;/div&gt;\n//xxx表达式的值为true或false\n&lt;template v-if='xxx'&gt;\n\t&lt;h2&gt;&lt;/h2&gt;\n\t&lt;h2&gt;&lt;/h2&gt;\n\t&lt;h2&gt;&lt;/h2&gt;\n&lt;/template&gt;//不影响结构的使用方法\n</code></pre>\n<p>适用于：切换频率较低的场景</p>\n<p>特点：不展示的 DOM 元素直接被移除</p>\n<p>注意：v-if 可以和 v-else-if、v-else 一起使用，但要求结构不能被 “打断”；</p>\n<h4 id=\"v-for\"><a class=\"anchor\" href=\"#v-for\">#</a> v-for</h4>\n<p>功能：用于展示列表数据，可遍历数组、对象、字符串、指定次数</p>\n<p>语法：</p>\n<pre><code class=\"language-vue\">v-for='(item.index) in xxx' :key='yyy'\n//xxx为数组或对象\nv-for='(item.index) of xxx' :key='yyy'\n//xxx为字符串或数字（用的比较少）\n//in与of的使用没有区别\n</code></pre>\n<ul>\n<li>数组: (item, index)</li>\n<li>对象: (value, key)</li>\n<li>字符串：(char, index)</li>\n<li>数字：(number, index)</li>\n</ul>\n<h5 id=\"key的原理\"><a class=\"anchor\" href=\"#key的原理\">#</a> key 的原理</h5>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211222204421.png\" alt=\"\" /></p>\n<p>虚拟 DOM 中 key 的作用：</p>\n<p>key 是虚拟 DOM 对象的标识，当数据发生变化时，Vue 会根据【新数据】生成【新的虚拟 DOM】, 随后 Vue 进行【新虚拟 DOM】与【旧虚拟 DOM】的差异比较，比较规则如下：</p>\n<p>对比规则：</p>\n<ol>\n<li>旧虚拟 DOM 中找到了与新虚拟 DOM 相同的 key：<br />\n①若虚拟 DOM 中内容没变，直接使用之前的真实 DOM；<br />\n②若虚拟 DOM 中内容变了，则生成新的真实 DOM，随后替换掉页面中之前的真实 DOM；</li>\n<li>旧虚拟 DOM 中未找到与新虚拟 DOM 相同的 key 创建新的真实 DOM，随后渲染到到页面。</li>\n</ol>\n<p>用 index 作为 key 可能会引发的问题：</p>\n<ol>\n<li>若对数据进行：逆序添加、逆序删除等破坏顺序操作：会产生没有必要的真实 DOM 更新 ==&gt; 界面效果没问题，但效率低；</li>\n<li>如果结构中还包含输入类的 DOM： 会产生错误 DOM 更新 ==&gt; 界面有问题</li>\n</ol>\n<p>开发中如何选择 key:</p>\n<ol>\n<li>最好使用每条数据的唯一标识作为 key, 比如 id、手机号、身份证号、学号等唯一值。</li>\n<li>如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，使用 index 作为 key 是没有问题的。</li>\n</ol>\n<h4 id=\"v-text\"><a class=\"anchor\" href=\"#v-text\">#</a> v-text</h4>\n<ol>\n<li>作用：向其所在的节点中渲染文本内容。</li>\n<li>与插值语法的区别： <code>v-text</code>  会替换掉节点中的内容， <code>&#123;&#123;xx&#125;&#125;</code>  则不会。</li>\n</ol>\n<h4 id=\"v-html\"><a class=\"anchor\" href=\"#v-html\">#</a> v-html</h4>\n<ol>\n<li>作用：向指定节点中渲染包含 html 结构的内容。</li>\n<li>与插值语法的区别：\n<ul>\n<li>v-html 会替换掉节点中所有的内容，则不会</li>\n<li>v-html 可以识别 html 结构。</li>\n</ul>\n</li>\n<li>严重注意：v-html 有安全性问题！！！！\n<ul>\n<li>在网站上动态渲染任意 HTML 是非常危险的，容易导致 XSS 攻击。</li>\n<li>一定要在可信的内容上使用 v-html，永不要用在用户提交的内容上！</li>\n</ul>\n</li>\n</ol>\n<h4 id=\"v-clock\"><a class=\"anchor\" href=\"#v-clock\">#</a> v-clock</h4>\n<ol>\n<li>本质是一个特殊属性（没有值），Vue 实例创建完毕并接管容器后会删掉 c-clock 属性；</li>\n<li>使用 CSS（即通过属性选择器 <code>[v-cloak] &#123; display: none &#125;</code> ）配合 v-clock 可以解决网速慢时页面展示出的问题。</li>\n</ol>\n<h4 id=\"v-once\"><a class=\"anchor\" href=\"#v-once\">#</a> v-once</h4>\n<ol>\n<li>v-once 所在节点在初次动态渲染后，就视为静态内容了。</li>\n<li>以后数据的改变不会引起 v-once 所在结构的更新，可以用于优化性能。</li>\n</ol>\n<h4 id=\"v-pre\"><a class=\"anchor\" href=\"#v-pre\">#</a> v-pre</h4>\n<ol>\n<li>跳过其所在节点的编译过程。</li>\n<li>可利用它跳过：没有使用指令语法、没有使用插值语法的节点，会加快编译。</li>\n</ol>\n<h3 id=\"自定义指令\"><a class=\"anchor\" href=\"#自定义指令\">#</a> 自定义指令</h3>\n<p>语法：</p>\n<p><strong>局部指令</strong></p>\n<pre><code class=\"language-vue\">//对象式\nnew Vue(&#123;\n\tdirextives:&#123;\n\t\t指令名:&#123;\n\t\t\t配置对象1()&#123;xxx&#125;,\n\t\t\t配置对象2()&#123;xxx&#125;,\n\t\t\t\t&#125;&#125;\n\t\t&#125;)\n//函数式\nnew Vue(&#123;\n\tdirectives()&#123;&#125;\n&#125;)\n</code></pre>\n<p><strong>全局指令</strong></p>\n<pre><code class=\"language-vue\">//对象式\nVue.dirctive(指令名，&#123;\n\t配置对象1()&#123;&#125;,\n\t配置对象2()&#123;&#125;,\n&#125;)\n//函数式\nVue.directive(指令名,回调函数)\n</code></pre>\n<p><strong>配置对象中的三个常用回调：</strong></p>\n<ul>\n<li><code>.bind</code> ：指令与元素成功绑定时调用；</li>\n<li><code>.inserted</code> ：指令所在元素被插入页面时调用；</li>\n<li><code>update</code> ：指令所在模板结构被重新解析时调用。</li>\n</ul>\n<p><strong>注意事项：</strong></p>\n<ol>\n<li>指令定义时不加 <code>v-</code> ，但使用时要加 <code>v-</code> ;</li>\n<li>指令名如果是多个单词时，要使用 xxx-yyy 的命名方式。</li>\n</ol>\n<p>代码实例：</p>\n<pre><code class=\"language-vue\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=&quot;UTF-8&quot; /&gt;\n\t\t&lt;title&gt;自定义指令&lt;/title&gt;\n\t\t&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;!-- 准备好一个容器--&gt;\n\t\t&lt;div id=&quot;root&quot;&gt;\n\t\t\t&lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;\n\t\t\t&lt;h2&gt;当前的n值是：&lt;span v-text=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt;\n\t\t\t&lt;!-- &lt;h2&gt;放大10倍后的n值是：&lt;span v-big-number=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt; --&gt;\n\t\t\t&lt;h2&gt;放大10倍后的n值是：&lt;span v-big=&quot;n&quot;&gt;&lt;/span&gt; &lt;/h2&gt;\n\t\t\t&lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;\n\t\t\t&lt;hr/&gt;\n\t\t\t&lt;input type=&quot;text&quot; v-fbind:value=&quot;n&quot;&gt;\n\t\t&lt;/div&gt;\n\t&lt;/body&gt;\n\t\n\t&lt;script type=&quot;text/javascript&quot;&gt;\n\t\tVue.config.productionTip = false\n\n\t\t//定义全局指令\n\t\t/* Vue.directive('fbind',&#123;\n\t\t\t//指令与元素成功绑定时（一上来）\n\t\t\tbind(element,binding)&#123;\n\t\t\t\telement.value = binding.value\n\t\t\t&#125;,\n\t\t\t//指令所在元素被插入页面时\n\t\t\tinserted(element,binding)&#123;\n\t\t\t\telement.focus()\n\t\t\t&#125;,\n\t\t\t//指令所在的模板被重新解析时\n\t\t\tupdate(element,binding)&#123;\n\t\t\t\telement.value = binding.value\n\t\t\t&#125;\n\t\t&#125;) */\n\n\t\tnew Vue(&#123;\n\t\t\tel:'#root',\n\t\t\tdata:&#123;\n\t\t\t\tname:'Sakura',\n\t\t\t\tn:1\n\t\t\t&#125;,\n\t\t\tdirectives:&#123;\n\t\t\t\t//big函数何时会被调用？1.指令与元素成功绑定时（一上来）。2.指令所在的模板被重新解析时。\n\t\t\t\t/* 'big-number'(element,binding)&#123;\n\t\t\t\t\t// console.log('big')\n\t\t\t\t\telement.innerText = binding.value * 10\n\t\t\t\t&#125;, */\n\t\t\t\tbig(element,binding)&#123;\n\t\t\t\t\tconsole.log('big',this) //注意此处的this是window\n\t\t\t\t\t// console.log('big')\n\t\t\t\t\telement.innerText = binding.value * 10\n\t\t\t\t&#125;,\n\t\t\t\tfbind:&#123;\n\t\t\t\t\t//指令与元素成功绑定时（一上来）\n\t\t\t\t\tbind(element,binding)&#123;\n\t\t\t\t\t\telement.value = binding.value\n\t\t\t\t\t&#125;,\n\t\t\t\t\t//指令所在元素被插入页面时\n\t\t\t\t\tinserted(element,binding)&#123;\n\t\t\t\t\t\telement.focus()\n\t\t\t\t\t&#125;,\n\t\t\t\t\t//指令所在的模板被重新解析时\n\t\t\t\t\tupdate(element,binding)&#123;\n\t\t\t\t\t\telement.value = binding.value\n\t\t\t\t\t&#125;\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t&#125;)\n\t\t\n\t&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"事件处理\"><a class=\"anchor\" href=\"#事件处理\">#</a> 事件处理</h2>\n<h3 id=\"绑定监听\"><a class=\"anchor\" href=\"#绑定监听\">#</a> 绑定监听</h3>\n<ol>\n<li>\n<p>使用 v-on:xxx 或 @xxx 绑定事件 xxx；</p>\n</li>\n<li>\n<p>事件的回调方法配置在 Vue 的 methods 对象中，最终会在 vm 上（methods 中配置的方法不能用箭头函数，否则 this 指向 windows）；</p>\n</li>\n<li>\n<p>事件对象</p>\n<ul>\n<li>\n<p>默认事件形参： <code>event</code></p>\n</li>\n<li>\n<p>隐含属性对象： <code>$event</code></p>\n<p><code>$event</code>  就是当前触发事件的元素，即使不传  <code>$event</code> ，在回调函数中也可以使用  <code>event</code>  这个参数。</p>\n</li>\n</ul>\n<p>event 方法：</p>\n<p>event.target.value：获得当前元素的值</p>\n<p>event.key：获得按键的名</p>\n<p>event.keyCode：获得按键的编码</p>\n</li>\n</ol>\n<h3 id=\"事件修饰符\"><a class=\"anchor\" href=\"#事件修饰符\">#</a> 事件修饰符</h3>\n<p>语法：</p>\n<ol>\n<li>\n<p>在 methods 上：<img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211222133416.png\" alt=\"\" /></p>\n</li>\n<li>\n<pre><code>@click.xxx='yyy'\n@click.xx1.xx2='yyy'     //可以同时使用多个修饰符，按左右顺序执行\n</code></pre>\n</li>\n<li>\n<p><strong>prevent</strong>: 阻止默认事件</p>\n</li>\n<li>\n<p><strong>stop</strong>: 阻止事件冒泡</p>\n</li>\n<li>\n<p><strong>once</strong>：事件只触发一次</p>\n</li>\n<li>\n<p><strong>capture</strong>：使用事件的捕获模式</p>\n</li>\n<li>\n<p><strong>self</strong>：只有 event.target 是当前操作的元素才触发事件；</p>\n</li>\n<li>\n<p><strong>passive</strong>：事件的默认行为立即执行，无需等待事件回调执行完毕；</p>\n</li>\n</ol>\n<h3 id=\"键盘修饰符\"><a class=\"anchor\" href=\"#键盘修饰符\">#</a> 键盘修饰符</h3>\n<p>语法：</p>\n<pre><code>@keyup.xxx='yyy'        //xxx为键盘修饰符\n@keydown.xx1.xx2='yyy'     //可以同时使用多个修饰符，常用于系统修饰键\n</code></pre>\n<p><strong>Vue 提供的按键别名</strong></p>\n<ol>\n<li><strong>回车</strong>：enter</li>\n<li><strong>删除</strong>：delete</li>\n<li><strong>退出</strong>：esc</li>\n<li><strong>空格</strong>：space</li>\n<li><strong>换行</strong>：tab（特殊，必须配合 keydown 去使用）</li>\n<li><strong>上</strong>：up</li>\n<li><strong>下</strong>：down</li>\n<li><strong>左</strong>：left</li>\n<li><strong>右</strong>：right</li>\n</ol>\n<p><strong>Vue 未提供的按键别名</strong></p>\n<p>可以通过 event.key 获得按键的名（若名称为两个单词则转换为小写短横线命名）</p>\n<p><strong>系统修饰键（ctrl、alt、shift、meta）</strong></p>\n<ol>\n<li>使用 keyup：按下修饰键的同时，再按下其他键，随后释放其他键，事件才被触发；</li>\n<li>使用 keydown：正常触发事件</li>\n</ol>\n<h2 id=\"计算属性与监听属性\"><a class=\"anchor\" href=\"#计算属性与监听属性\">#</a> 计算属性与监听属性</h2>\n<p><strong>computed 和 watch 之间的区别：</strong></p>\n<ol>\n<li>computed 能完成的功能，watch 都可以完成；</li>\n<li>watch 能完成的功能，computed 不一定能完成，例如：watch 可以进行异步操作。</li>\n</ol>\n<p>两个重要的小原则：</p>\n<ol>\n<li>所被 Vue 管理的函数，最好写成普通函数，这样 this 的指向才是 vm 或组件实例对象；</li>\n<li>所有不被 Vue 所管理的函数（定时器的回调函数、ajax 的回调函数等、Promise 的回调函数），最好写成箭头函数，这样 this 的指向才是 vm 或组件实例对象。</li>\n</ol>\n<h3 id=\"计算属性computed\"><a class=\"anchor\" href=\"#计算属性computed\">#</a> 计算属性 computed</h3>\n<ul>\n<li>方法：在 computed 属性对象中定义计算属性的方法；</li>\n<li>使用：在页面中使用来显示计算结果；</li>\n<li>定义：通过已有属性计算得到所需要的属性；</li>\n<li>原理：底层借助了 <code>Objcet.defineproperty</code>  方法提供的 <code>getter</code>  和 <code>setter</code> ；</li>\n<li>优势：与 methods 实现相比，内部有缓存机制（复用），效率更高，调试方便；</li>\n<li>计算属性最终会出现在 vm 上，直接读取即可</li>\n</ul>\n<p>**get ()** 的执行：</p>\n<p>初次读取时会执行一次，当依赖的数据（已定义的属性）发生改变时会再次被调用；</p>\n<p>**set ()** 的执行：</p>\n<p>计算属性被修改时被调用，用于引起计算时所依赖的数据发生改变；</p>\n<p>代码实例：</p>\n<pre><code class=\"language-vue\">&lt;body&gt;\n    &lt;div id=&quot;root&quot;&gt;\n        姓:&lt;input type=&quot;text&quot; v-model=&quot;firstname&quot;&gt;&lt;br&gt;\n        名:&lt;input type=&quot;text&quot; v-model='lastname'&gt;&lt;br&gt;\n        姓名：&lt;span&gt;&#123;&#123;fullname&#125;&#125;&lt;/span&gt;\n    &lt;/div&gt;\n\n&lt;/body&gt;\n&lt;script&gt;\n    const vm = new Vue(&#123;\n        el: '#root',\n        data: &#123;\n            firstname: '张',\n            lastname: '三',\n        &#125;,\n        //完整写法\n        computed: &#123;\n            fullname: &#123;\n                get() &#123;\n                    return this.firstname.slice(0, 2) + '-' + this.lastname\n                &#125;,\n                set(value) &#123;\n                    console.log('set', value)\n                    const arr = value.split('-')\n                    this.firstname = arr[0]\n                    this.lastname = arr[1]\n                &#125;\n            &#125;\n        &#125;,\n    &#125;)\n&lt;/script&gt;\n//简写(省略set)\nfullName()&#123;\n\tconsole.log('get被调用了')\n\treturn this.firstName + '-' + this.lastName\n&#125;\n</code></pre>\n<h3 id=\"监视属性watch\"><a class=\"anchor\" href=\"#监视属性watch\">#</a> 监视属性 watch</h3>\n<ul>\n<li>使用方法：通过 vm 对象的 <code>$watch()</code>  或 <code>watch</code>  属性配置来监视指定的属性；</li>\n<li>功能：当被监视的属性变化时，回调函数自动调用，进行相关操作；</li>\n</ul>\n<p><strong>深度监视</strong></p>\n<ul>\n<li>Vue 中的 watch 默认不监测对象内部值的改变（一层）。</li>\n<li>配置 deep:true 可以监测对象内部值改变（多层）。</li>\n<li>备注：</li>\n<li>(1). Vue 自身可以监测对象内部值的改变，但 Vue 提供的 watch 默认不可以！</li>\n<li>(2). 使用 watch 时根据数据的具体结构，决定是否采用深度监视。</li>\n</ul>\n<p>代码实例：</p>\n<pre><code class=\"language-vue\">//watch属性配置\nwatch:&#123;\n\tisHot:&#123;\n\t\timmediate:true, //初始化时让handler调用一下\n\t\thandler(newValue,oldValue)&#123;\n\t\t\tconsole.log('isHot被修改了',newValue,oldValue)\n\t\t&#125;，\n  \t\n\t&#125;\n&#125;\n//$watch()方法配置\nvm.$watch('isHot',&#123;\n\timmediate:true, //初始化时让handler调用一下\n\thandler(newValue,oldValue)&#123;\n\t\tconsole.log('isHot被修了',newValue,oldValue)\n\t&#125;\n&#125;)\n//深度监视\nnumbers:&#123;\n\tdeep:true,\n\thandler()&#123;\n\t\tconsole.log('numbers改变了')\n\t&#125;\n&#125;\n</code></pre>\n<p><strong>watch 属性的简写</strong></p>\n<p>当 watch 属性的配置项只有 handler 的时候</p>\n<pre><code class=\"language-vue\">//正常写法\n//第一种\nisHot:&#123;\n\t// immediate:true, //初始化时让handler调用一下\n\t// deep:true,//深度监视\n\thandler(newValue,oldValue)&#123;\n\t\tconsole.log('isHot被修改了',newValue,oldValue)\n\t&#125;\n&#125;\n//第二种\nvm.$watch('isHot',&#123;\n\timmediate:true, //初始化时让handler调用一下\n\thandler(newValue,oldValue)&#123;\n\t\tconsole.log('isHot被修了',newValue,oldValue)\n\t&#125;\n&#125;)\n\n//简写\n//第一种\nisHot(newValue,oldValue)&#123;\n\tconsole.log('isHot被修改了',newValue,oldValue,this)\n&#125; \n//第二种\nvm.$watch('isHot'，function(newValue,oldValue)&#123;\n\tconsole.log('isHot被修了',newValue,oldValue)\n&#125;)\n</code></pre>\n<h3 id=\"列表过滤与排序\"><a class=\"anchor\" href=\"#列表过滤与排序\">#</a> 列表过滤与排序</h3>\n<p>一般采用计算属性更为简单方便</p>\n<p>代码实例：</p>\n<pre><code class=\"language-vue\">//关键字搜索列表\n&lt;body&gt;\n    &lt;div id=&quot;root&quot;&gt;\n        &lt;h2&gt;人员列表&lt;/h2&gt;\n        &lt;input type=&quot;text&quot; v-model='keyWord' placeholder=&quot;请输入名字&quot;&gt;\n        &lt;ul&gt;\n            &lt;li v-for=&quot;(p,index) of filperson1&quot; :key='id'&gt;\n                &#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;--&#123;&#123;p.sex&#125;&#125;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;script&gt;\n    const vm = new Vue(&#123;\n        el: '#root',\n        data: &#123;\n            keyWord: '',\n            persons: [\n                &#123; id: '001', name: '马冬梅', age: 18, sex: '女' &#125;,\n                &#123; id: '002', name: '周冬雨', age: 19, sex: '女' &#125;,\n                &#123; id: '003', name: '周杰伦', age: 20, sex: '男' &#125;,\n                &#123; id: '004', name: '温兆伦', age: 20, sex: '男' &#125;,\n            ],\n        &#125;,\n        computed: &#123;\n            filperson1() &#123;\n                return this.persons.filter((p) =&gt; &#123;\n                    return p.name.indexOf(this.keyWord) !== -1\n                &#125;)\n            &#125;\n        &#125;\n    &#125;)\n&lt;/script&gt;\n\n//列表过滤与排序\n&lt;body&gt;\n    &lt;div id=&quot;root&quot;&gt;\n        &lt;h2&gt;人员列表&lt;/h2&gt;\n        &lt;input type=&quot;text&quot; v-model='keyWord' placeholder=&quot;请输入名字&quot;&gt;\n        &lt;button @click='softType=2'&gt;年龄升序&lt;/button&gt;\n        &lt;button @click='softType=1'&gt;年龄降序&lt;/button&gt;\n        &lt;button @click='softType=0'&gt;原顺序&lt;/button&gt;\n        &lt;ul&gt;\n            &lt;li v-for=&quot;(p,index) of filperson1&quot; :key='id'&gt;\n                &#123;&#123;p.name&#125;&#125;--&#123;&#123;p.age&#125;&#125;--&#123;&#123;p.sex&#125;&#125;\n            &lt;/li&gt;\n        &lt;/ul&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;script&gt;\n    const vm = new Vue(&#123;\n        el: '#root',\n        data: &#123;\n            keyWord: '',\n            softType: 0,\n            persons: [\n                &#123; id: '001', name: '马冬梅', age: 30, sex: '女' &#125;,\n                &#123; id: '002', name: '周冬雨', age: 19, sex: '女' &#125;,\n                &#123; id: '003', name: '周杰伦', age: 20, sex: '男' &#125;,\n                &#123; id: '004', name: '温兆伦', age: 15, sex: '男' &#125;,\n            ],\n        &#125;,\n        computed: &#123;\n            filperson1() &#123;\n                const arr = this.persons.filter((p) =&gt; &#123;\n                    return p.name.indexOf(this.keyWord) !== -1\n                &#125;)\n                if (this.softType) &#123;\n                    arr.sort((p1, p2) =&gt; &#123;\n                        return this.softType === 1 ? p2.age - p1.age : p1.age - p2.age\n                    &#125;)\n                &#125;\n                return arr\n            &#125;,\n\n        &#125;\n    &#125;)\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"vue监视数据的原理\"><a class=\"anchor\" href=\"#vue监视数据的原理\">#</a> Vue 监视数据的原理</h3>\n<ul>\n<li>\n<p>Vue 会监视 data 中所有层次的数据；</p>\n</li>\n<li>\n<p>如何检测对象中的数据？</p>\n<p>通过 setter 实现监视，且要做 new Vue 时就传入要检测的数据。</p>\n<ol>\n<li>\n<p>对象中后追加的属性，Vue 默认不做响应式处理；</p>\n</li>\n<li>\n<p>如需给后添加的属性做响应式，请使用如下 API：</p>\n<p>Vue.set (target,propertyName/index,value) 或</p>\n<p>vm.$set(target,propertyName/index,value)</p>\n</li>\n</ol>\n</li>\n<li>\n<p>如何检测数组中的数据？</p>\n<p>通过包裹数组更新元素的方法实现，本质就是做了两件事：</p>\n<ol>\n<li>调用原生对应的方法对数组进行了更新；</li>\n<li>重新解析模板，进而更新页面</li>\n</ol>\n</li>\n<li>\n<p>在 Vue 修改数组中的某个元素时一定要用如下方法：</p>\n<ol>\n<li>\n<p>改变原数组：</p>\n<p>push()  pop()  shift()  unshift()  splice()  sort()  reverse()  Vue.set()  vm.$set()</p>\n<p>(使用 Vue.set () 与 vm.$set () 时不能给 vm 或 vm 的跟数据对象添加属性)</p>\n</li>\n<li>\n<p>替换数组：</p>\n<p>filter()  concat()  slice()</p>\n<p>(它们不会变更原数组，而总是返回一个新数组，当使用非变更方法时，可以使用新数组替换旧数组)</p>\n</li>\n</ol>\n</li>\n</ul>\n<p>代码实例：</p>\n<pre><code class=\"language-vue\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\t&lt;head&gt;\n\t\t&lt;meta charset=&quot;UTF-8&quot; /&gt;\n\t\t&lt;title&gt;总结数据监视&lt;/title&gt;\n\t\t&lt;style&gt;\n\t\t\tbutton&#123;\n\t\t\t\tmargin-top: 10px;\n\t\t\t&#125;\n\t\t&lt;/style&gt;\n\t\t&lt;!-- 引入Vue --&gt;\n\t\t&lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;\n\t&lt;/head&gt;\n\t&lt;body&gt;\n\t\t&lt;!--\n \n\t\t--&gt;\n\t\t&lt;!-- 准备好一个容器--&gt;\n\t\t&lt;div id=&quot;root&quot;&gt;\n\t\t\t&lt;h1&gt;学生信息&lt;/h1&gt;\n\t\t\t&lt;button @click=&quot;student.age++&quot;&gt;年龄+1岁&lt;/button&gt; &lt;br/&gt;\n\t\t\t&lt;button @click=&quot;addSex&quot;&gt;添加性别属性，默认值：男&lt;/button&gt; &lt;br/&gt;\n\t\t\t&lt;button @click=&quot;student.sex = '未知' &quot;&gt;修改性别&lt;/button&gt; &lt;br/&gt;\n\t\t\t&lt;button @click=&quot;addFriend&quot;&gt;在列表首位添加一个朋友&lt;/button&gt; &lt;br/&gt;\n\t\t\t&lt;button @click=&quot;updateFirstFriendName&quot;&gt;修改第一个朋友的名字为：张三&lt;/button&gt; &lt;br/&gt;\n\t\t\t&lt;button @click=&quot;addHobby&quot;&gt;添加一个爱好&lt;/button&gt; &lt;br/&gt;\n\t\t\t&lt;button @click=&quot;updateHobby&quot;&gt;修改第一个爱好为：开车&lt;/button&gt; &lt;br/&gt;\n\t\t\t&lt;button @click=&quot;removeSmoke&quot;&gt;过滤掉爱好中的抽烟&lt;/button&gt; &lt;br/&gt;\n\t\t\t&lt;h3&gt;姓名：&#123;&#123;student.name&#125;&#125;&lt;/h3&gt;\n\t\t\t&lt;h3&gt;年龄：&#123;&#123;student.age&#125;&#125;&lt;/h3&gt;\n\t\t\t&lt;h3 v-if=&quot;student.sex&quot;&gt;性别：&#123;&#123;student.sex&#125;&#125;&lt;/h3&gt;\n\t\t\t&lt;h3&gt;爱好：&lt;/h3&gt;\n\t\t\t&lt;ul&gt;\n\t\t\t\t&lt;li v-for=&quot;(h,index) in student.hobby&quot; :key=&quot;index&quot;&gt;\n\t\t\t\t\t&#123;&#123;h&#125;&#125;\n\t\t\t\t&lt;/li&gt;\n\t\t\t&lt;/ul&gt;\n\t\t\t&lt;h3&gt;朋友们：&lt;/h3&gt;\n\t\t\t&lt;ul&gt;\n\t\t\t\t&lt;li v-for=&quot;(f,index) in student.friends&quot; :key=&quot;index&quot;&gt;\n\t\t\t\t\t&#123;&#123;f.name&#125;&#125;--&#123;&#123;f.age&#125;&#125;\n\t\t\t\t&lt;/li&gt;\n\t\t\t&lt;/ul&gt;\n\t\t&lt;/div&gt;\n\t&lt;/body&gt;\n\n\t&lt;script type=&quot;text/javascript&quot;&gt;\n\t\tVue.config.productionTip = false //阻止 vue 在启动时生成生产提示。\n\n\t\tconst vm = new Vue(&#123; \n\t\t\tel:'#root',\n\t\t\tdata:&#123;\n\t\t\t\tstudent:&#123;\n\t\t\t\t\tname:'tom',\n\t\t\t\t\tage:18,\n\t\t\t\t\thobby:['抽烟','喝酒','烫头'],\n\t\t\t\t\tfriends:[\n\t\t\t\t\t\t&#123;name:'jerry',age:35&#125;,\n\t\t\t\t\t\t&#123;name:'tony',age:36&#125;\n\t\t\t\t\t]\n\t\t\t\t&#125;\n\t\t\t&#125;,\n\t\t\tmethods: &#123;\n\t\t\t\taddSex()&#123;\n\t\t\t\t\t// Vue.set(this.student,'sex','男')\n\t\t\t\t\tthis.$set(this.student,'sex','男')\n\t\t\t\t&#125;,\n\t\t\t\taddFriend()&#123;\n\t\t\t\t\tthis.student.friends.unshift(&#123;name:'jack',age:70&#125;)\n\t\t\t\t&#125;,\n\t\t\t\tupdateFirstFriendName()&#123;\n\t\t\t\t\tthis.student.friends[0].name = '张三'\n\t\t\t\t&#125;,\n\t\t\t\taddHobby()&#123;\n\t\t\t\t\tthis.student.hobby.push('学习')\n\t\t\t\t&#125;,\n\t\t\t\tupdateHobby()&#123;\n\t\t\t\t\t// this.student.hobby.splice(0,1,'开车')\n\t\t\t\t\t// Vue.set(this.student.hobby,0,'开车')\n\t\t\t\t\tthis.$set(this.student.hobby,0,'开车')\n\t\t\t\t&#125;,\n\t\t\t\tremoveSmoke()&#123;\n\t\t\t\t\tthis.student.hobby = this.student.hobby.filter((h)=&gt;&#123;\n\t\t\t\t\t\treturn h !== '抽烟'\n\t\t\t\t\t&#125;)\n\t\t\t\t&#125;\n\t\t\t&#125;\n\t\t&#125;)\n\t&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"样式绑定\"><a class=\"anchor\" href=\"#样式绑定\">#</a> 样式绑定</h2>\n<h3 id=\"class绑定\"><a class=\"anchor\" href=\"#class绑定\">#</a> class 绑定</h3>\n<p>语法：</p>\n<pre><code class=\"language-vue\">:class='xxx'  //xxx可以是字符串、数组或对象\n</code></pre>\n<ul>\n<li>\n<p><strong>字符串写法</strong></p>\n<pre><code class=\"language-vue\">&lt;div class=&quot;basic&quot; :class='mood' @click='changemood'&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;\n</code></pre>\n<p>适用于：样式的类名不确定，要动态获取；</p>\n</li>\n<li>\n<p><strong>数组写法</strong></p>\n<pre><code class=\"language-vue\">&lt;div class=&quot;basic&quot; :class='classArr' @click='changemood'&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt;\n//classArr是个数组，可以包含多个样式类名\n</code></pre>\n<p>适用于：要绑定多个样式，个数不确定，名字也不确定；</p>\n</li>\n<li>\n<p><strong>对象写法</strong></p>\n<pre><code class=\"language-vue\">&lt;div class=&quot;basic&quot; :class=&quot;classObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; \n//classObj是个对象，对象的key为样式类名，其对应的值为ture或false\n</code></pre>\n<p>适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用；</p>\n</li>\n</ul>\n<h3 id=\"style绑定\"><a class=\"anchor\" href=\"#style绑定\">#</a> style 绑定</h3>\n<p>语法：</p>\n<pre><code class=\"language-vue\">:style='xxx'  //xxx可以是对象或数组\n</code></pre>\n<ul>\n<li>\n<p><strong>对象写法</strong></p>\n<pre><code class=\"language-vue\">&lt;div class=&quot;basic&quot; :style=&quot;styleObj&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; \n//styleObj是个对象，对象的key为style属性值，其值为具体数额\n</code></pre>\n</li>\n<li>\n<p><strong>数组写法</strong></p>\n<pre><code class=\"language-vue\">&lt;div class=&quot;basic&quot; :style=&quot;styleArr&quot;&gt;&#123;&#123;name&#125;&#125;&lt;/div&gt; \n//styleArr是个数组，数组包含多个样式对象(即对象写法)\n</code></pre>\n</li>\n</ul>\n<h2 id=\"vue的数组方法\"><a class=\"anchor\" href=\"#vue的数组方法\">#</a> Vue 的数组方法</h2>\n<h3 id=\"filter\"><a class=\"anchor\" href=\"#filter\">#</a> filter()</h3>\n<p>​\tfilter () 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span> <span class=\"token number\">33</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item <span class=\"token operator\">>=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [32, 33, 40]</span></pre></td></tr></table></figure><h3 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> map()</h3>\n<p>​\tmap () 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [6, 11, 18, 27]</span></pre></td></tr></table></figure><h3 id=\"foreach\"><a class=\"anchor\" href=\"#foreach\">#</a> forEach()</h3>\n<p>​\tforEach () 方法用于调用数组的每个元素，并将元素传递给回调函数。（对空数组是不会执行回调函数的）</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [4, 9, 16, 25]</span></pre></td></tr></table></figure><h3 id=\"find\"><a class=\"anchor\" href=\"#find\">#</a> find()</h3>\n<p>​\tfind () 方法返回通过测试（函数内判断）的数组的第一个元素的值，之后的值不会再调用执行函数，如果没有符合条件的元素返回 undefined。（对于空数组，函数是不会执行的）</p>\n<p><strong>findIndex()</strong></p>\n<p>​\tfindIndex () 方法返回传入一个测试条件（函数）符合条件的数组第一个元素位置，之后的值不会再调用执行函数，如果没有符合条件的元素返回 - 1.（对于空数组，函数是不会执行的）</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//find()</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> b1 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token operator\">></span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> c1 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b1<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 16</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//findIndex()</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> b2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token operator\">></span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> c2 <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item<span class=\"token operator\">&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// -1</span></pre></td></tr></table></figure><h3 id=\"someevery\"><a class=\"anchor\" href=\"#someevery\">#</a> some()&amp;every()</h3>\n<p>​\tsome () 方法用于<strong>依次</strong>检测数组中的元素是否满足指定条件（函数提供）。</p>\n<ul>\n<li>如果有一个元素满足条件，则表达式返回 true , 剩余的元素不会再执行检测。</li>\n<li>如果没有满足条件的元素，则返回 false。</li>\n</ul>\n<p>every () 方法用于检测数组<strong>所有</strong>元素是否都符合指定条件（通过函数提供）。</p>\n<ul>\n<li>如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测。</li>\n<li>如果所有元素都满足条件，则返回 true。</li>\n</ul>\n<p>​\t两者均不会对空数组进行检测，且不会改变原始数组。</p>\n<h3 id=\"fill\"><a class=\"anchor\" href=\"#fill\">#</a> fill()</h3>\n<p>​\tfill () 方法用于将一个固定值替换数组的元素.</p>\n<p>该方法会改变原始数组，但不会对空数组进行填充。</p>\n<p>语法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr1<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> arr2<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token number\">25</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> arr2<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 2 为开始填充的起始位置，4 为结束位置（不包含）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> arr3<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> d <span class=\"token operator\">=</span> arr3<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// [100, 100, 100, 100]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [100, 100, 100, 100]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr2<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [4, 9, 100, 100]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [4, 9, 100, 100]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr3<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// []</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// []</span></pre></td></tr></table></figure><h2 id=\"表单数据收集\"><a class=\"anchor\" href=\"#表单数据收集\">#</a> 表单数据收集</h2>\n<p>​\tVue 的表单数据收集一般使用 v-model (双向数据绑定) 自动收集数据。</p>\n<p><strong>v-model 的三个修饰符：</strong></p>\n<ul>\n<li><code>lazy</code> ：失去焦点后再收集数据；</li>\n<li><code>number</code> ：输入字符串转为有效的数字；</li>\n<li><code>trim</code> ：输入的首尾空格将被过滤；</li>\n</ul>\n<h3 id=\"输入栏\"><a class=\"anchor\" href=\"#输入栏\">#</a> 输入栏</h3>\n<p><strong>text</strong></p>\n<p>语法：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>text<span class=\"token punctuation\">'</span></span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>xxx<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211223144637.png\" alt=\"\" /></p>\n<p><strong>password</strong></p>\n<p>语法：</p>\n<pre><code class=\"language-vue\">&lt;input type='password' v-model='xxx'/&gt;\n</code></pre>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211223144732.png\" alt=\"\" /></p>\n<p><strong>number</strong></p>\n<p>语法：</p>\n<pre><code class=\"language-vue\">&lt;input type='number' v-model.number='xxx'/&gt; \n</code></pre>\n<p>​\t需配合 v-model 的 <code>.number</code>  修饰符使用，将输入的字符串转为有效的数字；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211223144841.png\" alt=\"\" /></p>\n<p><strong>radio</strong></p>\n<p>语法：</p>\n<pre><code class=\"language-vue\">男&lt;input type=&quot;radio&quot; name='sex' v-model='userinfo.sex' value=&quot;man&quot;&gt;\n女&lt;input type=&quot;radio&quot; name='sex' v-model='userinfo.sex' value=&quot;woman&quot;&gt;\n</code></pre>\n<ol>\n<li>如果需要多选一，则需要配置 name 属性；</li>\n<li>v-model 收集的 value 值，故一定需要给标签配置 value 值；</li>\n</ol>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211223145454.png\" alt=\"\" /></p>\n<p><strong>checkbox</strong></p>\n<p>语法：</p>\n<pre><code class=\"language-vue\">&lt;input type=&quot;checkbox&quot; v-model='userinfo.hobby' value=&quot;stydy&quot;&gt;\n</code></pre>\n<ol>\n<li>如果没有配置其 value 属性，则收集的为 checked（勾选 or 未勾选，布尔值）；</li>\n<li>如果配置了其 value 属性，还需要将 v-model 的初始值设为数组，这样才能收集 value 组成的数组，否则收集的还是 checked；</li>\n</ol>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211223150622.png\" alt=\"\" /></p>\n<p><strong>select</strong></p>\n<p>语法：</p>\n<pre><code class=\"language-vue\">所属校区\n&lt;select v-model='userinfo.school'&gt;                 \t\t&lt;option value=&quot;&quot;&gt;请选择校区&lt;/option&gt;\n    &lt;option value=&quot;shahe&quot;&gt;沙河&lt;/option&gt;            \t&lt;option value=&quot;qingshuihe&quot;&gt;清水河&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211223150858.png\" alt=\"\" /></p>\n<p><strong>textarea</strong></p>\n<p>语法：</p>\n<pre><code class=\"language-vue\">&lt;textarea v-model.lazy='userinfo.other'&gt;&lt;/textarea&gt;\n</code></pre>\n<p>​\t一般配合 v-model 的 <code>.lazy</code>  修饰符使用，来减少无效开销；</p>\n<h3 id=\"表单代码实例\"><a class=\"anchor\" href=\"#表单代码实例\">#</a> 表单代码实例</h3>\n<pre><code class=\"language-vue\">&lt;!DOCTYPE html&gt;\n&lt;html lang=&quot;zh-cn&quot;&gt;\n&lt;head&gt;\n    &lt;meta charset=&quot;UTF-8&quot;&gt;\n    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;\n    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;\n    &lt;title&gt;收集表单数据&lt;/title&gt;\n    &lt;script src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id=&quot;root&quot;&gt;\n        &lt;form @submit.prevent='demo'&gt;\n            账号:&lt;input type=&quot;text&quot; v-model.trim='userinfo.account'&gt;&lt;br&gt;&lt;br&gt;\n            密码:&lt;input type=&quot;password&quot; v-model='userinfo.password'&gt;&lt;br&gt;&lt;br&gt;\n            年龄:&lt;input type=&quot;number&quot; v-model.number='userinfo.age'&gt;&lt;br&gt;&lt;br&gt;\n            性别:\n            男&lt;input type=&quot;radio&quot; name='sex' v-model='userinfo.sex' value=&quot;man&quot;&gt;\n            女&lt;input type=&quot;radio&quot; name='sex' v-model='userinfo.sex' value=&quot;woman&quot;&gt;&lt;br&gt;&lt;br&gt;\n            爱好:\n            学习&lt;input type=&quot;checkbox&quot; v-model='userinfo.hobby' value=&quot;stydy&quot;&gt;\n            打游戏&lt;input type=&quot;checkbox&quot; v-model='userinfo.hobby' value=&quot;game&quot;&gt;\n            吃饭&lt;input type=&quot;checkbox&quot; v-model='userinfo.hobby' value=&quot;eat&quot;&gt;&lt;br&gt;&lt;br&gt;\n            所属校区\n            &lt;select v-model='userinfo.school'&gt;\n                &lt;option value=&quot;&quot;&gt;请选择校区&lt;/option&gt;\n                &lt;option value=&quot;shahe&quot;&gt;沙河&lt;/option&gt;\n                &lt;option value=&quot;qingshuihe&quot;&gt;清水河&lt;/option&gt;\n            &lt;/select&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;\n            其它信息:\n            &lt;textarea v-model.lazy='userinfo.other'&gt;&lt;/textarea&gt;&lt;br&gt;&lt;br&gt;\n            &lt;input type=&quot;checkbox&quot; v-model='userinfo.agree'&gt; 阅读并接收&lt;a href=&quot;#&quot;&gt;《用户协议》&lt;/a&gt;\n            &lt;button&gt;提交&lt;/button&gt;\n        &lt;/form&gt;\n    &lt;/div&gt;\n\n&lt;/body&gt;\n&lt;script&gt;\n    new Vue(&#123;\n        el: '#root',\n        data: &#123;\n            userinfo: &#123;\n                account: '',\n                password: '',\n                age: 18,\n                sex: 'man',\n                hobby: [],\n                school: '',\n                other: '',\n                agree: '',\n            &#125;\n        &#125;,\n        methods: &#123;\n            demo() &#123;\n                console.log(JSON.stringify(this.userinfo))\n            &#125;\n        &#125;,\n    &#125;)\n&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n<h2 id=\"生命周期\"><a class=\"anchor\" href=\"#生命周期\">#</a> 生命周期</h2>\n<p><strong>官方生命周期图：</strong></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211223202830.png\" alt=\"\" /></p>\n<p><strong>细节解释</strong></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211223203006.png\" alt=\"\" /></p>\n<h3 id=\"常用的生命周期方法\"><a class=\"anchor\" href=\"#常用的生命周期方法\">#</a> 常用的生命周期方法</h3>\n<p><strong>mounted()</strong></p>\n<p>​\t【初始化操作】</p>\n<p>​\t发送 ajax 请求，启动定时器、绑定自定义事件、订阅消息等异步任务；</p>\n<p><strong>beforeDestory()</strong></p>\n<p>​\t【收尾工作】</p>\n<p>​\t清除定时器、解绑自定义事件、取消订阅消息等收尾工作；</p>\n<h2 id=\"vue组件的使用\"><a class=\"anchor\" href=\"#vue组件的使用\">#</a> Vue 组件的使用</h2>\n<p><strong>组件的定义：</strong></p>\n<p>​\t实现应用中局部功能代码和资源的集合。</p>\n<h3 id=\"非单文件组件\"><a class=\"anchor\" href=\"#非单文件组件\">#</a> 非单文件组件</h3>\n<p><strong>使用组件的三大步骤：</strong></p>\n<ol>\n<li><a href=\"#extend\">定义组件（创建组件）</a></li>\n<li><a href=\"#component\">注册组件</a></li>\n<li><a href=\"#template\">使用组件（编写组件结构）</a></li>\n</ol>\n<p><span id='extend'><strong>定义组件</strong></span></p>\n<p>​\t使用 <code>Vue.extend(options)</code>  创建，其中 <code>options</code>  和 <code>new Vue（options)</code>  时传入的那个 <code>options</code>  几乎一样，但有以下区别:</p>\n<ol>\n<li>不要写 <code>el</code> —— 最终所有的组件都要经过一个 vm 的管理，由 vm 中的 <code>el</code>  决定服务哪个容器；</li>\n<li><code>data</code>  必须写成函数 —— 避免组件被复用时，数据存在引用关系；</li>\n</ol>\n<p><span id='component'><strong>注册组件</strong></span></p>\n<ol>\n<li>局部注册： <code>new Vue</code>  的时候传入 <code>components</code>  选项</li>\n<li>全局注册： <code>Vue.component</code>  (‘组件名’, 组件)</li>\n</ol>\n<p><span id='template'><strong>使用组件</strong></span></p>\n<p>使用 Vue 的 template 属性创建组件结构，用两个顿号（`）包裹结构。</p>\n<p>非单文件代码实例：</p>\n<pre><code class=\"language-vue\">&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n  &lt;meta charset=&quot;UTF-8&quot; /&gt;\n  &lt;title&gt;几个注意点&lt;/title&gt;\n  &lt;script type=&quot;text/javascript&quot; src=&quot;../js/vue.js&quot;&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;!-- 准备好一个容器--&gt;\n  &lt;div id=&quot;root&quot;&gt;\n    &lt;h1&gt;&#123;&#123;msg&#125;&#125;&lt;/h1&gt;\n    &lt;school&gt;&lt;/school&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n\n&lt;script type=&quot;text/javascript&quot;&gt;\n  Vue.config.productionTip = false\n\n  //定义组件\n  const s = Vue.extend(&#123;\n    name: 'atguigu',\n    template: `\n\t\t\t\t&lt;div&gt;\n\t\t\t\t\t&lt;h2&gt;学校名称：&#123;&#123;name&#125;&#125;&lt;/h2&gt;\t\n\t\t\t\t\t&lt;h2&gt;学校地址：&#123;&#123;address&#125;&#125;&lt;/h2&gt;\t\n\t\t\t\t&lt;/div&gt;\n\t\t\t`,\n    data() &#123;\n      return &#123;\n        name: '尚硅谷',\n        address: '北京'\n      &#125;\n    &#125;\n  &#125;)\n\n  new Vue(&#123;\n    el: '#root',\n    data: &#123;\n      msg: '欢迎学习Vue!'\n    &#125;,\n    components: &#123;\n      school: s\n    &#125;\n  &#125;)\n&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n<h4 id=\"注意项\"><a class=\"anchor\" href=\"#注意项\">#</a> 注意项</h4>\n<p><strong>关于组件名</strong><br />\n一个单词组成：<br />\n第一种写法（首字母小写）：school<br />\n 第二种写法（首字母大写）：School</p>\n<p>多个单词组成：<br />\n第一种写法（kebab-case 命名）：my-school<br />\n 第二种写法（CamelCase 命名）：MySchool（需要 Vue 脚手架支持）</p>\n<p>备注<br />\n① 组件名尽可能回避 HTML 中已有的元素名称，例如 h2、H2；<br />\n② 可以使用 name 配置项指定组件在开发者工具中呈现的名字；</p>\n<p><strong>关于组件标签</strong><br />\n第一种写法：<school></school><br />\n第二种写法：<school/> (不使用脚手架会导致后续组件不能渲染)</p>\n<p><strong>简写方式</strong><br />\n <code>const school = Vue.extend(options) </code> 可以简写成 <code>const school = options</code></p>\n<h3 id=\"vuecomponent\"><a class=\"anchor\" href=\"#vuecomponent\">#</a> VueComponent</h3>\n<ol>\n<li>app 组件本质是一个名为 VueComponent 的构造函数，且不是程序员定义的，是 Vue.extend 生成的；</li>\n<li>我们只需要写<app/>或<app></app>，Vue 解析时会帮我们创建 app 组件的实例对象，即 Vue 帮我们执行 new VueComponent (options);</li>\n<li>特别注意：每次调用 Vue.extend，返回的都是一个全新的 VueComponent;</li>\n<li>关于 this 指向<br />\n① 组件配置中：data 函数、methods 中的函数、watch 中的函数、computed 中的函数 它们的 this 均是【VueComponent 实例对象】<br />\n② new Vue (options) 配置中：data 函数、methods 中的函数、watch 中的函数、computed 中的函数 它们的 this 均是【Vue 实例对象】;</li>\n<li>VueComponent 的实例对象，以后简称 vc（也可称之为：组件实例对象）;</li>\n</ol>\n<p><strong>一个重要的内置关系</strong></p>\n<pre><code class=\"language-vue\">VueComponent.prototype.__proto__ === Vue.prototype\n</code></pre>\n<p>这样组件实例对象 vc 就可以访问到 Vue 原型上的属性和方法。</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211224144834.png\" alt=\"\" /></p>\n<h3 id=\"单文件组件\"><a class=\"anchor\" href=\"#单文件组件\">#</a> 单文件组件</h3>\n<p>主要由三部分组成：</p>\n<ol>\n<li><a href=\"#vue\">Vue 组件</a></li>\n<li><a href=\"#main\">main.js 文件</a></li>\n<li><a href=\"#index\">index.html 文件</a></li>\n</ol>\n<p><span id='vue'><strong>Vue 组件</strong></span></p>\n<ol>\n<li>\n<p>普通组件的组成</p>\n<ul>\n<li>模板页面</li>\n<li>JS 模块对象</li>\n<li>样式</li>\n</ul>\n<p>代码实例：</p>\n<pre><code class=\"language-vue\">//模板页面\n&lt;template&gt;\n  &lt;div class=&quot;demo&quot;&gt;\n    &lt;h2&gt;学生名称:&#123;&#123; name &#125;&#125;&lt;/h2&gt;\n    &lt;h2&gt;学生地址:&#123;&#123; address &#125;&#125;&lt;/h2&gt;\n    &lt;button @click=&quot;showName&quot;&gt;&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n//JS模块对象\n&lt;script&gt;\nexport default &#123;\n  name: &quot;school&quot;,\n  data() &#123;\n    return &#123;\n      name: &quot;Sakura&quot;,\n      address: &quot;成都&quot;,\n    &#125;;\n  &#125;,\n  methods: &#123;\n    showName() &#123;\n      alert(this.name);\n    &#125;,\n  &#125;,\n&#125;;\n&lt;/script&gt;\n\n//样式\n&lt;style&gt;\n.demo &#123;\n  background: orange;\n&#125;\n&lt;/style&gt;\n</code></pre>\n</li>\n<li>\n<p>App.vue</p>\n<p>所有组件的父组件，用于调控和使用其它组件。</p>\n<p>代码实例：</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;School&gt;&lt;/School&gt;\n    &lt;Student&gt;&lt;/Student&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport School from &quot;./School&quot;;\nimport Student from &quot;./Student.vue&quot;;\nexport default &#123;\n  name: &quot;App&quot;,\n  component: &#123;\n    School,\n    Student,\n  &#125;,\n&#125;;\n&lt;/script&gt;\n</code></pre>\n</li>\n</ol>\n<p><span id='main'><strong>main.js 文件</strong></span></p>\n<p>代码实例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">'./App.vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    el<span class=\"token operator\">:</span> <span class=\"token string\">'#root'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    template<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">&lt;App>&lt;/App></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    component<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> App <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><span id='index'><strong>index.html 文件</strong></span></p>\n<p>代码实例：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>zh-cn<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1.0<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>单文件组件<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>root<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token comment\">&lt;!-- &lt;App>&lt;/App> --></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>../js/vue.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./main.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"vue-cli\"><a class=\"anchor\" href=\"#vue-cli\">#</a> Vue CLI</h2>\n<h3 id=\"脚手架的安装\"><a class=\"anchor\" href=\"#脚手架的安装\">#</a> 脚手架的安装</h3>\n<p>暂略</p>\n<h3 id=\"脚手架文件结构\"><a class=\"anchor\" href=\"#脚手架文件结构\">#</a> 脚手架文件结构</h3>\n<p>├── node_modules<br />\n├── public<br />\n│   ├── favicon.ico: 页签图标<br />\n│   └── index.html: 主页面<br />\n├── src<br />\n│   ├── assets: 存放静态资源<br />\n│   │   └── logo.png<br />\n│   │── component: 存放组件<br />\n│   │   └── HelloWorld.vue<br />\n│   │── App.vue: 汇总所有组件<br />\n│   │── main.js: 入口文件<br />\n├── .gitignore: git 版本管制忽略的配置<br />\n├── babel.config.js: babel 的配置文件<br />\n├── package.json: 应用包配置文件<br />\n├── <span class=\"exturl\" data-url=\"aHR0cDovL1JFQURNRS5tZA==\">README.md</span>: 应用描述文件<br />\n├── package-lock.json：包版本控制文件</p>\n<h3 id=\"render\"><a class=\"anchor\" href=\"#render\">#</a> render()</h3>\n<p>vue.js 与 vue.runtime.xxx.js 的区别：</p>\n<ol>\n<li>vue.js 是完整版的 Vue，包含：核心功能 + 模板解析器。</li>\n<li>vue.runtime.xxx.js 是运行版的 Vue，只包含：核心功能；没有模板解析器。</li>\n</ol>\n<p>因为 vue.runtime.xxx.js 没有模板解析器，所以不能使用 template 这个配置项，需要使用 render 函数接收到的 createElement 函数去指定具体内容。</p>\n<p>代码实例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token parameter\">h</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">$mount</span><span class=\"token punctuation\">(</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"个性化配置\"><a class=\"anchor\" href=\"#个性化配置\">#</a> 个性化配置</h3>\n<p>​\t先创建 vue.config.js 文件，再参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jbGkudnVlanMub3JnL3poL2NvbmZpZy8=\">配置参考 | Vue CLI (vuejs.org)</span> 后将需要修改的部分写入文件。</p>\n<h2 id=\"vue高级知识\"><a class=\"anchor\" href=\"#vue高级知识\">#</a> Vue 高级知识</h2>\n<h3 id=\"ref属性\"><a class=\"anchor\" href=\"#ref属性\">#</a> ref 属性</h3>\n<p><strong>功能：</strong></p>\n<p>​\t被用来给元素或子组件注册引用信息（id 的替代者）。</p>\n<ol>\n<li>应用在 html 标签上获取的是真实 DOM 元素；</li>\n<li>应用在组件标签上是组件实例对象（vc）</li>\n</ol>\n<p><strong>使用方式：</strong></p>\n<ol>\n<li>打标识：&lt;h1 ref=&quot;xxx&quot;&gt;.....&lt;/h1 &gt; 或 &lt;School ref=&quot;xxx&quot;&gt;&lt;/School&gt;</li>\n<li>获取：<span class=\"exturl\" data-url=\"aHR0cDovL3RoaXMuJHJlZnMueHh4\">this.$refs.xxx</span></li>\n</ol>\n<p>代码实例：</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div&gt;\n    &lt;h1 v-text=&quot;msg&quot; ref=&quot;title&quot;&gt;&lt;/h1&gt;\n    &lt;button @click=&quot;showDOM&quot; ref=&quot;btn&quot;&gt;输出上方的DOM元素&lt;/button&gt;\n    &lt;School ref=&quot;sch&quot; /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport School from &quot;./components/School.vue&quot;;\nexport default &#123;\n  name: &quot;App&quot;,\n  components: &#123;\n    School,\n  &#125;,\n  data() &#123;\n    return &#123;\n      msg: &quot;Vue&quot;,\n    &#125;;\n  &#125;,\n  methods: &#123;\n    showDOM() &#123;\n      console.log(this.$refs.title);\n      console.log(this.$refs.btn);\n      console.log(this.$refs.sch);\n    &#125;,\n  &#125;,\n&#125;;\n&lt;/script&gt;\n</code></pre>\n<h3 id=\"props属性\"><a class=\"anchor\" href=\"#props属性\">#</a> props 属性</h3>\n<p><strong>功能：</strong></p>\n<p>​\t让组件接收外部传过来的数据；</p>\n<p><strong>使用方式：</strong></p>\n<ul>\n<li>传送数据： <code>&lt;Demo name=&quot;xxx&quot;/&gt;</code></li>\n<li>接收数据：</li>\n</ul>\n<ol>\n<li>\n<p>第一种方式（只接收）： <code>props:['name']</code> ；</p>\n</li>\n<li>\n<p>第二种方式（限制类型）： <code>props:&#123;name:String&#125;</code> ；</p>\n</li>\n<li>\n<p>第三种方式（限制类型、限制必要性、指定默认值）：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>props<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tname<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\ttype<span class=\"token operator\">:</span>String<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\trequired<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 必要性</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span><span class=\"token string\">'老王'</span> <span class=\"token comment\">// 默认值</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<p>** 备注：**props 是只读的，Vue 底层会监测你对 props 的修改，如果进行了修改，就会发出警告，若业务需求确实需要修改，那么请复制 props 的内容到 data 中一份，然后去修改 data 中的数据。</p>\n<p>代码实例：</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;student&quot;&gt;\n    &lt;h2&gt;学生名称:&#123;&#123; name &#125;&#125;&lt;/h2&gt;\n    &lt;h2&gt;学生地址:&#123;&#123; address &#125;&#125;&lt;/h2&gt;\n    &lt;h2&gt;学生年龄:&#123;&#123; age + 1 &#125;&#125;&lt;/h2&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &quot;Student&quot;,\n  data() &#123;\n    return &#123;\n      maName: this.name,\n      myAge: this.age,\n    &#125;;\n  &#125;,\n  //简单接收\n  // props: [&quot;name&quot;, &quot;address&quot;, &quot;age&quot;],\n  //\n  //类型限制的接收\n  // props: &#123;\n  //   name: String,\n  //   age: Number,\n  //   sex: String,\n  // &#125;,\n  //类型的限制、默认值的限定、必要性的限定\n  props: &#123;\n    name: &#123;\n      type: String,\n      required: true,\n    &#125;,\n    age: &#123;\n      type: Number,\n      default: 10,\n    &#125;,\n    sex: &#123;\n      type: String,\n      required: true,\n    &#125;,\n  &#125;,\n&#125;;\n&lt;/script&gt;\n\n&lt;style&gt;\n.student &#123;\n  background-color: grey;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<h3 id=\"mixin属性\"><a class=\"anchor\" href=\"#mixin属性\">#</a> mixin 属性</h3>\n<p><strong>功能：</strong></p>\n<p>​\t可以把多个组件共用的配置提取成一个混入对象；</p>\n<p><strong>使用方式：</strong></p>\n<ol>\n<li>\n<p>第一步：定义混入（js 文件）：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    methods<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>第二步：使用混入</p>\n</li>\n</ol>\n<ul>\n<li>全局混入：在 mian.js 中  <code>Vue.mixin(xxx)</code></li>\n<li>局部混入：在 Vue 组件中  <code>mixins:['xxx']</code></li>\n</ul>\n<p>代码实例：</p>\n<p>mixin.js:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> hunhe <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  methods<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">showName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好啊！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> hunhe2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      x<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      y<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"vue插件\"><a class=\"anchor\" href=\"#vue插件\">#</a> Vue 插件</h3>\n<p><strong>功能：</strong></p>\n<p>​\t用于增强 Vue；</p>\n<p><strong>使用方式：</strong></p>\n<ol>\n<li>\n<p>定义插件</p>\n<p>本质：包含 install 方法的一个对象，install 的第一个参数是 Vue，第二个以后的参数是插件使用者传递的数据。</p>\n<p>代码实例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">install</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Vue<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 定义混入</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Vue<span class=\"token punctuation\">.</span><span class=\"token function\">mixin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function\">data</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          x<span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          y<span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 给 Vue 原型上添加一个方法（vm 和 vc 就都能用了）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">hello</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你好啊\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用插件： <code>Vue.use()</code></p>\n<p>代码实例：</p>\n<p>main.js:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入 Vue</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">\"vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 引入 App</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App.vue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 引入插件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">import</span> plugins <span class=\"token keyword\">from</span> <span class=\"token string\">\"./plugins\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 应用（使用）插件</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>plugins<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 创建 vm</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  el<span class=\"token operator\">:</span> <span class=\"token string\">\"#app\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">h</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"scoped样式\"><a class=\"anchor\" href=\"#scoped样式\">#</a> scoped 样式</h3>\n<p><strong>作用：</strong></p>\n<p>​\t让样式在局部生效，防止冲突；</p>\n<p><strong>写法：</strong></p>\n<pre><code>`&lt;style scoped&gt; &lt;/style&gt;`\n</code></pre>\n<h2 id=\"slot插槽\"><a class=\"anchor\" href=\"#slot插槽\">#</a> slot 插槽</h2>\n<p><strong>功能：</strong></p>\n<p>​\t让父组件可以向子组件指定位置插入 html 结构，也是一种组件间通信的方式，适用于 <strong>父组件 ===&gt; 子组件</strong></p>\n<p><strong>默认插槽</strong></p>\n<p>父组件：</p>\n<pre><code class=\"language-vue\">&lt;Category&gt;\n   &lt;div&gt;html结构1&lt;/div&gt;\n&lt;/Category&gt;\n</code></pre>\n<p>子组件（ <code>Category.vue</code> ）</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n    &lt;div&gt;\n       &lt;!-- 定义插槽 --&gt;\n       &lt;slot&gt;插槽默认内容...&lt;/slot&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n<p><strong>具名插槽</strong></p>\n<p>父组件：</p>\n<pre><code class=\"language-vue\">&lt;Category&gt;\n    &lt;template slot=&quot;center&quot;&gt;\n      &lt;div&gt;html结构1&lt;/div&gt;\n    &lt;/template&gt;\n\n    &lt;template v-slot:footer&gt;\n       &lt;div&gt;html结构2&lt;/div&gt;\n    &lt;/template&gt;\n&lt;/Category&gt;\n</code></pre>\n<p>子组件（ <code>Category.vue</code> ）</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n    &lt;div&gt;\n       &lt;!-- 定义插槽 --&gt;\n       &lt;slot name=&quot;center&quot;&gt;插槽默认内容...&lt;/slot&gt;\n       &lt;slot name=&quot;footer&quot;&gt;插槽默认内容...&lt;/slot&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n</code></pre>\n<p><strong>作用域插槽</strong></p>\n<p><strong>理解：</strong></p>\n<p>​\t数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定。（games 数据在 Category 组件中，但使用数据所遍历出来的结构由 App 组件决定）</p>\n<p>父组件</p>\n<pre><code class=\"language-vue\">&lt;Category&gt;\n\t&lt;template scope=&quot;scopeData&quot;&gt;\n\t\t&lt;!-- 生成的是ul列表 --&gt;\n\t\t&lt;ul&gt;\n\t\t\t&lt;li v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/li&gt;\n\t\t&lt;/ul&gt;\n\t&lt;/template&gt;\n&lt;/Category&gt;\n\n&lt;Category&gt;\n\t&lt;template slot-scope=&quot;scopeData&quot;&gt;\n\t\t&lt;!-- 生成的是h4标题 --&gt;\n\t\t&lt;h4 v-for=&quot;g in scopeData.games&quot; :key=&quot;g&quot;&gt;&#123;&#123;g&#125;&#125;&lt;/h4&gt;\n\t&lt;/template&gt;\n&lt;/Category&gt;\n</code></pre>\n<p>子组件（ <code>Category.vue</code> ）</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n    &lt;div&gt;\n        &lt;slot :games=&quot;games&quot;&gt;&lt;/slot&gt;\n    &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n    export default &#123;\n        name:'Category',\n        props:['title'],\n        //数据在子组件自身\n        data() &#123;\n            return &#123;\n                games:['红色警戒','穿越火线','劲舞团','超级玛丽']\n            &#125;\n        &#125;,\n    &#125;\n&lt;/script&gt;\n</code></pre>\n<h2 id=\"vuex\"><a class=\"anchor\" href=\"#vuex\">#</a> Vuex</h2>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/vuex.png\" alt=\"\" /></p>\n<p><strong>概念：</strong></p>\n<p>​\t在 Vue 中实现集中式状态（数据）管理的一个 Vue 插件，对 vue 应用中多个组件的共享状态进行集中式的管理（读 / 写数据或方法），也是一种组件间通信的方式，且适用于任意组件间通信。</p>\n<h3 id=\"搭建vuex环境\"><a class=\"anchor\" href=\"#搭建vuex环境\">#</a> 搭建 Vuex 环境</h3>\n<ol>\n<li>\n<p>创建文件： <code>src/store/index.js</code></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入 Vue 核心库</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 引入 Vuex</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> Vuex <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 应用 Vuex 插件</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>Vuex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 准备 actions 对象 —— 响应组件中用户的动作</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> actions <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 准备 mutations 对象 —— 修改 state 中的数据</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">const</span> mutations <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 准备 state 对象 —— 保存具体的数据</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> state <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 创建并暴露 store</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tactions<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tmutations<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tstate</pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>在 <code>main.js</code>  中创建 vm 时传入 <code>store</code>  配置项</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 引入 store</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> store <span class=\"token keyword\">from</span> <span class=\"token string\">'./store'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 创建 vm</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tel<span class=\"token operator\">:</span><span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token function-variable function\">render</span><span class=\"token operator\">:</span> <span class=\"token parameter\">h</span> <span class=\"token operator\">=></span> <span class=\"token function\">h</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tstore</pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"基本使用\"><a class=\"anchor\" href=\"#基本使用\">#</a> 基本使用</h3>\n<ol>\n<li>\n<p>初始化数据、配置 <code>actions</code> 、配置 <code>mutation</code></p>\n</li>\n<li>\n<p>组件中读取 vuex 中的数据： <code>$store.state.sum</code></p>\n</li>\n<li>\n<p>组件中修改 vuex 中的数据： <code>$store.dispatch('action中的方法名',数据)</code>  或  <code>$store.commit('mutations中的方法名',数据)</code></p>\n<blockquote>\n<p>备注：若没有网络请求或其他业务逻辑，组件中也可以越过 actions，即不写 <code>dispatch</code> ，直接编写 <code>commit</code></p>\n</blockquote>\n</li>\n</ol>\n<h4 id=\"getters\"><a class=\"anchor\" href=\"#getters\">#</a> getters</h4>\n<p><strong>概念：</strong></p>\n<p>​\t当 state 中的数据需要经过加工后再使用时，可以使用 getters 加工。</p>\n<p><strong>使用方法：</strong></p>\n<ol>\n<li>\n<p>在 <code>store.js</code>  中追加 <code>getters</code>  配置</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> getters <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">bigSum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">*</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 创建并暴露 store</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tgetters</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>组件中读取数据： <code>$store.getters.bigSum</code></p>\n</li>\n</ol>\n<h3 id=\"四个map方法\"><a class=\"anchor\" href=\"#四个map方法\">#</a> 四个 Map 方法</h3>\n<ul>\n<li>\n<p><strong>mapState 方法：</strong>用于帮助我们映射 <code>state</code>  中的数据为计算属性；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 借助 mapState 生成计算属性：sum、school、subject（对象写法）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>     <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>sum<span class=\"token operator\">:</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span>school<span class=\"token operator\">:</span><span class=\"token string\">'school'</span><span class=\"token punctuation\">,</span>subject<span class=\"token operator\">:</span><span class=\"token string\">'subject'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>         </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 借助 mapState 生成计算属性：sum、school、subject（数组写法）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'school'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'subject'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>mapGetters 方法：</strong>用于帮助我们映射 <code>getters</code>  中的数据为计算属性；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>computed<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 借助 mapGetters 生成计算属性：bigSum（对象写法）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>bigSum<span class=\"token operator\">:</span><span class=\"token string\">'bigSum'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 借助 mapGetters 生成计算属性：bigSum（数组写法）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'bigSum'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>mapActions 方法：</strong>用于帮助我们生成与 <code>actions</code>  对话的方法，即：包含 <code>$store.dispatch(xxx)</code>  的函数；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>methods<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 靠 mapActions 生成：incrementOdd、incrementWait（对象形式）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>incrementOdd<span class=\"token operator\">:</span><span class=\"token string\">'jiaOdd'</span><span class=\"token punctuation\">,</span>incrementWait<span class=\"token operator\">:</span><span class=\"token string\">'jiaWait'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 靠 mapActions 生成：incrementOdd、incrementWait（数组形式）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'jiaOdd'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'jiaWait'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>mapMutations 方法：</strong>用于帮助我们生成与 <code>mutations</code>  对话的方法，即：包含 <code>$store.commit(xxx)</code>  的函数；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>methods<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 靠 mapActions 生成：increment、decrement（对象形式）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>increment<span class=\"token operator\">:</span><span class=\"token string\">'JIA'</span><span class=\"token punctuation\">,</span>decrement<span class=\"token operator\">:</span><span class=\"token string\">'JIAN'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 靠 mapMutations 生成：JIA、JIAN（对象形式）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'JIA'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'JIAN'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<blockquote>\n<p>备注：</p>\n<ol>\n<li>4 个 Map () 方法使用前需要先引用 <code>import &#123;xxx&#125; from 'vuex'</code>  (xxx 为 Map 方法名)</li>\n<li>mapActions 与 mapMutations 使用时，若需要传递参数需要：在模板中绑定事件时传递好参数，否则参数是事件对象。</li>\n</ol>\n</blockquote>\n<h3 id=\"模块化\"><a class=\"anchor\" href=\"#模块化\">#</a> 模块化</h3>\n<p><strong>功能：</strong></p>\n<p>​\t让代码更好维护，让多种数据分类更加明确。</p>\n<p><strong>使用方法：</strong></p>\n<ol>\n<li>\n<p>开启命名空间；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> countAbout <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  namespaced<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 开启命名空间</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  state<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>x<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  mutations<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  getters<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">bigSum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">.</span>sum <span class=\"token operator\">*</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">const</span> personAbout <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  namespaced<span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 开启命名空间</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  state<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  mutations<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  actions<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vuex<span class=\"token punctuation\">.</span>Store</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  modules<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    countAbout<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    personAbout</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>开启命名空间后，组件中读取 state 数据；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方式一：自己直接读取</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>personAbout<span class=\"token punctuation\">.</span>list</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 方式二：借助 mapState 读取：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token string\">'countAbout'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'sum'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'school'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'subject'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure></li>\n<li>\n<p>开启命名空间后，组件中读取 getters 数据；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方式一：自己直接读取</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>getters<span class=\"token punctuation\">[</span><span class=\"token string\">'personAbout/firstPersonName'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 方式二：借助 mapGetters 读取：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token function\">mapGetters</span><span class=\"token punctuation\">(</span><span class=\"token string\">'countAbout'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'bigSum'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>开启命名空间后，组件中调用 dispatch；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方式一：自己直接 dispatch</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'personAbout/addPersonWang'</span><span class=\"token punctuation\">,</span>person<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 方式二：借助 mapActions：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token function\">mapActions</span><span class=\"token punctuation\">(</span><span class=\"token string\">'countAbout'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>incrementOdd<span class=\"token operator\">:</span><span class=\"token string\">'jiaOdd'</span><span class=\"token punctuation\">,</span>incrementWait<span class=\"token operator\">:</span><span class=\"token string\">'jiaWait'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>开启命名空间后，组件中调用 commit；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方式一：自己直接 commit</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'personAbout/ADD_PERSON'</span><span class=\"token punctuation\">,</span>person<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 方式二：借助 mapMutations：</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token function\">mapMutations</span><span class=\"token punctuation\">(</span><span class=\"token string\">'countAbout'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>increment<span class=\"token operator\">:</span><span class=\"token string\">'JIA'</span><span class=\"token punctuation\">,</span>decrement<span class=\"token operator\">:</span><span class=\"token string\">'JIAN'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"路由\"><a class=\"anchor\" href=\"#路由\">#</a> 路由</h2>\n<p><strong>原理：</strong></p>\n<p>​\t 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</p>\n<h3 id=\"基本使用-2\"><a class=\"anchor\" href=\"#基本使用-2\">#</a> 基本使用</h3>\n<ol>\n<li>\n<p>安装 vue-router，命令： <code>npm i vue-router</code></p>\n</li>\n<li>\n<p>应用插件： <code>Vue.use(VueRouter)</code></p>\n</li>\n<li>\n<p>编写 router 配置项:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 引入 VueRouter</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> VueRouter <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-router'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 引入 Luyou 组件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">import</span> About <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/About'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">import</span> Home <span class=\"token keyword\">from</span> <span class=\"token string\">'../components/Home'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 创建 router 实例对象，去管理一组一组的路由规则</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> router <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VueRouter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\troutes<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\tcomponent<span class=\"token operator\">:</span>About</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\tcomponent<span class=\"token operator\">:</span>Home</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">// 暴露 router</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> router</pre></td></tr></table></figure></li>\n<li>\n<p>实现切换（active-class 可配置高亮样式）；</p>\n<pre><code class=\"language-vue\">&lt;router-link active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;\n</code></pre>\n</li>\n<li>\n<p>指定展示位置；</p>\n<pre><code class=\"language-vue\">&lt;router-view&gt;&lt;/router-view&gt;\n</code></pre>\n</li>\n</ol>\n<blockquote>\n<p><strong>备注：</strong></p>\n<ul>\n<li>路由组件通常存放在 <code>pages</code>  文件夹，一般组件通常存放在 <code>components</code>  文件夹；</li>\n<li>通过切换，“隐藏” 了的路由组件，默认是被销毁掉的，需要的时候再去挂载；</li>\n<li>每个组件都有自己的 <code>$route</code>  属性，里面存储着自己的路由信息；</li>\n<li>整个应用只有一个 router，可以通过组件的 <code>$router</code>  属性获取到；</li>\n</ul>\n</blockquote>\n<h3 id=\"路由的参数传递\"><a class=\"anchor\" href=\"#路由的参数传递\">#</a> 路由的参数传递</h3>\n<h4 id=\"query传参数\"><a class=\"anchor\" href=\"#query传参数\">#</a> query 传参数</h4>\n<ol>\n<li>\n<p>传递参数：</p>\n<pre><code class=\"language-vue\">&lt;!-- 跳转并携带query参数，to的字符串写法 --&gt;\n&lt;router-link :to=&quot;/home/message/detail?id=666&amp;title=你好&quot;&gt;跳转&lt;/router-link&gt;\n\t\t\t\t\n&lt;!-- 跳转并携带query参数，to的对象写法 --&gt;\n&lt;router-link \n\t:to=&quot;&#123;\n\t\tpath:'/home/message/detail',\n\t\tquery:&#123;\n\t\t   id:666,\n            title:'你好'\n\t\t&#125;\n\t&#125;&quot;\n&gt;跳转&lt;/router-link&gt;\n</code></pre>\n</li>\n<li>\n<p>接收参数：</p>\n<pre><code class=\"language-vue\">$route.query.id\n$route.query.title\n</code></pre>\n</li>\n</ol>\n<h4 id=\"params传参数\"><a class=\"anchor\" href=\"#params传参数\">#</a> params 传参数</h4>\n<ol>\n<li>\n<p>配置路由，声明接收 params 参数:</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcomponent<span class=\"token operator\">:</span>Home<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tchildren<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'news'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tcomponent<span class=\"token operator\">:</span>News</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\tcomponent<span class=\"token operator\">:</span>Message<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\tchildren<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t\tname<span class=\"token operator\">:</span><span class=\"token string\">'xiangqing'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'detail/:id/:title'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 使用占位符声明接收 params 参数</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\t\tcomponent<span class=\"token operator\">:</span>Detail</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>传递参数：</p>\n<pre><code class=\"language-vue\">&lt;!-- 跳转并携带params参数，to的字符串写法 --&gt;\n&lt;router-link :to=&quot;/home/message/detail/666/你好&quot;&gt;跳转&lt;/router-link&gt;\n\t\t\t\t\n&lt;!-- 跳转并携带params参数，to的对象写法 --&gt;\n&lt;router-link \n\t:to=&quot;&#123;\n\t\tname:'xiangqing',\n\t\tparams:&#123;\n\t\t   id:666,\n            title:'你好'\n\t\t&#125;\n\t&#125;&quot;\n&gt;跳转&lt;/router-link&gt;\n</code></pre>\n<blockquote>\n<p>备注：路由携带 params 参数时，若使用 to 的对象写法，则不能使用 path 配置项，必须使用 name 配置！</p>\n</blockquote>\n</li>\n<li>\n<p>接收参数：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>id</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>$route<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>title</pre></td></tr></table></figure></li>\n</ol>\n<h4 id=\"props配置\"><a class=\"anchor\" href=\"#props配置\">#</a> props 配置</h4>\n<p>** 作用：** 让路由组件更方便的收到参数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tname<span class=\"token operator\">:</span><span class=\"token string\">'xiangqing'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tpath<span class=\"token operator\">:</span><span class=\"token string\">'detail/:id'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tcomponent<span class=\"token operator\">:</span>Detail<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 第一种写法：props 值为对象，该对象中所有的 key-value 的组合最终都会通过 props 传给 Detail 组件</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// props:&#123;a:900&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token comment\">// 第二种写法：props 值为布尔值，布尔值为 true，则把路由收到的所有 params 参数通过 props 传给 Detail 组件</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token comment\">// props:true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 第三种写法：props 值为函数，该函数返回的对象中每一组 key-value 都会通过 props 传给 Detail 组件</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token function\">props</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">route</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\tid<span class=\"token operator\">:</span>route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\ttitle<span class=\"token operator\">:</span>route<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">.</span>title</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"路由跳转\"><a class=\"anchor\" href=\"#路由跳转\">#</a> 路由跳转</h3>\n<h4 id=\"通过标签跳转\"><a class=\"anchor\" href=\"#通过标签跳转\">#</a> 通过标签跳转</h4>\n<p><strong>基本方式</strong></p>\n<ol>\n<li>\n<p>配置路由规则，使用 children 配置项：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>routes<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/about'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tcomponent<span class=\"token operator\">:</span>About<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/home'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tcomponent<span class=\"token operator\">:</span>Home<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tchildren<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span> <span class=\"token comment\">// 通过 children 配置子级路由</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'news'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// 此处一定不要写：/news</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\tcomponent<span class=\"token operator\">:</span>News</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t\t\t\tcomponent<span class=\"token operator\">:</span>Message</pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\t\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr></table></figure></li>\n<li>\n<p>跳转（要写完整路径）：</p>\n<pre><code class=\"language-vue\">&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;\n</code></pre>\n</li>\n</ol>\n<p><strong>命名路由</strong></p>\n<ol>\n<li>\n<p>给路由命名：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tpath<span class=\"token operator\">:</span><span class=\"token string\">'/demo'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tcomponent<span class=\"token operator\">:</span>Demo<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tchildren<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\tcomponent<span class=\"token operator\">:</span>Test<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\tchildren<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                      name<span class=\"token operator\">:</span><span class=\"token string\">'hello'</span> <span class=\"token comment\">// 给路由命名</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t\t\t\tpath<span class=\"token operator\">:</span><span class=\"token string\">'welcome'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t\t\t\tcomponent<span class=\"token operator\">:</span>Hello<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>简化跳转：</p>\n<pre><code class=\"language-vue\">&lt;!--简化后，直接通过名字跳转 --&gt;\n&lt;router-link :to=&quot;&#123;name:'hello'&#125;&quot;&gt;跳转&lt;/router-link&gt;\n\n&lt;!--简化写法配合传递参数 --&gt;\n&lt;router-link \n\t:to=&quot;&#123;\n\t\tname:'hello',\n\t\tquery:&#123;\n\t\t   id:666,\n            title:'你好'\n\t\t&#125;\n\t&#125;&quot;\n&gt;跳转&lt;/router-link&gt;\n</code></pre>\n</li>\n</ol>\n<h4 id=\"编程式路由导航\"><a class=\"anchor\" href=\"#编程式路由导航\">#</a> 编程式路由导航</h4>\n<p><strong>作用：</strong></p>\n<p>​\t不借助 <code>&lt;router-link&gt; </code> 实现路由跳转，让路由跳转更加灵活；</p>\n<p><strong>代码实例：</strong></p>\n<p>在组件的 methods 中定义方法再输入以下操作方法</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//$router 的两个 API</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tname<span class=\"token operator\">:</span><span class=\"token string\">'xiangqing'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tparams<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t\tid<span class=\"token operator\">:</span>xxx<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\ttitle<span class=\"token operator\">:</span>xxx</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tname<span class=\"token operator\">:</span><span class=\"token string\">'xiangqing'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tparams<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t\tid<span class=\"token operator\">:</span>xxx<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t\t\ttitle<span class=\"token operator\">:</span>xxx</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">forward</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 前进</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 后退</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$router<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 可前进也可后退</span></pre></td></tr></table></figure><h3 id=\"路由守卫\"><a class=\"anchor\" href=\"#路由守卫\">#</a> 路由守卫</h3>\n<p><strong>作用：</strong></p>\n<p>​\t对路由进行权限控制。</p>\n<ul>\n<li>\n<p><strong>全局守卫</strong></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 在此之前需要对路由的 meta 属性进行设置，创新新对象的 key &#123;isAuth&#125;，值为 true or false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 全局前置守卫：初始化时执行、每次路由切换前执行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">beforeEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beforeEach'</span><span class=\"token punctuation\">,</span>to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>isAuth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 判断当前路由是否需要进行权限控制</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'school'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'atguigu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 权限控制的具体规则</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t\t<span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 放行</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'暂无权限查看'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t\t<span class=\"token comment\">// next(&#123;name:'guanyu'&#125;)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t\t<span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 放行</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 在此之前需要对路由的 meta 属性进行设置，创新新对象的 key，一般设置为 &#123;title：'xxx'&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 全局后置守卫：初始化时执行、每次路由切换后执行</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>router<span class=\"token punctuation\">.</span><span class=\"token function\">afterEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span><span class=\"token keyword\">from</span></span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'afterEach'</span><span class=\"token punctuation\">,</span>to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\t\tdocument<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> to<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>title <span class=\"token comment\">// 修改网页的 title</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\t\tdocument<span class=\"token punctuation\">.</span>title <span class=\"token operator\">=</span> <span class=\"token string\">'vue_test'</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>独显守卫</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//beforeEnter 为路由的一个属性</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">beforeEnter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">,</span>next</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'beforeEnter'</span><span class=\"token punctuation\">,</span>to<span class=\"token punctuation\">,</span>from<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>to<span class=\"token punctuation\">.</span>meta<span class=\"token punctuation\">.</span>isAuth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 判断当前路由是否需要进行权限控制</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'school'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token string\">'atguigu'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t\t<span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\t<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'暂无权限查看'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t\t<span class=\"token comment\">// next(&#123;name:'guanyu'&#125;)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\t<span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>组件内守卫</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 进入守卫：通过路由规则，进入该组件时被调用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">beforeRouteEnter</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 离开守卫：通过路由规则，离开该组件时被调用</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">beforeRouteLeave</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">to<span class=\"token punctuation\">,</span> from<span class=\"token punctuation\">,</span> next</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"缓存路由组件\"><a class=\"anchor\" href=\"#缓存路由组件\">#</a> 缓存路由组件</h3>\n<p><strong>作用：</strong></p>\n<p>​\t让不展示的路由组件保持挂载，不被销毁。</p>\n<p><strong>代码实例：</strong></p>\n<pre><code class=\"language-vue\">//XXX为组件名；XXX也可以为数组，包含多个组件名\n&lt;keep-alive include=&quot;XXX&quot;&gt; \n    &lt;router-view&gt;&lt;/router-view&gt;\n&lt;/keep-alive&gt;\n</code></pre>\n<h3 id=\"路由独有的钩子\"><a class=\"anchor\" href=\"#路由独有的钩子\">#</a> 路由独有的钩子</h3>\n<ol>\n<li><code>activated</code>  路由组件被激活时触发。</li>\n<li><code>deactivated</code>  路由组件失活时触发。</li>\n</ol>\n<p>使用方式与其它生命周期的使用方式一样。</p>\n<h3 id=\"replace属性\"><a class=\"anchor\" href=\"#replace属性\">#</a> replace 属性</h3>\n<ol>\n<li>作用：控制路由跳转时操作浏览器历史记录的模式</li>\n<li>浏览器的历史记录有两种写入方式：分别为 <code>push</code>  和 <code>replace</code> ， <code>push</code>  是追加历史记录， <code>replace</code>  是替换当前记录。路由跳转时候默认为 <code>push</code></li>\n<li>如何开启 <code>replace</code>  模式： <code>&lt;router-link replace .......&gt;News&lt;/router-link&gt;</code></li>\n</ol>\n<h3 id=\"路由的两种工作模式\"><a class=\"anchor\" href=\"#路由的两种工作模式\">#</a> 路由的两种工作模式</h3>\n<p><strong>hash 模式</strong></p>\n<p>hash 值：# 及其后面的内容就是 hash 值，hash 值不会包含在 HTTP 请求中，即：hash 值不会带给服务器。</p>\n<p>特点：</p>\n<ol>\n<li>地址中永远带着 #号，不美观 ；</li>\n<li>若以后将地址通过第三方手机 app 分享，若 app 校验严格，则地址会被标记为不合法；</li>\n<li>兼容性较好；</li>\n</ol>\n<p><strong>history 模式</strong></p>\n<p>特点：</p>\n<ol>\n<li>地址干净，美观 。</li>\n<li>兼容性和 hash 模式相比略差。</li>\n<li>应用部署上线时需要后端人员支持，解决刷新页面服务端 404 的问题。</li>\n</ol>\n<h2 id=\"webstorage\"><a class=\"anchor\" href=\"#webstorage\">#</a> webStorage</h2>\n<ol>\n<li>\n<p>存储内容大小一般支持 5MB 左右（不同浏览器可能还不一样）</p>\n</li>\n<li>\n<p>浏览器端通过 Window.sessionStorage 和 Window.localStorage 属性来实现本地存储机制。</p>\n</li>\n<li>\n<p>相关 API：</p>\n<ol>\n<li>\n<p><code>xxxxxStorage.setItem('key', 'value');</code> <br />\n 该方法接受一个键和值作为参数，会把键值对添加到存储中，如果键名存在，则更新其对应的值。</p>\n</li>\n<li>\n<p><code>xxxxxStorage.getItem('person');</code></p>\n<p>​\t\t该方法接受一个键名作为参数，返回键名对应的值。</p>\n</li>\n<li>\n<p><code>xxxxxStorage.removeItem('key');</code></p>\n<p>​\t\t该方法接受一个键名作为参数，并把该键名从存储中删除。</p>\n</li>\n<li>\n<p><code> xxxxxStorage.clear()</code></p>\n<p>​\t\t该方法会清空存储中的所有数据。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>备注：</p>\n<ol>\n<li>SessionStorage 存储的内容会随着浏览器窗口关闭而消失。</li>\n<li>LocalStorage 存储的内容，需要手动清除才会消失。</li>\n<li><code>xxxxxStorage.getItem(xxx)</code>  如果 xxx 对应的 value 获取不到，那么 getItem 的返回值是 null。</li>\n<li><code>JSON.parse(null)</code>  的结果依然是 null。</li>\n<li>一般配合深度监视使用。</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"组件的自定义事件\"><a class=\"anchor\" href=\"#组件的自定义事件\">#</a> 组件的自定义事件</h2>\n<ol>\n<li>\n<p>一种组件间通信的方式，适用于：<strong style=\"color:red\">子组件 ===&gt; 父组件</strong></p>\n</li>\n<li>\n<p>使用场景：A 是父组件，B 是子组件，B 想给 A 传数据，那么就要在 A 中给 B 绑定自定义事件（<span style=\"color:red\">事件的回调在 A 中</span>）。</p>\n</li>\n<li>\n<p>绑定自定义事件：</p>\n<ol>\n<li>\n<p>第一种方式，在父组件中： <code>&lt;Demo @atguigu=&quot;test&quot;/&gt;</code>   或  <code>&lt;Demo v-on:atguigu=&quot;test&quot;/&gt;</code></p>\n</li>\n<li>\n<p>第二种方式，在父组件中：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span>Demo ref<span class=\"token operator\">=</span><span class=\"token string\">\"demo\"</span><span class=\"token operator\">/</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>xxx<span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'atguigu'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>test<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>若想让自定义事件只能触发一次，可以使用 <code>once</code>  修饰符，或 <code>$once</code>  方法。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>触发自定义事件： <code>this.$emit('atguigu',数据)</code></p>\n</li>\n<li>\n<p>解绑自定义事件 <code>this.$off('atguigu')</code></p>\n<p>如果自定义事件有多个则参数部分放入一个数组；如果要解除所有自定义事件，还可以不传参数。</p>\n</li>\n<li>\n<p>组件上也可以绑定原生 DOM 事件，需要使用 <code>.native</code>  修饰符。</p>\n</li>\n<li>\n<p>注意：通过 <code>this.$refs.xxx.$on('atguigu',回调)</code>  绑定自定义事件时，回调<span style=\"color:red\">要么配置在 methods 中</span>，<span style=\"color:red\">要么用箭头函数</span>，否则 this 指向会出问题！</p>\n</li>\n</ol>\n<h2 id=\"全局事件总线\"><a class=\"anchor\" href=\"#全局事件总线\">#</a> 全局事件总线</h2>\n<p>全局事件总线（GlobalEventBus）是一种组件间通信的方式，适用于<span style=\"color:red\">任意组件间通信</span>。</p>\n<p><strong>全局事件总线的安装</strong>：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//main.js</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token function\">beforeCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token class-name\">Vue</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>$bus <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span> <span class=\"token comment\">// 安装全局事件总线，$bus 就是当前应用的 vm</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>使用事件总线</strong>：</p>\n<p>接收数据：A 组件想接收数据，则在 A 组件中给 $bus 绑定自定义事件，事件的<span style=\"color:red\">回调留在 A 组件自身。</span></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">methods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$bus<span class=\"token punctuation\">.</span><span class=\"token function\">$on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xxxx'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>提供数据： <code>this.$bus.$emit('xxxx',数据)</code></p>\n<p><strong>注意事项</strong>：</p>\n<p>​\t最好在 beforeDestroy 钩子中，用 $off 去解绑<span style=\"color:red\">当前组件所用到的</span>事件。</p>\n<h2 id=\"todolist案例\"><a class=\"anchor\" href=\"#todolist案例\">#</a> TodoList 案例</h2>\n<ul>\n<li>\n<p>组件化编码流程：</p>\n<ol>\n<li>\n<p>拆分静态组件：组件要按照功能点拆分，命名不要与 html 元素冲突；</p>\n</li>\n<li>\n<p>实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</p>\n<p>一个组件在用：放在组件自身即可；</p>\n<p>一些组件在用：放在他们共同的父组件上（<span style=\"color:red\">状态提升</span>）；</p>\n</li>\n<li>\n<p>实现交互：从绑定事件开始。</p>\n</li>\n</ol>\n</li>\n<li>\n<p>props 适用于：</p>\n<ul>\n<li>父组件 ==&gt; 子组件 通信</li>\n<li>子组件 ==&gt; 父组件 通信（要求父先给子一个函数）</li>\n</ul>\n</li>\n<li>\n<p>使用 v-model 时要切记：v-model 绑定的值不能是 props 传过来的值，因为 props 是不可以修改的！</p>\n</li>\n<li>\n<p>props 传过来的若是对象类型的值，修改对象中的属性时 Vue 不会报错，但不推荐这样做。</p>\n</li>\n<li>\n<p>组件间的通信规则：</p>\n<ul>\n<li>父传子：使用 <code>props</code> ；</li>\n<li>子传父：组件的自定义事件；</li>\n<li>兄弟间 / 爷孙间：全局事件总线；</li>\n</ul>\n</li>\n<li>\n<p>输入框的焦点问题：</p>\n<ul>\n<li>\n<p>失去焦点 <code>&lt;input @blur='xxx()' ref='yyy'&gt;</code></p>\n</li>\n<li>\n<p>获得焦点</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">xxx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">$nextTick</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$refs<span class=\"token punctuation\">.</span>inputTitle<span class=\"token punctuation\">.</span><span class=\"token function\">focus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><strong>nextTick</strong></p>\n<ul>\n<li>语法： <code>this.$nextTick(回调函数)</code></li>\n<li>作用：在下一次 DOM 更新结束后执行其指定的回调，它也是声明周期的钩子之一。</li>\n<li>什么时候用：当改变数据后，要基于更新后的新 DOM 进行某些操作时，要在 nextTick 所指定的回调函数中执行。</li>\n</ul>\n</li>\n</ul>\n<p><strong>代码实例：</strong></p>\n<p><code>App.vue</code></p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div id=&quot;root&quot;&gt;\n    &lt;div class=&quot;todo-container&quot;&gt;\n      &lt;div class=&quot;todo-wrap&quot;&gt;\n        &lt;MyHeader :receive=&quot;receive&quot; /&gt;\n        &lt;MyList\n          :todos=&quot;todos&quot;\n          :checkTodo=&quot;checkTodo&quot;\n          :deleteTodo=&quot;deleteTode&quot;\n        /&gt;\n        &lt;MyFooter\n          :todos=&quot;todos&quot;\n          :checkAllTodo=&quot;checkAllTodo&quot;\n          :clearAllTodo=&quot;clearAllTodo&quot;\n        /&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport MyHeader from &quot;./components/MyHeader.vue&quot;;\nimport MyFooter from &quot;./components/MyFooter.vue&quot;;\nimport MyList from &quot;./components/MyList.vue&quot;;\n\nexport default &#123;\n  name: &quot;App&quot;,\n  components: &#123;\n    MyHeader,\n    MyFooter,\n    MyList,\n  &#125;,\n  //浏览器存储读取\n  data() &#123;\n    return &#123;\n      todos: JSON.parse(localStorage.getItem(&quot;todos&quot;)) || [],\n    &#125;;\n  &#125;,\n  //深度监视与浏览器存储\n  watch: &#123;\n    todos: &#123;\n      deep: true,\n      handler(value) &#123;\n        localStorage.setItem(&quot;todos&quot;, JSON.stringify(value));\n      &#125;,\n    &#125;,\n  &#125;,\n  methods: &#123;\n    receive(todoObj) &#123;\n      this.todos.unshift(todoObj);\n    &#125;,\n    checkTodo(id) &#123;\n      this.todos.forEach((todo) =&gt; &#123;\n        if (todo.id === id) todo.done = !todo.done;\n      &#125;);\n    &#125;,\n    deleteTode(id) &#123;\n      this.todos = this.todos.filter((todo) =&gt; &#123;\n        return todo.id !== id;\n      &#125;);\n    &#125;,\n    checkAllTodo(done) &#123;\n      this.todos.forEach((todo) =&gt; (todo.done = done));\n    &#125;,\n    clearAllTodo() &#123;\n      this.todos = this.todos.filter((todo) =&gt; &#123;\n        return !todo.done;\n      &#125;);\n    &#125;,\n  &#125;,\n&#125;;\n&lt;/script&gt;\n\n&lt;style&gt;\n/*base*/\nbody &#123;\n  background: #fff;\n&#125;\n\n.btn &#123;\n  display: inline-block;\n  padding: 4px 12px;\n  margin-bottom: 0;\n  font-size: 14px;\n  line-height: 20px;\n  text-align: center;\n  vertical-align: middle;\n  cursor: pointer;\n  box-shadow: inset 0 1px 0 rgba(255, 255, 255, 0.2),\n    0 1px 2px rgba(0, 0, 0, 0.05);\n  border-radius: 4px;\n&#125;\n\n.btn-danger &#123;\n  color: #fff;\n  background-color: #da4f49;\n  border: 1px solid #bd362f;\n&#125;\n\n.btn-danger:hover &#123;\n  color: #fff;\n  background-color: #bd362f;\n&#125;\n\n.btn:focus &#123;\n  outline: none;\n&#125;\n\n.todo-container &#123;\n  width: 600px;\n  margin: 0 auto;\n&#125;\n.todo-container .todo-wrap &#123;\n  padding: 10px;\n  border: 1px solid #ddd;\n  border-radius: 5px;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<p><code>MyHeader.vue</code></p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;todo-header&quot;&gt;\n    &lt;input\n      type=&quot;text&quot;\n      placeholder=&quot;请输入你的任务名称，按回车键确认&quot;\n      @keyup.enter=&quot;add&quot;\n      v-model=&quot;title&quot;\n    /&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport &#123; nanoid &#125; from &quot;nanoid&quot;;\nexport default &#123;\n  name: &quot;MyHooter&quot;,\n  props: [&quot;receive&quot;],\n  data() &#123;\n    return &#123;\n      title: &quot;&quot;,\n    &#125;;\n  &#125;,\n  methods: &#123;\n    add() &#123;\n      if (!this.title.trim()) &#123;\n        return alert(&quot;输入不能为空&quot;);\n      &#125;\n      const todoObj = &#123;\n        id: nanoid(),\n        title: this.title,\n        done: false,\n      &#125;;\n      this.receive(todoObj);\n      this.title = &quot;&quot;;\n    &#125;,\n  &#125;,\n&#125;;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n/*header*/\n.todo-header input &#123;\n  width: 560px;\n  height: 28px;\n  font-size: 14px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n  padding: 4px 7px;\n&#125;\n\n.todo-header input:focus &#123;\n  outline: none;\n  border-color: rgba(82, 168, 236, 0.8);\n  box-shadow: inset 0 1px 1px rgba(0, 0, 0, 0.075),\n    0 0 8px rgba(82, 168, 236, 0.6);\n&#125;\n&lt;/style&gt;\n</code></pre>\n<p><code>MyList.vue</code></p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;ul class=&quot;todo-main&quot;&gt;\n    &lt;MyItem\n      v-for=&quot;todoObj in todos&quot;\n      :key=&quot;todoObj.id&quot;\n      :todo=&quot;todoObj&quot;\n      :checkTodo=&quot;checkTodo&quot;\n      :deleteTodo=&quot;deleteTodo&quot;\n    /&gt;\n  &lt;/ul&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nimport MyItem from &quot;./MyItem.vue&quot;;\nexport default &#123;\n  name: &quot;MyList&quot;,\n  components: &#123;\n    MyItem,\n  &#125;,\n  props: [&quot;todos&quot;, &quot;checkTodo&quot;, &quot;deleteTodo&quot;],\n&#125;;\n&lt;/script&gt;\n\n\n&lt;style scoped&gt;\n/*main*/\n.todo-main &#123;\n  margin-left: 0px;\n  border: 1px solid #ddd;\n  border-radius: 2px;\n  padding: 0px;\n&#125;\n\n.todo-empty &#123;\n  height: 40px;\n  line-height: 40px;\n  border: 1px solid #ddd;\n  border-radius: 2px;\n  padding-left: 5px;\n  margin-top: 10px;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<p><code>MyItem.vue</code></p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;li&gt;\n    &lt;label&gt;\n      &lt;input\n        type=&quot;checkbox&quot;\n        :checked=&quot;todo.done&quot;\n        @change=&quot;handlecheck(todo.id)&quot;\n      /&gt;\n      &lt;!-- 修改了props，违背了原则，但可以完成功能 --&gt;\n      &lt;!-- &lt;input type=&quot;checkbox&quot; v-model=&quot;todo.done&quot; /&gt; --&gt;\n      &lt;span&gt;&#123;&#123; todo.title &#125;&#125;&lt;/span&gt;\n    &lt;/label&gt;\n    &lt;button class=&quot;btn btn-danger&quot; @click=&quot;del(todo.id)&quot;&gt;删除&lt;/button&gt;\n  &lt;/li&gt;\n&lt;/template&gt;\n\n&lt;script scoped&gt;\nexport default &#123;\n  name: &quot;MyItem&quot;,\n  props: [&quot;todo&quot;, &quot;checkTodo&quot;, &quot;deleteTodo&quot;],\n  methods: &#123;\n    handlecheck(id) &#123;\n      this.checkTodo(id);\n    &#125;,\n    del(id) &#123;\n      if (confirm(&quot;确定删除吗&quot;)) &#123;\n        this.deleteTodo(id);\n      &#125;\n    &#125;,\n  &#125;,\n&#125;;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n/*item*/\nli &#123;\n  list-style: none;\n  height: 36px;\n  line-height: 36px;\n  padding: 0 5px;\n  border-bottom: 1px solid #ddd;\n&#125;\n\nli label &#123;\n  float: left;\n  cursor: pointer;\n&#125;\n\nli label li input &#123;\n  vertical-align: middle;\n  margin-right: 6px;\n  position: relative;\n  top: -1px;\n&#125;\n\nli button &#123;\n  float: right;\n  display: none;\n  margin-top: 3px;\n&#125;\n\nli:before &#123;\n  content: initial;\n&#125;\n\nli:last-child &#123;\n  border-bottom: none;\n&#125;\nli:hover &#123;\n  background-color: #ddd;\n&#125;\nli:hover button &#123;\n  display: block;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<p><code>MyFooter.vue</code></p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n  &lt;div class=&quot;todo-footer&quot; v-show=&quot;todos.length&quot;&gt;\n    &lt;label&gt;\n      &lt;input type=&quot;checkbox&quot; :checked=&quot;isAll&quot; @click=&quot;checkAll&quot; /&gt;\n      &lt;!-- &lt;input type=&quot;checkbox&quot; v-model=&quot;isAll&quot; /&gt; --&gt;\n    &lt;/label&gt;\n    &lt;span&gt;\n      &lt;span&gt;已完成&#123;&#123; doneTatal &#125;&#125;&lt;/span&gt; / 全部&#123;&#123; todos.length &#125;&#125;\n    &lt;/span&gt;\n    &lt;button class=&quot;btn btn-danger&quot; @click=&quot;clearAll&quot;&gt;清除已完成任务&lt;/button&gt;\n  &lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\nexport default &#123;\n  name: &quot;MyFooter&quot;,\n  props: [&quot;todos&quot;, &quot;checkAllTodo&quot;, &quot;clearAllTodo&quot;],\n  computed: &#123;\n    doneTatal() &#123;\n      // this.todos.reduce((pre, currrnt) =&gt; &#123;\n      //   return pre + (currrnt.done ? 1 : 0);\n      // &#125;, 0);\n      //简写形式\n      return this.todos.reduce(\n        (pre, current) =&gt; pre + (current.done ? 1 : 0),\n        0\n      );\n    &#125;,\n    //v-model的回调方法（计算属性的完整写法）\n    // isAll: &#123;\n    //   get() &#123;\n    //     return this.doneTatal === this.todos.length &amp;&amp; this.todos.length !== 0;\n    //   &#125;,\n    //   set(value) &#123;\n    //     this.checkAllTodo(value);\n    //   &#125;,\n    // &#125;,\n    isAll() &#123;\n      return this.doneTatal === this.todos.length &amp;&amp; this.todos.length !== 0;\n    &#125;,\n  &#125;,\n  methods: &#123;\n    checkAll(e) &#123;\n      this.checkAllTodo(e.target.checked); //e.target.value也行\n    &#125;,\n    clearAll() &#123;\n      this.clearAllTodo();\n    &#125;,\n  &#125;,\n&#125;;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n/*footer*/\n.todo-footer &#123;\n  height: 40px;\n  line-height: 40px;\n  padding-left: 6px;\n  margin-top: 5px;\n&#125;\n\n.todo-footer label &#123;\n  display: inline-block;\n  margin-right: 20px;\n  cursor: pointer;\n&#125;\n\n.todo-footer label input &#123;\n  position: relative;\n  top: -1px;\n  vertical-align: middle;\n  margin-right: 5px;\n&#125;\n\n.todo-footer button &#123;\n  float: right;\n  margin-top: 5px;\n&#125;\n&lt;/style&gt;\n</code></pre>\n<h2 id=\"消息订阅与发布\"><a class=\"anchor\" href=\"#消息订阅与发布\">#</a> 消息订阅与发布</h2>\n<p>​\t消息的订阅与发布（pubsub）是一种组件间通信的方式，适用于<span style=\"color:red\">任意组件间通信</span>。</p>\n<p><strong>使用步骤：</strong></p>\n<ol>\n<li>\n<p>安装 pubsub： <code>npm i pubsub-js</code></p>\n</li>\n<li>\n<p>引入:  <code>import pubsub from 'pubsub-js'</code></p>\n</li>\n<li>\n<p>接收数据：A 组件想接收数据，则在 A 组件中订阅消息，订阅的<span style=\"color:red\">回调留在 A 组件自身；</span></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">methods</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token operator\">...</span><span class=\"token operator\">...</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token operator\">...</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">mounted</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>pid <span class=\"token operator\">=</span> pubsub<span class=\"token punctuation\">.</span><span class=\"token function\">subscribe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'xxx'</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>demo<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 订阅消息</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>提供数据： <code>pubsub.publish('xxx',数据)</code> ；</p>\n</li>\n<li>\n<p>最好在 beforeDestroy 钩子中，用 <code>PubSub.unsubscribe(pid)</code>  去取消订阅。</p>\n</li>\n</ol>\n<h2 id=\"过度与动画\"><a class=\"anchor\" href=\"#过度与动画\">#</a> 过度与动画</h2>\n<h3 id=\"vue封装的过度与动画\"><a class=\"anchor\" href=\"#vue封装的过度与动画\">#</a> Vue 封装的过度与动画</h3>\n<p><strong>功能：</strong></p>\n<p>​\t在插入、更新或移除 DOM 元素时，在合适的时候给元素添加样式类名。</p>\n<p><strong>写法：</strong></p>\n<ul>\n<li>\n<p>​\t元素进入的样式：</p>\n<ol>\n<li>v-enter：进入的起点</li>\n<li>v-enter-active：进入过程中</li>\n<li>v-enter-to：进入的终点</li>\n</ol>\n</li>\n<li>\n<p>元素离开的样式：</p>\n<ol>\n<li>v-leave：离开的起点</li>\n<li>v-leave-active：离开过程中</li>\n<li>v-leave-to：离开的终点</li>\n</ol>\n</li>\n<li>\n<p>过渡代码实例：</p>\n<pre><code class=\"language-vue\">&lt;style scoped&gt;\n\th1&#123;\n\t\tbackground-color: orange;\n\t&#125;\n\t/* 进入的起点、离开的终点 */\n\t.hello-enter,.hello-leave-to&#123;\n\t\ttransform: translateX(-100%);\n\t&#125;\n\t.hello-enter-active,.hello-leave-active&#123;\n\t\ttransition: 0.5s linear;\n\t&#125;\n\t/* 进入的终点、离开的起点 */\n\t.hello-enter-to,.hello-leave&#123;\n\t\ttransform: translateX(0);\n\t&#125;\n&lt;/style&gt;\n</code></pre>\n</li>\n<li>\n<p>动画代码实例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">.</span>bounce<span class=\"token operator\">-</span>enter<span class=\"token operator\">-</span>active <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    animation<span class=\"token operator\">:</span> bounce<span class=\"token operator\">-</span><span class=\"token keyword\">in</span> <span class=\"token number\">.5</span>s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">.</span>bounce<span class=\"token operator\">-</span>leave<span class=\"token operator\">-</span>active <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    animation<span class=\"token operator\">:</span> bounce<span class=\"token operator\">-</span><span class=\"token keyword\">in</span> <span class=\"token number\">.5</span>s reverse<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>@keyframes bounce<span class=\"token operator\">-</span><span class=\"token keyword\">in</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token number\">0</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        transform<span class=\"token operator\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token number\">50</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        transform<span class=\"token operator\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token number\">100</span><span class=\"token operator\">%</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        transform<span class=\"token operator\">:</span> <span class=\"token function\">scale</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 <code>&lt;transition&gt;</code>  包裹要过度或动画的元素，并配置 name 属性：</p>\n<pre><code class=\"language-vue\">&lt;transition name=&quot;hello&quot;&gt;\n\t&lt;h1 v-show=&quot;isShow&quot;&gt;你好啊！&lt;/h1&gt;\n&lt;/transition&gt;\n</code></pre>\n<p>备注：若有多个元素需要过度，则需要使用： <code>&lt;transition-group&gt;</code> ，且每个元素都要指定 <code>key</code>  值。</p>\n</li>\n</ul>\n<h3 id=\"第三方库的使用\"><a class=\"anchor\" href=\"#第三方库的使用\">#</a> 第三方库的使用</h3>\n<p>常用的第三方库动画的地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubnBtanMuY29tL3BhY2thZ2UvYW5pbWF0ZS5jc3M=\">animate.css - npm (npmjs.com)</span></p>\n<p>代码实例：</p>\n<pre><code class=\"language-vue\">&lt;template&gt;\n\t&lt;div&gt;\n\t\t&lt;button @click=&quot;isShow = !isShow&quot;&gt;显示/隐藏&lt;/button&gt;\n\t\t&lt;transition-group \n\t\t\tappear\n\t\t\tname=&quot;animate__animated animate__bounce&quot; \n\t\t\tenter-active-class=&quot;animate__swing&quot;\n\t\t\tleave-active-class=&quot;animate__backOutUp&quot;\n\t\t&gt;\n\t\t\t&lt;h1 v-show=&quot;!isShow&quot; key=&quot;1&quot;&gt;你好啊！&lt;/h1&gt;\n\t\t\t&lt;h1 v-show=&quot;isShow&quot; key=&quot;2&quot;&gt;尚硅谷！&lt;/h1&gt;\n\t\t&lt;/transition-group&gt;\n\t&lt;/div&gt;\n&lt;/template&gt;\n\n&lt;script&gt;\n\timport 'animate.css'\n\texport default &#123;\n\t\tname:'Test',\n\t\tdata() &#123;\n\t\t\treturn &#123;\n\t\t\t\tisShow:true\n\t\t\t&#125;\n\t\t&#125;,\n\t&#125;\n&lt;/script&gt;\n\n&lt;style scoped&gt;\n\th1&#123;\n\t\tbackground-color: orange;\n\t&#125;\n&lt;/style&gt;\n</code></pre>\n<h2 id=\"vue脚手架配置代理\"><a class=\"anchor\" href=\"#vue脚手架配置代理\">#</a> vue 脚手架配置代理</h2>\n<p><strong>方法一</strong></p>\n<p>​\t在 vue.config.js 中添加如下配置：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>devServer<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  proxy<span class=\"token operator\">:</span><span class=\"token string\">\"http://localhost:5000\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>说明：</p>\n<ol>\n<li>优点：配置简单，请求资源时直接发给前端（8080）即可。</li>\n<li>缺点：不能配置多个代理，不能灵活的控制请求是否走代理。</li>\n<li>工作方式：若按照上述配置代理，当请求了前端不存在的资源时，那么该请求会转发给服务器 （优先匹配前端资源）</li>\n</ol>\n<p><strong>方法二</strong></p>\n<p>​\t编写 vue.config.js 配置具体代理规则：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>module<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tdevServer<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      proxy<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token string\">'/api1'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 匹配所有以 '/api1' 开头的请求路径</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        target<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:5000'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 代理目标的基础路径</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        pathRewrite<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'^/api1'</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token string\">'/api2'</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 匹配所有以 '/api2' 开头的请求路径</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        target<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:5001'</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 代理目标的基础路径</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        changeOrigin<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        pathRewrite<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'^/api2'</span><span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">/*</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>   changeOrigin 设置为 true 时，服务器收到的请求头中的 host 为：localhost:5000</pre></td></tr><tr><td data-num=\"19\"></td><td><pre>   changeOrigin 设置为 false 时，服务器收到的请求头中的 host 为：localhost:8080</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>   changeOrigin 默认值为 true</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>*/</span></pre></td></tr></table></figure><p>说明：</p>\n<ol>\n<li>优点：可以配置多个代理，且可以灵活的控制请求是否走代理。</li>\n<li>缺点：配置略微繁琐，请求资源时必须加前缀。</li>\n</ol>\n<h2 id=\"问题与解决方案\"><a class=\"anchor\" href=\"#问题与解决方案\">#</a> 问题与解决方案</h2>\n<p><strong>Vue 的面试题</strong></p>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxODYzNDc0NA==\">前端面试题 -- Vue - SegmentFault 思否</span></li>\n</ol>\n<p><strong>报错</strong></p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2t3YW1lMjExL2FydGljbGUvZGV0YWlscy8xMjAzMzIxMTQ=\">Vue 报错：component has been registered but not used，即定义好的组件未被使用</span></li>\n<li></li>\n</ul>\n",
            "tags": [
                "前端",
                "前端"
            ]
        },
        {
            "id": "https://nc3021.github.io/2021/12/08/front-end/JavaScript/",
            "url": "https://nc3021.github.io/2021/12/08/front-end/JavaScript/",
            "title": "JavaScript学习",
            "date_published": "2021-12-08T11:17:11.764Z",
            "content_html": "<h1 id=\"javascript学习\"><a class=\"anchor\" href=\"#javascript学习\">#</a> JavaScript 学习</h1>\n<h2 id=\"html中的javascript\"><a class=\"anchor\" href=\"#html中的javascript\">#</a> HTML 中的 JavaScript</h2>\n<h3 id=\"script元素\"><a class=\"anchor\" href=\"#script元素\">#</a> &lt;script&gt; 元素</h3>\n<p>在 <code>&lt;script&gt;</code>  元素中的代码或外部 JavaScript 文件被解释完之前，页面的其余内容不会被加载，也不会被显示；</p>\n<p>如果同时存在 <code>&lt;script&gt;</code>  元素中的代码和外部 JavaScript 文件时，浏览器只会下载并执行脚本文件，忽略行内代码；</p>\n<p>现代 Web 应用程序一般将 JavaScript 的引用放在 <code>&lt;body&gt;</code>  元素中的页面内容后面；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211123214438.png\" alt=\"\" /></p>\n<h4 id=\"延迟脚本\"><a class=\"anchor\" href=\"#延迟脚本\">#</a> 延迟脚本</h4>\n<p><code>defer</code>  属性：表明脚本在执行时不会影响页面的构造，即脚本会被延迟到整个页面都解析完毕后再运行；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211123214900.png\" alt=\"\" /></p>\n<h3 id=\"输入输出\"><a class=\"anchor\" href=\"#输入输出\">#</a> 输入输出</h3>\n<h4 id=\"输出\"><a class=\"anchor\" href=\"#输出\">#</a> 输出</h4>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211120154248.png\" alt=\"\" /></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是一个输入框'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是一个警示框'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'这是控制台打印输出的'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h4 id=\"输入\"><a class=\"anchor\" href=\"#输入\">#</a> 输入</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token function\">promopt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入你的年龄'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"语言基础\"><a class=\"anchor\" href=\"#语言基础\">#</a> 语言基础</h2>\n<h3 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211123183451.png\" alt=\"\" /></p>\n<h3 id=\"typeof操作符\"><a class=\"anchor\" href=\"#typeof操作符\">#</a> typeof 操作符</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211124155612.png\" alt=\"\" /></p>\n<h3 id=\"number型\"><a class=\"anchor\" href=\"#number型\">#</a> Number 型</h3>\n<p>数字型进制：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211123185430.png\" alt=\"\" /></p>\n<p>数值型范围：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211123185459.png\" alt=\"\" /></p>\n<p>数值型的三个特殊值：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211123185516.png\" alt=\"\" /></p>\n<p>isNaN（）函数：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211123185619.png\" alt=\"\" /></p>\n<p>NaN:</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211124161440.png\" alt=\"\" /></p>\n<p>浮点数：<img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211124161136.png\" alt=\"\" /></p>\n<p>永远不要测试某个特定的浮点数值；</p>\n<h3 id=\"string型\"><a class=\"anchor\" href=\"#string型\">#</a> String 型</h3>\n<p>单引号或者双引号，如果嵌套就外双内单或内双外单；</p>\n<p>字符串转义符：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211123190141.png\" alt=\"\" /></p>\n<p>字符串长度：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> txt <span class=\"token operator\">=</span><span class=\"token string\">'abcdefg'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>字符串拼接：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211123191254.png\" alt=\"\" /></p>\n<p>toString():</p>\n<p>数值、布尔值、对象和字符串值（没错，每个字符串也都有一个 toString () 方法，该方法返回字符串的一个副本）都有 toString () 方法。但 null 和 undefined 值没有这个方法；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211124174400.png\" alt=\"\" /></p>\n<h3 id=\"boolean型\"><a class=\"anchor\" href=\"#boolean型\">#</a> Boolean 型</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211123192929.png\" alt=\"\" /></p>\n<p>true 和 false 是区分大小写的，故必须小写；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211124160713.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211124160738.png\" alt=\"\" /></p>\n<h3 id=\"undefined与null\"><a class=\"anchor\" href=\"#undefined与null\">#</a> undefined 与 null</h3>\n<p>如果一个变量声明未赋值，就是 undefined（未定义数据类型）；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211123193344.png\" alt=\"\" /></p>\n<p>一个声明变量给 null 值，里面存的值为空；逻辑上讲，null 值表示一个空对象指针；</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> car <span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> car<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//\"object\"</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211123193352.png\" alt=\"\" /></p>\n<h3 id=\"symbol型\"><a class=\"anchor\" href=\"#symbol型\">#</a> Symbol 型</h3>\n<p>symbol 的值是通过 Symbol () 函数生成，每一个 symbol 的值都是唯一的，并且 symbol 类型的值可以作为对象的属性标识符使用，这也是 symbol 类型设计的目的。<br />\n所以现在对象属性名可以为两种类型：一种就是原本的字符串类型，一种即为新增的 symbol 类型。凡是使用 symbol 命名的属性都是独一无二的，保证不与其他属性名产生冲突。</p>\n<h3 id=\"object型\"><a class=\"anchor\" href=\"#object型\">#</a> Object 型</h3>\n<p>对象（Object）其实就是一组数据和功能的集合。对象可以通过执行 new 操作符后跟要创建 的对象类型的名称来创建。而创建 Object 类型的实例并为其添加属性和（或）方法，就可以创建自定义对象；</p>\n<h3 id=\"数值转换\"><a class=\"anchor\" href=\"#数值转换\">#</a> 数值转换</h3>\n<p>常见的类型转换有：</p>\n<ul>\n<li>强制转换（显示转换）</li>\n<li>自动转换（隐式转换）</li>\n</ul>\n<p><strong> <code>显示转换：</code> </strong></p>\n<p><strong>Number</strong>():</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220116142916.png\" alt=\"\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">324</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 324</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 字符串：如果可以被解析为数值，则转换为相应的数值</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'324'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 324</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 字符串：如果不可以被解析为数值，返回 NaN</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'324abc'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 空字符串转为 0</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 布尔值：true 转成 1，false 转成 0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//undefined：转成 NaN</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//null：转成 0</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 对象：通常转换成 NaN (除了只包含单个数值的数组)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span></pre></td></tr></table></figure><blockquote>\n<p><code>Number</code>  转换的时候是很严格的，只要有一个字符无法转成数值，整个字符串就会被转为 <code>NaN</code></p>\n</blockquote>\n<p><strong>parseInt</strong>()</p>\n<p><code>parseInt</code>  相比 <code>Number</code> ，就没那么严格了， <code>parseInt</code>  函数逐个解析字符，遇到不能转换的字符就停下来；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'32a3'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">//32</span></pre></td></tr></table></figure><p>不能转换出小数；</p>\n<p><strong>parseFloat</strong>():</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211124174032.png\" alt=\"\" /></p>\n<p><strong>String</strong>()</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220116143304.png\" alt=\"\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数值：转为相应的字符串</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 字符串：转换后还是原来的值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"a\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 布尔值：true 转为字符串 \"true\"，false 转为字符串 \"false\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"true\"</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//undefined：转为字符串 \"undefined\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"undefined\"</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">//null：转为字符串 \"null\"</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"null\"</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 对象</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"[object Object]\"</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token function\">String</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \"1,2,3\"</span></pre></td></tr></table></figure><p><strong>Boolean()</strong></p>\n<p>可以将任意类型的值转为布尔值，转换规则如下：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220116143424.png\" alt=\"\" /></p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><p><strong> <code>隐式转换：</code> </strong></p>\n<p>我们这里可以归纳为两种情况发生隐式转换的场景：</p>\n<ul>\n<li>比较运算（ <code>==</code> 、 <code>!=</code> 、 <code>&gt;</code> 、 <code>&lt;</code> ）、 <code>if</code> 、 <code>while</code>  需要布尔值地方</li>\n<li>算术运算（ <code>+</code> 、 <code>-</code> 、 <code>*</code> 、 <code>/</code> 、 <code>%</code> ）</li>\n</ul>\n<h3 id=\"字符串操作方法\"><a class=\"anchor\" href=\"#字符串操作方法\">#</a> 字符串操作方法</h3>\n<p>提取字符串：</p>\n<p><code>slice()</code>   <code>substr()</code>   <code>substring</code></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211125144400.png\" alt=\"\" /></p>\n<p>查看字符串位置：</p>\n<p><code>indexOf</code>   <code>lastIndexOf()</code></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211125144909.png\" alt=\"\" /></p>\n<p>trim()：</p>\n<p>这个方法会创建字符串的一个副本，删除前、后所有空格符，再返回结果；另外，trimLeft () 和 trimRight () 方法分别用于从字符串开始和末尾清理空格符。</p>\n<p>repeat():</p>\n<p>这个方法接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果。</p>\n<p>padStart () 与 padEnd ()：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211125145704.png\" alt=\"\" /></p>\n<p>大小写转换：</p>\n<p><code>toLowerCase</code>   <code>toUpperCase</code></p>\n<p>将字符串全部转换为小写（大写）；</p>\n<p>字符串替换：</p>\n<p><code>replace()</code></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211125150414.png\" alt=\"\" /></p>\n<p>localeCompare():</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211125150626.png\" alt=\"\" /></p>\n<h3 id=\"math\"><a class=\"anchor\" href=\"#math\">#</a> Math</h3>\n<p>Math 的基本属性：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211125151221.png\" alt=\"\" /></p>\n<p>求最大最小值：</p>\n<p><code>min()</code>   <code>max()</code></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211125151343.png\" alt=\"\" /></p>\n<p>舍入方法：</p>\n<p><code>round()</code>   <code>fround()</code>   <code>ceil()</code>   <code>floor()</code></p>\n<p>round (): 执行四舍五入；</p>\n<p>fround (): 返回数值最接近的单精度（32 位）浮点值；</p>\n<p>ceil (): 向上舍入最接近的整数；</p>\n<p>floor (): 向下舍入最接近的整数；</p>\n<p>随机数：</p>\n<p><code>random()</code></p>\n<p>该方法生成一个在 [0,1) 范围内的随机数；</p>\n<p>通常使用方法：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">selectFrom</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">lowerValue<span class=\"token punctuation\">,</span>upperValue</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> choices <span class=\"token operator\">=</span> upperValue<span class=\"token operator\">-</span>lowerValue<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>choices<span class=\"token operator\">+</span>lowerValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>其它数学方法：<img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211125152535.png\" alt=\"\" /></p>\n<h3 id=\"array\"><a class=\"anchor\" href=\"#array\">#</a> Array</h3>\n<p><code>from()</code></p>\n<p>Array.from () 的第一个参数是一个类数组对象，即任何可迭代的结构，或者有一个 length 属性和可索引元素的结构；</p>\n<p>Array.from () 还接收第二个可选的映射函数参数，这个函数可以直接增强新数组的值；</p>\n<p><code>fill()</code></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211125155931.png\" alt=\"\" /></p>\n<p><code>copyWithin()</code></p>\n<p><code>toString()</code></p>\n<p><code>push()</code></p>\n<p>该方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度。</p>\n<p><code>pop()</code></p>\n<p>该方法则用于删除数组的最后一项，同时减少数组的 length 值，返回被删除的项。</p>\n<p><code>shift()</code></p>\n<p>该方法它会删除数组的第一项并返回它，然后数组长度减 1。</p>\n<p><code>unshift()</code></p>\n<p>该方法会在数组开头添加任意多个值，然后返回新的数组长度。</p>\n<p><code>reverse()</code></p>\n<p>该方法将数组元素反向排序；</p>\n<p><code>sort()</code></p>\n<p>一般使用该方法时接收一个比较函数；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211125161333.png\" alt=\"\" /></p>\n<p><code>slice()</code></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211125161705.png\" alt=\"\" /></p>\n<p>如果参数有负数，则改为数组长度加上负值。</p>\n<p><code>splice()</code></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211125161929.png\" alt=\"\" /></p>\n<p>定型数组：</p>\n<h3 id=\"map\"><a class=\"anchor\" href=\"#map\">#</a> Map</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211125162502.png\" alt=\"\" /></p>\n<p><code>set()</code>   <code>get()</code>   <code>has()</code>   <code>delete()</code>   <code>clear()</code>   <code>size</code></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211125162651.png\" alt=\"\" /></p>\n<p>与 Object 只能使用数值、字符串或符号作为键不同，Map 可以使用任何 JavaScript 数据类型作为键。</p>\n<p>弱映射 (weakmap):</p>\n<h2 id=\"字符串数组方法\"><a class=\"anchor\" href=\"#字符串数组方法\">#</a> 字符串数组方法</h2>\n<h3 id=\"数组\"><a class=\"anchor\" href=\"#数组\">#</a> 数组</h3>\n<p><strong>改变原数组的方法：</strong></p>\n<h4 id=\"push\"><a class=\"anchor\" href=\"#push\">#</a> push</h4>\n<p>​\tpush () 方法可向数组的末尾添加一个或多个元素，并<strong>返回新的长度</strong>；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> ary<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> res<span class=\"token operator\">=</span>ary<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//ary=[10,20,30,40,50]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//res=5</span></pre></td></tr></table></figure><h4 id=\"unshift\"><a class=\"anchor\" href=\"#unshift\">#</a> unshift</h4>\n<p>​\tunshift () 方法可向数组的开头添加一个或更多元素，并<strong>返回新的长度</strong>；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> ary<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token number\">40</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> res<span class=\"token operator\">=</span>ary<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token number\">50</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//ary=[50,10,20,30,40]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//res=5</span></pre></td></tr></table></figure><h4 id=\"pop\"><a class=\"anchor\" href=\"#pop\">#</a> pop</h4>\n<p>​\tpop () 用于删除并返回最后一个元素，尾部删除，<strong>返回被删除的元素</strong>，改变原数组；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><h4 id=\"shift\"><a class=\"anchor\" href=\"#shift\">#</a> shift</h4>\n<p>​\tshift () 用于删除并返回首个元素，删除首部元素，<strong>返回被删元素</strong>，改变原数组；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [2,3]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><h4 id=\"sort\"><a class=\"anchor\" href=\"#sort\">#</a> sort</h4>\n<p>按 ascii 码排序，<strong>改变原数组，返回排序后的数组</strong>；也可以接收一个比较函数；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'d'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// ['a','b','c','d']</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// ['a','b','c','d']</span></pre></td></tr></table></figure><h4 id=\"splice\"><a class=\"anchor\" href=\"#splice\">#</a> splice</h4>\n<p>​\tsplice () 方法用于添加或删除数组中的元素；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">,</span>howmany<span class=\"token punctuation\">,</span>item1<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">,</span>itemX<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 如果从 arrayObject 中删除了元素，则返回的是含有被删除的元素的数组，如果只增加了元素，则返回空数组</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><em>index</em></td>\n<td style=\"text-align:left\">必需。规定从何处添加 / 删除元素。 该参数是开始插入和（或）删除的数组元素的下标，必须是数字。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>howmany</em></td>\n<td style=\"text-align:left\">可选。规定应该删除多少元素。必须是数字，但可以是 &quot;0&quot;。 如果未规定此参数，则删除从 index 开始到原数组结尾的所有元素。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><em>item1</em>, ..., <em>itemX</em></td>\n<td style=\"text-align:left\">可选。要添加到数组的新元素</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"reverse\"><a class=\"anchor\" href=\"#reverse\">#</a> reverse</h4>\n<p>reverse () 方法用于颠倒数组中元素的顺序，<strong>返回的是颠倒后的数组，会改变原数组</strong>。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a  <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [6,7,2,3,1]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [6,7,2,3,1]</span></pre></td></tr></table></figure><p><strong>不改变原数组的方法：</strong></p>\n<h4 id=\"foreach\"><a class=\"anchor\" href=\"#foreach\">#</a> forEach</h4>\n<p>遍历整个数组，中途不能中断，<strong>没有返回值</strong>；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>     copy<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>copy<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"slice\"><a class=\"anchor\" href=\"#slice\">#</a> slice</h4>\n<p>​\tslice (startIndex,endIndex) 返回从 startIndex 开始 (包括)，到 endIndex (不包括) 之间的原属组成的数组，<strong>返回新数组，不改变原数组</strong>；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 不填参数则表示剪切整个数组  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3] </span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3]    </span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">===</span>c<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//false// 注意 a !== c </span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 负数表示从后往前数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>   </pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token comment\">// []   从左向右截取，所以说为 []</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre> </pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">var</span> e <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [3]</span></pre></td></tr></table></figure><h4 id=\"join\"><a class=\"anchor\" href=\"#join\">#</a> join</h4>\n<p>join () 方法用来将数组转换为字符串，<strong>不改变原数组，返回转换后的字符串</strong>；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 1,2,3,4,5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [1,2,3,4,5]</span></pre></td></tr></table></figure><h4 id=\"filter\"><a class=\"anchor\" href=\"#filter\">#</a> filter</h4>\n<p>filter () 方法<strong>返回数组中满足条件的元素组成的新数组，原数组不变</strong>，参数为一个方法， <code>filter()</code>  把传入的函数依次作用于每个元素，然后根据返回值是 <code>true</code>  还是 <code>false</code>  决定保留还是丢弃该元素；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">11</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 第一个参数为一个方法，有三个参数，current: 当前值 index: 当前值下标 array: 这个数组对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> current <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3,4]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3,4,11]</span></pre></td></tr></table></figure><h4 id=\"map-2\"><a class=\"anchor\" href=\"#map-2\">#</a> map</h4>\n<p>map () 方法来根据需求格式化原数组，返回格式化后的数组。原数组不变；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 参数同 filter 方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> current <span class=\"token operator\">+</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [2,3,4,5,6]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3,4,5]</span></pre></td></tr></table></figure><h4 id=\"indexof和lastindexof\"><a class=\"anchor\" href=\"#indexof和lastindexof\">#</a> indexOf 和 lastIndexOf</h4>\n<p>indexOf (某元素，startIndex) 从 startIndex 开始，查找某元素在数组中的位置，若存在，则返回第一个位置的下标，否则返回 - 1</p>\n<p>lastIndexOf (某元素，startIndex) 和 indexOf () 相同，区别在于从尾部向首部查询</p>\n<p>不会改变原数组，<strong>返回找到的 index, 否则返回 - 1</strong></p>\n<p>若不使用下标，则一般通过 includes () 方法代替 indexOf ()</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span></pre></td></tr></table></figure><h4 id=\"includes\"><a class=\"anchor\" href=\"#includes\">#</a> includes</h4>\n<p>includes () 方法，返回一个布尔值。 参数是一个 value, 一般用于简单数组。</p>\n<p>对于复杂数组，则可以使用 some () 方法替代 includes () 方法；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr></table></figure><h4 id=\"concat\"><a class=\"anchor\" href=\"#concat\">#</a> concat</h4>\n<p>首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"green\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> colors2 <span class=\"token operator\">=</span> colors<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"black\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"brown\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>colors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"red\", \"green\",\"blue\"]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>colors2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"red\", \"green\", \"blue\", \"yellow\", \"black\", \"brown\"]</span></pre></td></tr></table></figure><h4 id=\"every\"><a class=\"anchor\" href=\"#every\">#</a> every</h4>\n<p>对数组的每一项都运行给定的函数，若每一项都返回 ture, 则返回 true；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">return</span> current <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">return</span> current <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr></table></figure><h4 id=\"some\"><a class=\"anchor\" href=\"#some\">#</a> some</h4>\n<p>对数组的每一项都运行给定的函数，若存在一项或多项返回 ture, 则返回 true；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>       <span class=\"token keyword\">return</span> current <span class=\"token operator\">></span> <span class=\"token number\">4</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">current<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>       <span class=\"token keyword\">return</span> current <span class=\"token operator\">></span> <span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true </span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr></table></figure><h4 id=\"find\"><a class=\"anchor\" href=\"#find\">#</a> find</h4>\n<p>找到数组中第一次满足条件的元素，并<strong>返回改元素</strong>，若找不到则返回 undefined。不改变原数组。</p>\n<p>和 filter () 方法的区别在于：filter 返回值是所有满足条件的元素组成的数组，</p>\n<p>一般在需要使用找到的元素时，用 find () 方法</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//b 在下面需要使用，则一般用 find</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> ele <span class=\"token operator\">==</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> b <span class=\"token operator\">+</span> c</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// [1,2,3,4]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre> </pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 若只需判断元素是否存在</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 若果是简单数组 (非对象数组)，则一般使用 Array.includes (value) 方法</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 如果为对象数组，则可以使用 Array.some () 方法</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre> </pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre> </pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xiaoming\"</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"xiaohong\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre> </pre></td></tr><tr><td data-num=\"22\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">some</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token keyword\">return</span> ele<span class=\"token punctuation\">.</span>name <span class=\"token operator\">==</span> <span class=\"token string\">'xiaoming'</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>                            <span class=\"token comment\">// true</span></pre></td></tr></table></figure><h4 id=\"findindex\"><a class=\"anchor\" href=\"#findindex\">#</a> findIndex</h4>\n<p>findIndex () 的作用同 indexOf ()，返回第一个满足条件的下标，并停止寻找。</p>\n<p>区别是 findIndex () 的参数为一个回调函数，且一般用于对象数组</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> ele <span class=\"token operator\">===</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">var</span> c <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"8\"></td><td><pre> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// [1,2,3,4]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><h4 id=\"isarray\"><a class=\"anchor\" href=\"#isarray\">#</a> isArray</h4>\n<p>用来判断一个元素是否为数组；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr></table></figure><h3 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h3>\n<h4 id=\"concat-2\"><a class=\"anchor\" href=\"#concat-2\">#</a> concat</h4>\n<p>concat () 方法用于连接两个或多个字符串或。</p>\n<p>该方法没有改变原有字符串，但是会<strong>返回连接两个或多个字符串新字符串</strong>。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> str1<span class=\"token operator\">=</span><span class=\"token string\">\"Hello \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> str2<span class=\"token operator\">=</span><span class=\"token string\">\"world!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> str3<span class=\"token operator\">=</span><span class=\"token string\">\" Have a nice day!\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> str1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>str2<span class=\"token punctuation\">,</span>str3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// n='Hello world! Have a nice day!'</span></pre></td></tr></table></figure><h4 id=\"slice-substr-substring\"><a class=\"anchor\" href=\"#slice-substr-substring\">#</a> slice、substr、substring</h4>\n<p>​\t<strong>不改变原字符串，返回新字符串</strong></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211125144400.png\" alt=\"\" /></p>\n<h4 id=\"trim\"><a class=\"anchor\" href=\"#trim\">#</a> trim</h4>\n<p>trim（）移除字符串前后的空格，经常在对 input 和 textarea 的值做判断时用到，<strong>不改变原字符串，返回新字符串</strong>；同理：trimLeft () trimRight ()</p>\n<h4 id=\"tolowercase\"><a class=\"anchor\" href=\"#tolowercase\">#</a> toLowerCase</h4>\n<p>把字符串转换成小写的；</p>\n<h4 id=\"touppercase\"><a class=\"anchor\" href=\"#touppercase\">#</a> toUpperCase</h4>\n<p>把字符串转换成大写的；</p>\n<h4 id=\"repeat\"><a class=\"anchor\" href=\"#repeat\">#</a> repeat</h4>\n<p>接收一个整数参数，表示要将字符串复制多少次，然后返回拼接所有副本后的结果；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> stringValue <span class=\"token operator\">=</span> <span class=\"token string\">\"na \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> copyResult <span class=\"token operator\">=</span> stringValue<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// na na</span></pre></td></tr></table></figure><h4 id=\"charat\"><a class=\"anchor\" href=\"#charat\">#</a> charAt</h4>\n<p>返回指定索引的字符；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"abbcalgldkjgldgehlgjldf\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 结果是 b</span></pre></td></tr></table></figure><h4 id=\"includes-2\"><a class=\"anchor\" href=\"#includes-2\">#</a> includes</h4>\n<p>从字符串中搜索传入的字符串，并返回一个表示是否包含的布尔值；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> message <span class=\"token operator\">=</span> <span class=\"token string\">\"foobarbaz\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"qux\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr></table></figure><h4 id=\"indexof\"><a class=\"anchor\" href=\"#indexof\">#</a> indexOf</h4>\n<p>同上</p>\n<h4 id=\"split\"><a class=\"anchor\" href=\"#split\">#</a> split</h4>\n<p>把字符串分割为子字符串数组，<strong>并返回新数组</strong>；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> ary<span class=\"token operator\">=</span>string<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span>separator<span class=\"token punctuation\">,</span>limit<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 第一个参数为用于分割的字符串，一般为 '' 或 ' '</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 第二个参数为返回的字符串的最大长度</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> str<span class=\"token operator\">=</span><span class=\"token string\">\"How are you doing today?\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> n<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//['H', 'o', 'w', ' ', 'a', 'r', 'e', ' ', 'y', 'o', 'u', ' ', 'd', 'o', 'i', 'n', 'g', ' ', 't', 'o', 'd', 'a', 'y', '?']</span></pre></td></tr></table></figure><h4 id=\"match\"><a class=\"anchor\" href=\"#match\">#</a> match</h4>\n<p>match () 方法可在字符串内检索指定的值，找到一个或多个正则表达式的匹配，并返回一个新数组；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"cat, bat, sat, fat\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> pattern <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">.at</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> matches <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>pattern<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>matches<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"cat\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 参数 regexp 规定要匹配的模式的 RegExp 对象。如果该参数不是 RegExp 对象，则需要首先把它传递给 RegExp 构造函数，将其转换为 RegExp 对象</span></pre></td></tr></table></figure><h4 id=\"replace\"><a class=\"anchor\" href=\"#replace\">#</a> replace</h4>\n<p>replace () 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> stringNew<span class=\"token operator\">=</span>stringOld<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>regexp<span class=\"token operator\">/</span>substr<span class=\"token punctuation\">,</span>replacement<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"cat, bat, sat, fat\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> pos <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">at</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><h4 id=\"search\"><a class=\"anchor\" href=\"#search\">#</a> search</h4>\n<p>​\tsearch () 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。找到则返回匹配索引，否则返回 -1；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>stringObject<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span>regexp<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//stringObject 中第一个与 regexp 相匹配的子串的起始位置。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> text <span class=\"token operator\">=</span> <span class=\"token string\">\"cat, bat, sat, fat\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> pos <span class=\"token operator\">=</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">at</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr></table></figure><h3 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h3>\n<p><strong>模式</strong></p>\n<ul>\n<li>g：全局模式，常用于执行一个全局搜索匹配，即（不仅仅返回第一个匹配的，而是返回全部）；</li>\n<li>i：不区分大小写；</li>\n<li>m：执行一个多行匹配</li>\n</ul>\n<p><strong>普通字符</strong></p>\n<ul>\n<li><code>\\w</code> ：匹配一个字母、数字、下划线；</li>\n<li><code>\\W</code> ：匹配一个非字母、数字、下划线；</li>\n<li><code>\\d</code> ：匹配一个数字</li>\n<li><code>\\D</code> ：匹配一个非数字</li>\n<li><code>\\n</code> ：查找一个换行符</li>\n<li><code>\\r</code> ：查找一个回车符</li>\n<li><code>\\s</code> ：可以匹配一个空格（也包括 Tab 等空白符）；</li>\n<li><code>[A-Z]</code> ：[A-Z] 表示一个区间，匹配所有大写字母，[a-z] 表示所有小写字母；</li>\n<li><code>[A-z]</code> ：查找从大写 A 到小写 z 范围内的字符，即所有大小写的字母；</li>\n<li><code>[0-9]</code> ：查找从 0 至 9 范围内的数字，即查找数字；</li>\n<li><code>[a-zA-Z0-9]</code> ：查找所有的英文字符和数字；</li>\n</ul>\n<p><strong>特殊字符</strong></p>\n<ul>\n<li><code>[^]</code> ：查找不在方括号内任意一个字符（如 <code>[^ABC]</code> );</li>\n<li><code>.</code> ：可以匹配任意字符，但不包括换行符，故 <code>'py.'</code>  可以匹配 <code>'pyc'</code> 、 <code>'pyo'</code> 、 <code>'py!'</code>  等等；</li>\n<li><code>?</code> ： <code>n?</code>  匹配任何包含零个或一个 n 的字符串；</li>\n<li><code>*</code> ： <code>n*</code>  匹配任何包含零个或多个 n 的字符串；</li>\n<li><code>+</code> ： <code>n+</code>  匹配任何包含一个及以上 n 的字符串；</li>\n<li><code>&#123;&#125;</code> ： <code>n&#123;x&#125;</code>  匹配包含 x 个 n 的序列的字符串， <code>n&#123;x,y&#125;</code>  匹配包含最少 x 个、最多 y 个 n 的序列的字符串， <code>n&#123;x,&#125;</code>  匹配包含至少 x 个 n 的序列的字符串；</li>\n<li><code>|</code> ：表示在两个子模式的匹配结果中任选一个，如 <code>/a &#123;dog|cat&#125;/</code> ;</li>\n<li><code>()</code> ：表示括号内的字符必须全部包含；</li>\n<li><code>[]</code> ：表示方括号内的字符为指定字符的范围；</li>\n<li><code>^</code> ：匹配开头，在多行检测中，会匹配（限制）一行的开头，如 <code>/^\\w+/</code>  会匹配第一个单词；</li>\n<li><code>$</code> ：匹配结尾，在多行检测中，会匹配一行的结尾，如 <code>/\\w+$/</code>  会匹配最后一个单词；</li>\n<li><code>\\</code> ：转义字符，用于匹配一些保留的字符  <code>[ ] ( ) &#123; &#125; . * + ? ^ $ \\ |</code> ；</li>\n<li><code>\\num</code> ：反向引用，所谓的 \\1 引用了第一个 () 匹配到的内容，比如 (x)(y)\\2 该正则是想匹配到第一个字符是 x, 第二个字符是 y，第三个字符也是 y 的内容，即 xyy 能够被匹配到，但是 xya、xyb 就不能被匹配到；</li>\n</ul>\n<p>代码实例：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> data <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'#123456'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'247146086@qq.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'15281091015'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'123.0.5.255'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">'https://www.bilibili.com/video/BV1QK4y1K72U?spm_id_from=333.999.0.0'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">'247146086'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0.0.0.0'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'#ABC'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'2021-10-01'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'18215576625'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'825662107'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'15281091015'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'https://www.https://nc3021.github.io/'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'255.255.255.255'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1257730824'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">'#9bf'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'1984-02-30'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">regexp</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ary<span class=\"token punctuation\">,</span> reg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    ary<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            result<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> result</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">//phoneNumber</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">let</span> regPhone <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^1[3-9][0-9]&#123;9&#125;$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">let</span> aryPhone <span class=\"token operator\">=</span> <span class=\"token function\">regexp</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> regPhone<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'phoneNumber:'</span><span class=\"token punctuation\">,</span> aryPhone<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token comment\">//QQNumber</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token keyword\">let</span> regQQ <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^[1-9][0-9]&#123;4,9&#125;$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">let</span> aryQQ <span class=\"token operator\">=</span> <span class=\"token function\">regexp</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> regQQ<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'QQNumber:'</span><span class=\"token punctuation\">,</span> aryQQ<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">//color</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token keyword\">let</span> regColor <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^#([0-9a-fA-F]&#123;6&#125;$|[0-9a-fA-F]&#123;3&#125;$)</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token keyword\">let</span> aryColor <span class=\"token operator\">=</span> <span class=\"token function\">regexp</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> regColor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Color:'</span><span class=\"token punctuation\">,</span> aryColor<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token comment\">//email</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre><span class=\"token keyword\">let</span> regEmail <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^([0-9a-zA-Z\\.\\-_]+)@([0-9a-zA-Z\\.\\-_]+)\\.([a-zA-Z]&#123;2,6&#125;)$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">let</span> aryEmail <span class=\"token operator\">=</span> <span class=\"token function\">regexp</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> regEmail<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Email:'</span><span class=\"token punctuation\">,</span> aryEmail<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre><span class=\"token comment\">//url</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre><span class=\"token keyword\">let</span> regUrl <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^((https?|ftp|file):\\/\\/)?([\\da-z\\.\\-]+)\\.([a-z\\.]&#123;2,6&#125;)((.*\\/)*)?(.*)?$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre><span class=\"token keyword\">let</span> aryUrl <span class=\"token operator\">=</span> <span class=\"token function\">regexp</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> regUrl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Url:'</span><span class=\"token punctuation\">,</span> aryUrl<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">//Ipv4</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">let</span> regIpv4 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^(([01]?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\\.)&#123;3&#125;([01]?[0-9]?[0-9]|2[0-4][0-9]|25[0-5])$</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre><span class=\"token keyword\">let</span> aryIpv4 <span class=\"token operator\">=</span> <span class=\"token function\">regexp</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> regIpv4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Ipv4:'</span><span class=\"token punctuation\">,</span> aryIpv4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre><span class=\"token comment\">// 或 | 之间不用加（），原因不清</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre></pre></td></tr><tr><td data-num=\"47\"></td><td><pre><span class=\"token comment\">//date</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre><span class=\"token keyword\">let</span> regDate <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^\\d&#123;4&#125;-(0\\d|1[012])-(0\\d|[12]\\d|3[01])</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token keyword\">let</span> aryDate <span class=\"token operator\">=</span> <span class=\"token function\">regexp</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> regDate<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"50\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Date:'</span><span class=\"token punctuation\">,</span> aryDate<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"操作符\"><a class=\"anchor\" href=\"#操作符\">#</a> 操作符</h2>\n<h3 id=\"一元操作符\"><a class=\"anchor\" href=\"#一元操作符\">#</a> 一元操作符</h3>\n<p>递增递减操作符（++/--）：</p>\n<p>前缀递增或递减时，变量的值都是在语句被求值以前改变的；后缀递增或递减时，变量的值都是在语句求值之后才改变的；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211124180217.png\" alt=\"\" /></p>\n<p>正负操作符（+/-）：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211124180309.png\" alt=\"\" /></p>\n<h3 id=\"位操作符\"><a class=\"anchor\" href=\"#位操作符\">#</a> 位操作符</h3>\n<h3 id=\"布尔操作符\"><a class=\"anchor\" href=\"#布尔操作符\">#</a> 布尔操作符</h3>\n<p>逻辑非！：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211124180711.png\" alt=\"\" /></p>\n<p>通过使用（！！n）将一个值转换位其对应的布尔值；</p>\n<p>逻辑与 &amp;&amp;：</p>\n<p>逻辑或 ||：</p>\n<p><strong>一些特殊用法：</strong></p>\n<ul>\n<li>\n<p>防止初始值为 null</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/2GK7G3BRUUOEFHPCB.png\" alt=\"\" /></p>\n</li>\n</ul>\n<h3 id=\"乘性操作符\"><a class=\"anchor\" href=\"#乘性操作符\">#</a> 乘性操作符</h3>\n<p>乘法：</p>\n<p>除法：</p>\n<p>取模：</p>\n<h3 id=\"指数操作符\"><a class=\"anchor\" href=\"#指数操作符\">#</a> 指数操作符（**）</h3>\n<h3 id=\"加性操作符\"><a class=\"anchor\" href=\"#加性操作符\">#</a> 加性操作符</h3>\n<p>加法：</p>\n<p>减法：</p>\n<h3 id=\"关系运算符\"><a class=\"anchor\" href=\"#关系运算符\">#</a> 关系运算符（&gt;&lt;)</h3>\n<h3 id=\"相等操作符\"><a class=\"anchor\" href=\"#相等操作符\">#</a> 相等操作符</h3>\n<p>由于相等和不相等操作符存在类型转换问题，而为了保持代码中数据类型的完整性，一般推荐使用全等和不全等操作符；</p>\n<h2 id=\"迭代器\"><a class=\"anchor\" href=\"#迭代器\">#</a> 迭代器</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTE5MDIzMDM4Njg4MTMzMTI3\"></span></p>\n<h2 id=\"对象与类\"><a class=\"anchor\" href=\"#对象与类\">#</a> 对象与类</h2>\n<h3 id=\"对象\"><a class=\"anchor\" href=\"#对象\">#</a> 对象</h3>\n<h4 id=\"对象属性\"><a class=\"anchor\" href=\"#对象属性\">#</a> 对象属性</h4>\n<p>数据属性：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207130924.png\" alt=\"\" /></p>\n<p>将属性显式添加到对象之后，[[Configurable]]、[[Enumerable]] 和 [[Writable]] 都会被设置为 true，而 [[Value]] 特性会被设置为指定的值；</p>\n<p>属性修改</p>\n<p>Object.defineProperty () 方法：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207131232.png\" alt=\"\" /></p>\n<p>在调用 Object.defineProperty () 时，configurable、enumerable 和 writable 的值如果不指定，则都默认为 false;</p>\n<p>访问器属性：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207131606.png\" alt=\"\" /></p>\n<p>属性定义</p>\n<p>Object.defineProperty () 方法：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207131657.png\" alt=\"\" /></p>\n<p>定义多个属性</p>\n<p>Objext.define-Properties () 方法：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207132004.png\" alt=\"\" /></p>\n<p>读取属性的特性：</p>\n<p>Object.getOwnPropertyDescriptor () 方法:</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207133757.png\" alt=\"\" /></p>\n<p>合并对象：~P210</p>\n<p>对象标识及相等判定：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207134812.png\" alt=\"\" /></p>\n<p>对象结构：~P216</p>\n<h4 id=\"创建对象\"><a class=\"anchor\" href=\"#创建对象\">#</a> 创建对象</h4>\n<p>工厂模式（非构造函数）：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207141244.png\" alt=\"\" /></p>\n<p>构造函数模式：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207141325.png\" alt=\"\" /></p>\n<p>两者区别：</p>\n<ul>\n<li>没有显式地创建对象</li>\n<li>属性和方法直接赋值给了 this</li>\n<li>没有 return</li>\n</ul>\n<p>​\t按照惯例，构造函数名称的首字母都是要大写的， 非构造函数则以小写字母开头；</p>\n<p>​\t构造函数与普通函数唯一的区别就是调用方式不同。除此之外，构造函数也是函数。并没有把某个函数定义为构造函数的特殊语法。任何函数只要使用 new 操作符调用就是构造函数，而不使用 new 操作符调用的函数就是普通函数；</p>\n<p>​\t但通过构造函数创建出的每个实例的函数虽然同名但不相等，故因此一般将函数定义转移到构造函数外部；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207141906.png\" alt=\"\" /></p>\n<p>原型模式：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207144623.png\" alt=\"\" /></p>\n<p>Object.getProtorypeOf () 方法：</p>\n<p>返回参数的内部特性 <code>Prototype</code>  的值；</p>\n<p>Object.create () 方法：</p>\n<p>创建一个新对象，同时为其指定原型；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207145234.png\" alt=\"\" /></p>\n<p>Object.hasOwnProperty () 方法：</p>\n<p>确定某个属性是在实例上还是原型对象上；参数为属性名，返回 ture 则说明来自实例，返回 false 则说明来自原型；</p>\n<p>in 操作符：</p>\n<p>确定某个属性是否在该对象的实例或原型对象上；</p>\n<p>Object.keys () 方法：</p>\n<p>这个方法接收一个对象作为参数，返回包含该对象所有可枚举属性名称的字符串数组；</p>\n<p>对象迭代：</p>\n<p>Object.entries () 方法：</p>\n<p>接收一个对象，返回它们内容（键值对）的数组；</p>\n<p>Object.values () 方法：</p>\n<p>接收一个对象，返回它们对象值的数组；</p>\n<p>例：[[' 键 '，' 值 ']，[' 键 '，' 值 ']，[' 键 '，' 值 ']]</p>\n<p>注意：非字符串属性会被转换为字符串输出，符号属性会被忽略；</p>\n<h4 id=\"this\"><a class=\"anchor\" href=\"#this\">#</a> this</h4>\n<p><strong>1：this 永远指向一个对象；</strong></p>\n<p><strong>2：this 的指向完全取决于函数调用的位置</strong></p>\n<h4 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h4>\n<p>原型链：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207152745.png\" alt=\"\" /></p>\n<p>instanceof 操作符：</p>\n<p>如果一个实例的原型链中出现过相应的构造函数，则返回 true；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>instance <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ture</span></pre></td></tr></table></figure><p>isProtorypeOf () 方法：</p>\n<p>如果原型链中包含这个原型，则返回 true；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>instance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><h5 id=\"组合继承\"><a class=\"anchor\" href=\"#组合继承\">#</a> 组合继承</h5>\n<p>​\t综合了原型链和盗用构造函数，通过盗用构造函数继承构造函数的属性，通过原型链继承原型上的方法；</p>\n<p>​\t从而避免了原型中所包含的引用值会在所有的实例间共享的问题（原型链的弊端）；以及盗用构造函数中重新定义方法的问题；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207154629.png\" alt=\"\" /></p>\n<h5 id=\"原型式继承\"><a class=\"anchor\" href=\"#原型式继承\">#</a> 原型式继承</h5>\n<p>Object.create () 方法：</p>\n<p>接收两个参数：第一个作为新对象原型的对象，第二个为给新对象定义额外属性的对象（可选）。在只有一个参数时， Object.create () 与这里的 object () 方法效果相同；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207155422.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207155456.png\" alt=\"\" /></p>\n<h5 id=\"寄生式组合继承\"><a class=\"anchor\" href=\"#寄生式组合继承\">#</a> 寄生式组合继承</h5>\n<p>​\t寄生式组合继承通过盗用构造函数继承属性，但使用混合式原型链继承方法。基本思路是不通过调用父类构造函数给子类原型赋值，而是取得父类原型的一个副本。说到底就是使用寄生式继承来继承父类原型，然后将返回的新对象赋值给子类原型；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207163841.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207163907.png\" alt=\"\" /></p>\n<p>相比于组合继承，少调用了一次父构造函数（只在最后构造实例时调用了父构造函数），从而效率更高，是引用类型继承的最佳模式；</p>\n<h4 id=\"类\"><a class=\"anchor\" href=\"#类\">#</a> 类</h4>\n<p>​\t与函数类型相似，定义类也有两种主要方式：类声明和类表达式。这两种方式都使用 class 关键字加大括号：</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 类声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> Animal <span class=\"token operator\">=</span> <span class=\"token keyword\">class</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 类表达式</span></pre></td></tr></table></figure><p>​\t与函数表达式式类似，类表达式在它们被求值前也不能引用。不过，与函数定义不同的是，虽然函数声明可以提升，但类定义不能；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211207165453.png\" alt=\"\" /></p>\n<p>类构造函数</p>\n<p>​\tconstructor () 用于在类定义块内部创建类的构造函数。方法名 constructor 会告诉解释器在使用 new 操作符创建类的新实例时，应该调用这个函数。构造函数的定义不是必需的，不定义构造函数相当于将构造函数定义为空函数；</p>\n<p>实例、原型、类成员：~P254</p>\n<p>继承：~P258</p>\n<h2 id=\"代理和反射\"><a class=\"anchor\" href=\"#代理和反射\">#</a> 代理和反射</h2>\n<h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211208125425.png\" alt=\"\" /></p>\n<p>​\t函数声明可以提升，但函数表达式不可以；</p>\n<h3 id=\"函数参数\"><a class=\"anchor\" href=\"#函数参数\">#</a> 函数参数</h3>\n<p>​\t函数的参数在函数内部表现为一个数组，存放在一个类数组对象 <code>arguments</code>  中；</p>\n<p>​\t可以通过 arguments [0] 获得第一个参数；也可以通过 arguments 的 length 属性检查传入的参数个数，即<img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211208131516.png\" alt=\"\" /></p>\n<p>但如果采用箭头函数则没有 arguments 对象。</p>\n<p>​\targuments 还有一个属性 <code>callee</code> , 是一个指向 arguments 对象所在函数的指针，可以让函数逻辑与函数名解耦；</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">jiecheng</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> num<span class=\"token operator\">*</span><span class=\"token function\">jiecheng</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"期约与异步函数\"><a class=\"anchor\" href=\"#期约与异步函数\">#</a> 期约与异步函数</h2>\n<h3 id=\"期约\"><a class=\"anchor\" href=\"#期约\">#</a> 期约</h3>\n<p>~P325</p>\n<h3 id=\"异步函数\"><a class=\"anchor\" href=\"#异步函数\">#</a> 异步函数</h3>\n<p>~P348</p>\n<h2 id=\"执行上下文\"><a class=\"anchor\" href=\"#执行上下文\">#</a> 执行上下文</h2>\n<p>[深入理解 JavaScript 执行上下文和执行栈 - Fundebug - 博客园 (<span class=\"exturl\" data-url=\"aHR0cDovL2NuYmxvZ3MuY29t\">cnblogs.com</span>)](<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vZnVuZGVidWcvcC91bmRlcnN0YW5kLWphdmFzY3JpcHQtY29udGV4dC1hbmQtc3RhY2suaHRtbCM6fjp0ZXh0PSVFNCVCOCU4MCVFMyU4MCU4MSVFNiU4OSVBNyVFOCVBMSU4QyVFNCVCOCU4QSVFNCVCOCU4QiVFNiU5NiU4NyVFRiVCQyU4OEV4ZWN1dGlvbg==\">https://www.cnblogs.com/fundebug/p/understand-javascript-context-and-stack.html#:~:text = 一、执行上下文（Execution</span> Context）. 1. 什么是执行上下文。简而言之，执行上下文就是当前 JavaScript 代码被解析和执行时所在环境的抽象概念，,JavaScript 中运行任何的代码都是在执行上下文中运行. 2. 执行上下文的类型。执行上下文总共有三种类型：. 全局执行上下文： 这是默认的、最基础的执行上下文。. 不在任何函数中的代码都位于全局执行上下文中。.)</p>\n<h2 id=\"ajax\"><a class=\"anchor\" href=\"#ajax\">#</a> AJAX</h2>\n<p>​\tAJAX 是一种用于创建快速动态网页的技术。通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新。而传统的网页（不使用 AJAX）如果需要更新内容，必需重载整个网页面。</p>\n<ol>\n<li>\n<p>创建 XMLHttpRequest 对象</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> xmlhttp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>XMLHttpRequest<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//  IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    xmlhttp<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">else</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// IE6, IE5 浏览器执行代码</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    xmlhttp<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ActiveXObject</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Microsoft.XMLHTTP\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>向服务器发送请求</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xmlhttp<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"GET\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"ajax_info.txt\"</span><span class=\"token punctuation\">,</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>xmlhttp<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211228222653.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>服务器相应</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myDiv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span>xmlhttp<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211228222836.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>onreadystatechange 事件</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xmlhttp<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xmlhttp<span class=\"token punctuation\">.</span>readyState<span class=\"token operator\">==</span><span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> xmlhttp<span class=\"token punctuation\">.</span>status<span class=\"token operator\">==</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myDiv\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span>xmlhttp<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211229015429.png\" alt=\"\" /></p>\n</li>\n</ol>\n<h2 id=\"bom\"><a class=\"anchor\" href=\"#bom\">#</a> BOM</h2>\n<p>浏览器对象模型（Browser Object Model）</p>\n<h3 id=\"window\"><a class=\"anchor\" href=\"#window\">#</a> window</h3>\n<p>Global 作用域：</p>\n<p>​\t通过 var 声明的所有全局变量和函数都会变成 window 对象的属性和方法；但通过 let 或 const 声明的则不会把变量添加给全局对象。</p>\n<p>窗口位置：</p>\n<p>​\t <code>window.screenLeft</code> : 窗口相对于屏幕左侧的距离（单位：CSS 像素）</p>\n<p>​\t <code>window.screenTop</code> : 窗口相对于屏幕顶部的距离（单位：CSS 像素）</p>\n<p>像素比：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211208153905.png\" alt=\"\" /></p>\n<p>窗口大小：</p>\n<p>​\t所有现代浏览器都支持 4 个属性： innerWidth、innerHeight、outerWidth 和 outerHeight。outerWidth 和 outerHeight 返回浏览器窗口自身的大小（不管是在最外层 window 上使用，还是在窗格中使用；innerWidth 和 innerHeight 返回浏览器窗口中页面视口的大小（不包含浏览器边框和工具栏）。</p>\n<p>window.open():</p>\n<p>​\twindow.open () 方法可以用于导航到指定 URL，也可以用于打开新浏览器窗口。这个方法接收 4 个参数：要加载的 URL、目标窗口、特性字符串和表示新窗口在浏览器历史记录中是否替代当前加载页 面的布尔值。通常，调用这个方法时只传前 3 个参数，最后一个参数只有在不打开新窗口时才会使用。</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211208155632.png\" alt=\"\" /></p>\n<p>定时器：</p>\n<p><code>setTimeout()</code>  该方法通常接收两个参数：要执行的代码和在执行回调函数前等待的时间（毫秒）。第一个参数可以是包含 JavaScript 代码的字符串（类似于传给 eval () 的字符串）或者一个函数，第二个参数是要等待的毫秒数，并会返回一个唯一标识符，可用于取消该任务，只要是在指定时间到达之前调用 clearTimeout ()，就可以取消超时任务。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> timeoutId <span class=\"token operator\">=</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeoutId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 取消超时任务</span></pre></td></tr></table></figure><p><code>setInterval()</code>  与 setTimeout () 的使用方法类似，只不过指定的任务会每隔指定时间就执行一次，直到取消循环定时或者页面卸载。setInterval () 同样可以接收两个参数：要执行的代码（字符串或函数），以及把下一次执行定时代码的任务添加到队列要等待的时间。其也会返回一个标识符，通过 clearInterval () 来取消任务。</p>\n<p>系统对话框：</p>\n<p>​\t可以让浏览器调用系统对话框向用户显示消息。这 些对话框与浏览器中显示的网页无关，而且也不包含 HTML。它们的外观由操作系统或者浏览器决定，无法使用 CSS 设置。此外，这些对话框都是同步的模态对话框，即在它们显示的时候，代码会停止执行， 在它们消失以后，代码才会恢复执行.</p>\n<p><code>alert()</code> : 只接收一个参数</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211208161116.png\" alt=\"\" /></p>\n<p><code>confirm()</code> ：只接收一个参数，并返回布尔值</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211208161413.png\" alt=\"\" /></p>\n<p><code>prompt()</code> ：接收两个参数，第一个是要显示给用户的文本，第二个是文本框的默认值（可以是空字符串），最后返回文本框中的值</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211208161629.png\" alt=\"\" /></p>\n<h3 id=\"location\"><a class=\"anchor\" href=\"#location\">#</a> location</h3>\n<p>location 是最有用的 BOM 对象之一，提供了当前窗口中加载文档的信息，以及通常的导航功能。 这个对象独特的地方在于，它既是 window 的属性，也是 document 的属性。也就是说， window.location 和 document.location 指向同一个对象。</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211208161815.png\" alt=\"\" /></p>\n<h3 id=\"navigator\"><a class=\"anchor\" href=\"#navigator\">#</a> navigator</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211208162355.png\" alt=\"\" /></p>\n<h3 id=\"screen\"><a class=\"anchor\" href=\"#screen\">#</a> screen</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211208162529.png\" alt=\"\" /></p>\n<h3 id=\"history\"><a class=\"anchor\" href=\"#history\">#</a> history</h3>\n<p><code>go()</code>  方法可以在用户历史记录中沿任何方向导航，可以前进也可以后退。这个方法只接收一个参数， 这个参数可以是一个整数，表示前进或后退多少步。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 后退一页</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 前进两页</span></pre></td></tr></table></figure><p><code>history.length</code>  用来表示历史记录的数量。</p>\n<p>​\t对于窗口或标签页中加载的第一个页面，history.length 等于 1。 通过以下方法测试这个值，可以确定用户浏览器的起点是不是你的页面。</p>\n<h2 id=\"dom\"><a class=\"anchor\" href=\"#dom\">#</a> DOM</h2>\n<p>文档对象模型（Document Object Model)</p>\n<p>HTML DOM 定义了所有 HTML 元素的<em>对象</em>和<em>属性</em>，以及访问它们的<em>方法</em>。</p>\n<p><em>换言之，HTML DOM 是关于如何获取、修改、添加或删除 HTML 元素的标准。</em></p>\n<h3 id=\"dom属性\"><a class=\"anchor\" href=\"#dom属性\">#</a> DOM 属性</h3>\n<p><code>innerHTML</code>  用于获取 HTML 元素的内容</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token constant\">DOCTYPE</span> html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">&lt;</span>html<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">&lt;</span>meta charset<span class=\"token operator\">=</span><span class=\"token string\">\"utf-8\"</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>head<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">&lt;</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">&lt;</span>p id<span class=\"token operator\">=</span><span class=\"token string\">\"intro\"</span><span class=\"token operator\">></span>Hello World<span class=\"token operator\">!</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>p<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">var</span> txt<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"intro\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>innerHTML<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>txt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>body<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>html<span class=\"token operator\">></span></pre></td></tr></table></figure><p><code>nodeName</code>  用于读取节点名称</p>\n<ul>\n<li>nodeName 是只读的</li>\n<li>元素节点的 nodeName 与标签名相同</li>\n<li>属性节点的 nodeName 与属性名相同</li>\n<li>文本节点的 nodeName 始终是 #text</li>\n<li>文档节点的 nodeName 始终是 #document</li>\n</ul>\n<p><strong>注意：</strong> nodeName 始终包含 HTML 元素的大写字母标签名。</p>\n<p><code>nodeValue</code>  用于规定节点的值</p>\n<ul>\n<li>元素节点的 nodeValue 是 undefined 或 null</li>\n<li>文本节点的 nodeValue 是文本本身</li>\n<li>属性节点的 nodeValue 是属性值</li>\n</ul>\n<p><code>nodeType</code>  返回节点的类型（只读）</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211208185749.png\" alt=\"\" /></p>\n<h3 id=\"dom方法\"><a class=\"anchor\" href=\"#dom方法\">#</a> DOM 方法</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211208184819.png\" alt=\"\" /></p>\n<p><code>getElementsByld()</code>  返回带有指定 ID 的元素引用</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>getElementsByTagName()</code>  返回带有指定签名的所有元素</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"tagname\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>getElementsByClassName()</code>  返回包含带有指定类名的所有元素的节点列表</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"intro\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"待补充\"><a class=\"anchor\" href=\"#待补充\">#</a> 待补充</h2>\n<ol>\n<li>filter () 方法</li>\n<li>箭头函数</li>\n</ol>\n",
            "tags": [
                "前端",
                "前端"
            ]
        },
        {
            "id": "https://nc3021.github.io/2021/11/26/financial/%E8%AE%A1%E9%87%8F%E7%BB%8F%E6%B5%8E%E5%AD%A6/",
            "url": "https://nc3021.github.io/2021/11/26/financial/%E8%AE%A1%E9%87%8F%E7%BB%8F%E6%B5%8E%E5%AD%A6/",
            "title": "计量经济学",
            "date_published": "2021-11-26T11:30:49.149Z",
            "content_html": "<h1 id=\"计量经济学\"><a class=\"anchor\" href=\"#计量经济学\">#</a> 计量经济学</h1>\n<h2 id=\"引论\"><a class=\"anchor\" href=\"#引论\">#</a> 引论</h2>\n<h3 id=\"计量经济学的用途\"><a class=\"anchor\" href=\"#计量经济学的用途\">#</a> 计量经济学的用途</h3>\n<ol>\n<li>\n<p>描述经济现实：</p>\n<p>​\t将经济关系中的抽样符号定量化，如需求函数、消费倾向；</p>\n</li>\n<li>\n<p>检验经济理论假设：</p>\n<p>​\t采用现实证据来检验理论模型，如资本资产定价模型、有效市场假说；</p>\n</li>\n<li>\n<p>预测未来经济活动：</p>\n<p>​\t基于已发生的事件去预测未来，如 GDP、CPI、通货膨胀率等；</p>\n</li>\n</ol>\n<h3 id=\"计量经济学的研究路线\"><a class=\"anchor\" href=\"#计量经济学的研究路线\">#</a> 计量经济学的研究路线</h3>\n<ol>\n<li>建立理论模型</li>\n<li>确定计量经济学模型</li>\n<li>收集、检查并整理数据</li>\n<li>估计计量经济学模型</li>\n<li>评价计量经济学模型</li>\n<li>应用计量经济学模型</li>\n</ol>\n<h3 id=\"eviews使用\"><a class=\"anchor\" href=\"#eviews使用\">#</a> EViews 使用</h3>\n<p><a href=\"https://nc3021.github.io/2021/11/26/financial/Eviews/\">查看 EViews 操作使用说明文档</a></p>\n<hr />\n<h2 id=\"第一章-回归分析概述\"><a class=\"anchor\" href=\"#第一章-回归分析概述\">#</a> 第一章 回归分析概述</h2>\n<h3 id=\"回归意义\"><a class=\"anchor\" href=\"#回归意义\">#</a> 回归意义</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/lg4IXU1wWRC67hZ.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/MZ8Vp9nt4fX7lkJ.png\" alt=\"\" /></p>\n<p><strong>统计关系</strong></p>\n<ul>\n<li>\n<p>确定关系：确定变量之间的函数关系</p>\n</li>\n<li>\n<p>统计关系：随机变量之间的依赖关系</p>\n<p>计量经济学研究的是统计关系。</p>\n</li>\n</ul>\n<h4 id=\"回归与相关\"><a class=\"anchor\" href=\"#回归与相关\">#</a> 回归与相关</h4>\n<p>​\t回归与相关的基本不同点在于，回归分析将因变量当作统计的、随机的，而自变量则被看作是固定的或非随机的；而相关分析将两个变量都看作随机的，具有对称性；</p>\n<p>​\t事实上，将自变量看作是随机变量不会影响大部分计量经济学理论的接过（特别是大样本情况下）；</p>\n<p>​\t在进行回归分析之前，一般先做相关分析。</p>\n<h3 id=\"收入消费理论\"><a class=\"anchor\" href=\"#收入消费理论\">#</a> 收入消费理论</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/95lEFbp8m2edJ4L.png\" alt=\"\" /></p>\n<h3 id=\"回归函数\"><a class=\"anchor\" href=\"#回归函数\">#</a> 回归函数</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/tIJFbTGWNjZKdOo.png\" alt=\"\" /></p>\n<h4 id=\"随机干扰项\"><a class=\"anchor\" href=\"#随机干扰项\">#</a> 随机干扰项</h4>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/8lTXmuOfDIxH4is.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/FSRanUW4T1PvVAf.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>随机干扰项：真实值与样本回归方程的估计值的差；</p>\n</li>\n<li>\n<p>残差：真实值与总体回归方程的估计值的差；</p>\n<p>随机感染项的来源：</p>\n<ol>\n<li>遗漏或被排除的变量</li>\n<li>数据的测量误差</li>\n<li>错误的函数形式</li>\n<li>纯粹的随机误差和无法预测的事件</li>\n</ol>\n</li>\n</ul>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/gvakubKz87x9RJC.png\" alt=\"\" /></p>\n<p><strong>偏回归系数</strong></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/FNMEmIkLrxGo2ey.png\" alt=\"\" /></p>\n<hr />\n<h2 id=\"第二章-普通最小二乘法\"><a class=\"anchor\" href=\"#第二章-普通最小二乘法\">#</a> 第二章 普通最小二乘法</h2>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/vqW5PzATBiaMlVN.png\" alt=\"\" /></p>\n<h3 id=\"线性回归模型的基本假设\"><a class=\"anchor\" href=\"#线性回归模型的基本假设\">#</a> 线性回归模型的基本假设</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/gu1wofclGLhIq2z.png\" alt=\"\" /></p>\n<p>以上假设也称为线性回归模型的经典假设或高斯（Gauss）假设，满足该假设的线性回归模型，也称为经典线性回归模型（Classical Linear Regression Model, CLRM）。</p>\n<p>线性回归是指对估计参数为线性的一种回归（即估计参数只以一次方出现），对自变量 X 可以是或不是线性的；</p>\n<h4 id=\"估计量的性质\"><a class=\"anchor\" href=\"#估计量的性质\">#</a> 估计量的性质</h4>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/a3hnsrOPjAREN8F.png\" alt=\"\" /></p>\n<p>​\t这三个准则被称作估计量的小样本性质，拥有这类性质的估计量称为最佳线性无偏估计量 (best liner unbiased estimator BLUE);</p>\n<h4 id=\"高斯-马尔可夫定理\"><a class=\"anchor\" href=\"#高斯-马尔可夫定理\">#</a> 高斯 - 马尔可夫定理</h4>\n<p>​\t在给定经典线性回归的假定下，最小二乘估计量是具有最小方差的线性无偏估计量即 BLUE。证明：略</p>\n<h3 id=\"判定系数\"><a class=\"anchor\" href=\"#判定系数\">#</a> 判定系数</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/DtSXMBYC3nJsWLa.png\" alt=\"\" /></p>\n<p>​\t总平方和 = 回归平方和 + 残差平方和</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/EqkdrMU4WJvm8hs.png\" alt=\"\" /></p>\n<p>判定系数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">R^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> 是解释变量个数的非减函数，即增加解释变量，<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">R^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> 会增加或不变，但增加解释变量会降低自由度（自由度：观测样本个数减去待估参数的个数）；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/Y4FOra61gJHhRS3.png\" alt=\"\" /></p>\n<hr />\n<h2 id=\"第三章-假设检验\"><a class=\"anchor\" href=\"#第三章-假设检验\">#</a> 第三章 假设检验</h2>\n<h3 id=\"假设检验的基本原理\"><a class=\"anchor\" href=\"#假设检验的基本原理\">#</a> 假设检验的基本原理</h3>\n<p>​\t假设检验是要确定一个准则（判定准则），以便决定拒绝或不拒绝某个原假设；</p>\n<p>​\t当拒绝原假设时，通常表述为统计上显著；反之，统计上不显著；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/WjMSIQUne9pPsYo.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/EFKksmS65WVPIC2.png\" alt=\"\" /></p>\n<p>假设检验的判定准则：</p>\n<p>​\t判定准则是比较样本统计量与预先设定的临界值之间的大小；</p>\n<p>​\t参数估计值范围分为两个区域：拒绝域与接受域；</p>\n<p>假设检验的两种常用方法：<br />\n1. 置信区间法<br />\n 2. 显著性检验法</p>\n<h3 id=\"置信区间法\"><a class=\"anchor\" href=\"#置信区间法\">#</a> 置信区间法</h3>\n<p>​\t根据参数估计量的分布，在给定的置信水平（如 95%）下构造一个随机置信区间；若该随即区间覆盖原假设值，则不拒绝原假设，否则拒绝原假设。</p>\n<p>置信区间的构造：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211211165500.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/5x8IahOWrkRKoQc.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/i8ZbtVQovUsgLuX.png\" alt=\"\" /></p>\n<p>Std.Error ：参数方差</p>\n<h3 id=\"显著性检验法t检验\"><a class=\"anchor\" href=\"#显著性检验法t检验\">#</a> 显著性检验法（t 检验）</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/bX73INsLDPOqAu6.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/Zf32OkbeEqPrahM.png\" alt=\"\" /></p>\n<p><img data-src=\"https://i.loli.net/2021/11/17/M39OvGYgtULlziS.png\" alt=\"\" /></p>\n<p>Prob. ：对应其左侧一列 t 统计量的概率（即一般情况下，p&lt;0.05 则认为其显著）</p>\n<p>结论：</p>\n<ol>\n<li>不能把 t 检验得出的统计显著性等同于理论的有效性；</li>\n<li>t 检验不能检验相应变量的相对重要性；</li>\n<li>随着样本容量的增大，t 值会越来越大；</li>\n<li>对于一个超大规模的样本而言，t 检验没用任何意义，因为你几乎可以拒绝任何原假设；</li>\n</ol>\n<h3 id=\"f检验\"><a class=\"anchor\" href=\"#f检验\">#</a> F 检验</h3>\n<p>对多个假设的联立检验或对线性约束的假设检验不能用 t 检验，只能用 F 检验，可以检验方差的整体显著性。</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/Y7K2zr6xioIWbMm.png\" alt=\"\" /></p>\n<p>Prob (F-statistic): 模型的显著性，小于 0.05 为显著。</p>\n<p>Wald Test（对参数进行具体检验）</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/DvUnFMxtTlOg1WE.png\" alt=\"\" /></p>\n<p>Probability: 假设正确的概率，小于 0.05 时拒绝原假设；</p>\n<h4 id=\"柯布-道格拉斯生产函数\"><a class=\"anchor\" href=\"#柯布-道格拉斯生产函数\">#</a> 柯布 - 道格拉斯生产函数</h4>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211211170742.png\" alt=\"\" /></p>\n<h4 id=\"邹检验\"><a class=\"anchor\" href=\"#邹检验\">#</a> 邹检验</h4>\n<p>在时间序列回归中，模型的参数在整个样本期间内可能发生变化，邹检验由此而生，是 F 检验的重要应用。邹检验可以轻松推广到不止一次结构变动的情形。</p>\n<p><strong>EViews 操作</strong></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/jOTArwSyvVzL35C.png\" alt=\"\" /></p>\n<p>一些说明：</p>\n<ol>\n<li>邹检验的假定：两个子时期回归的误差项是独立且具有同方差的正态分布变量；</li>\n<li>邹检验只告诉我们不同子时期的回归方程是否有差别，并没有告诉我们差别来自于截距、斜率还是二者兼有；</li>\n<li>邹检验假定我们知道结构转折点；</li>\n</ol>\n<h3 id=\"正态性检验\"><a class=\"anchor\" href=\"#正态性检验\">#</a> 正态性检验</h3>\n<p>​\t正态性检验是检验误差项是否为正太分布。</p>\n<p>正太性的雅克 - 贝拉（Jarque-Bera）检验：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/image-20211117181202547.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211211172246.png\" alt=\"\" /></p>\n<hr />\n<h2 id=\"第四章-模型设定\"><a class=\"anchor\" href=\"#第四章-模型设定\">#</a> 第四章 模型设定</h2>\n<p>一个正确的方程包含了：</p>\n<ol>\n<li>正确的解释变量；</li>\n<li>正确的函数形式；</li>\n<li>正确的随机误差形式；</li>\n</ol>\n<h3 id=\"遗漏变量设定偏误\"><a class=\"anchor\" href=\"#遗漏变量设定偏误\">#</a> 遗漏变量（设定偏误）</h3>\n<p>参数估计量有偏且 <code>符号不一致</code> （方差变小）；</p>\n<p>EViews 上检查遗漏变量的操作方法：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211211202523.png\" alt=\"\" /></p>\n<h3 id=\"不相干变量\"><a class=\"anchor\" href=\"#不相干变量\">#</a> 不相干变量</h3>\n<p>参数估计量无偏但非有效、 <code>不显著</code> （方差增大，t 检验失效，拟合优度降低）</p>\n<p>EViews 上检查不相干变量的操作方法：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211211203152.png\" alt=\"\" /></p>\n<h3 id=\"模型选择准则\"><a class=\"anchor\" href=\"#模型选择准则\">#</a> 模型选择准则</h3>\n<p>四个重要的模型设定准则：</p>\n<p>1. 理论：变量在方程中的含义是不是含糊不清的，从理论上看是不是合理的？<br />\n2.t 检验：解释变量参数的估计值在预期假设下是不是显著的？<br />\n3. 调整的判定系数<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mover accent=\"true\"><msup><mi>R</mi><mn>2</mn></msup><mo stretchy=\"true\">‾</mo></mover></mrow><annotation encoding=\"application/x-tex\">\\overline{R^2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.940108em;vertical-align:0em;\"></span><span class=\"mord overline\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.940108em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.740108em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.860108em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"overline-line\" style=\"border-bottom-width:0.04em;\"></span></span></span></span></span></span></span></span></span> 或 AIC 和 SC: 将变量加入方程后，整体拟合优度是否有所改善？<br />\n4. 偏误：将变量加入方程后，其他变量参数是否有显著变化？</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211211203218.png\" alt=\"\" /></p>\n<h4 id=\"aic与sc\"><a class=\"anchor\" href=\"#aic与sc\">#</a> AIC 与 SC</h4>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211211203318.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211211203329.png\" alt=\"\" /></p>\n<h3 id=\"函数形式的选择\"><a class=\"anchor\" href=\"#函数形式的选择\">#</a> 函数形式的选择</h3>\n<p>可线性化的非线性函数形式：</p>\n<ul>\n<li>指数函数</li>\n<li>对数函数</li>\n<li>反函数形式</li>\n<li>多项式形式</li>\n</ul>\n<hr />\n<h2 id=\"第五章-多重共线性\"><a class=\"anchor\" href=\"#第五章-多重共线性\">#</a> 第五章 多重共线性</h2>\n<h3 id=\"多重共线性的定义\"><a class=\"anchor\" href=\"#多重共线性的定义\">#</a> 多重共线性的定义</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212132921.png\" alt=\"\" /></p>\n<p>多重共线性是一个程度问题而不是有无的问题，目前还没有一个被普遍接受的真正意义的检验多重共线性的统计量。</p>\n<p>完全多重共线性只是一种极端的隐患，更常见的是出现不完全多重共线性；而只要是不完全多重共线性，用 OLS 仍可得到参数的估计值及其标准误差，并且是无偏，但尽管无偏，估计量的标准误差非常大即估计的精度很小。</p>\n<h3 id=\"不完全多重共线性的特征\"><a class=\"anchor\" href=\"#不完全多重共线性的特征\">#</a> 不完全多重共线性的特征</h3>\n<ul>\n<li>\n<p>偏回归系数的 t 值会降低，倾向于统计上不显著；</p>\n</li>\n<li>\n<p>估计量（偏回归系数）对模型设定的变化非常敏感，估计系数可能出现非预期的符号或难以置信的数值；</p>\n</li>\n<li>\n<p>虽然系数不显著，但总的拟合优度<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>R</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">R^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.00773em;\">R</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> 却可能非常高；</p>\n</li>\n<li>\n<p>可能出现每个偏回归系数的 t 值都不显著，但回归方程的 F 值却很显著。</p>\n</li>\n</ul>\n<h3 id=\"多重共线性的检验与补救\"><a class=\"anchor\" href=\"#多重共线性的检验与补救\">#</a> 多重共线性的检验与补救</h3>\n<p>检验方法：</p>\n<ol>\n<li>变量之间的相关系数</li>\n<li>方差膨胀因子（VIF）</li>\n</ol>\n<p>补救方法：</p>\n<ol>\n<li>剔除支配变量：支配变量 (dominant variable): 与被解释变量高度相关，以致于完全掩盖了方程中其他解释变量的影响 (如销售量与销售额)；</li>\n<li>增加样本容量：样本越大，估计越精确；</li>\n<li>剔除多余的变量：潜在的理论假设作为剔除的主要依据；</li>\n</ol>\n<h4 id=\"差分法\"><a class=\"anchor\" href=\"#差分法\">#</a> 差分法</h4>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212144450.png\" alt=\"\" /></p>\n<h4 id=\"比率转换法\"><a class=\"anchor\" href=\"#比率转换法\">#</a> 比率转换法</h4>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212144501.png\" alt=\"\" /></p>\n<h4 id=\"无为而治法\"><a class=\"anchor\" href=\"#无为而治法\">#</a> 无为而治法</h4>\n<p>​\t剔除本应包含的解释变量会导致设定偏误。与遗漏变量造成的有偏估计相比较，较低的 t 统计值 (显著性) 似乎只是一个次要的问题。<br />\n​\t只有当后果很严重 (参数估计值出现非预期的符号)，才应该采取其他补救措施。</p>\n<hr />\n<h2 id=\"第六章-序列相关性\"><a class=\"anchor\" href=\"#第六章-序列相关性\">#</a> 第六章 序列相关性</h2>\n<h3 id=\"序列相关性的概念\"><a class=\"anchor\" href=\"#序列相关性的概念\">#</a> 序列相关性的概念</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212145308.png\" alt=\"\" /></p>\n<h4 id=\"自相关系数\"><a class=\"anchor\" href=\"#自相关系数\">#</a> 自相关系数</h4>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212152252.png\" alt=\"\" /></p>\n<h3 id=\"序列相关性的类型\"><a class=\"anchor\" href=\"#序列相关性的类型\">#</a> 序列相关性的类型</h3>\n<p><strong>非纯序列相关：</strong></p>\n<p>​\t通常由设定偏误导致，所谓模型设定偏误表现在模型中丢掉重要的变量或模型函数形式有错误即遗漏变量、不正确的函数形式；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212151302.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212151824.png\" alt=\"\" /></p>\n<p><strong>纯序列相关：</strong></p>\n<ul>\n<li>时间序列数据：对同一总体的连续的观测很可能表现出某种系统的相关性，特别是连续观测的时间间隔很短时，如一周、一天、甚至一天内多次观测；</li>\n<li>经济数据的周期性，如股票价格、GDP 等；</li>\n</ul>\n<p>大多数经济时间数据都有一个明显的特点：惯性，表现在时间序列不同时间的前后关联上。</p>\n<h3 id=\"序列相关性的特征\"><a class=\"anchor\" href=\"#序列相关性的特征\">#</a> 序列相关性的特征</h3>\n<ol>\n<li><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212152508.png\" alt=\"\" /></li>\n<li><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212152550.png\" alt=\"\" /></li>\n<li><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212152609.png\" alt=\"\" /></li>\n</ol>\n<h3 id=\"序列相关性的检验\"><a class=\"anchor\" href=\"#序列相关性的检验\">#</a> 序列相关性的检验</h3>\n<p>​\t序列相关性检验的方法有很多种，但基本思路相同。</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212152827.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>图示法</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212152854.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>回归检验法：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212164422.png\" alt=\"\" /></p>\n</li>\n<li>\n<p><a href=\"#DW\">杜宾 - 瓦森（DW）检验法</a></p>\n</li>\n<li>\n<p><a href=\"#GB\">拉格朗日乘数检验（GB/LM）</a></p>\n</li>\n</ul>\n<h4 id=\"span-iddw杜宾-瓦森dw检验法span\"><a class=\"anchor\" href=\"#span-iddw杜宾-瓦森dw检验法span\">#</a> <span id='DW'>杜宾 - 瓦森（DW）检验法</span><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212164447.png\" alt=\"\" /></h4>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212164516.png\" alt=\"\" /></p>\n<p>DW 检验临界值 (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>L</mi></msub><mtext>、</mtext><msub><mi>d</mi><mi>U</mi></msub></mrow><annotation encoding=\"application/x-tex\">d_L、d_U</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">L</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord cjk_fallback\">、</span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.32833099999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.10903em;\">U</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>) 与三个参数有关：<br />\n①检验水平<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>α</mi></mrow><annotation encoding=\"application/x-tex\">\\alpha</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.0037em;\">α</span></span></span></span>，②样本容量 n , ③原回归模型中解释变量个数 k（不包括常数项）。</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212164528.png\" alt=\"\" /></p>\n<p>若采用双侧侧检验，则结论为是否存在序列相关。</p>\n<p>当 DW 值落在 “不确定” 区域时，两种处理方法：</p>\n<ol>\n<li>加大样本容量或重新选取样本，重作 DW 检验。有时 DW 值会离开不确定区；</li>\n<li>选用其它检验方法。</li>\n</ol>\n<h4 id=\"span-idgb拉格朗日乘数检验gblmspan\"><a class=\"anchor\" href=\"#span-idgb拉格朗日乘数检验gblmspan\">#</a> <span id='GB'>拉格朗日乘数检验（GB/LM）</span></h4>\n<p>​\t拉格朗日乘数检验克服了 DW 检验的缺陷，适合于高阶序列相关以及模型中存在滞后被解释变量的情形。<br />\n它是由布劳殊（Breusch）与戈弗雷（Godfrey）于 1978 年提出的，也被称为 GB 检验。</p>\n<p>​\t对于模型 $$Y_i=\\beta_0+\\beta_1X_{1i}+\\beta_2X_{2i}+\\cdots+\\beta_kX_{ki}+\\mu$$</p>\n<p>如果怀疑随机扰动项存在 P 阶序列相关：</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>μ</mi><mi>t</mi></msub><mo>=</mo><msub><mi>ρ</mi><mn>1</mn></msub><msub><mi>μ</mi><mrow><mi>t</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>+</mo><msub><mi>ρ</mi><mn>2</mn></msub><msub><mi>μ</mi><mrow><mi>t</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>+</mo><mo>⋯</mo><mo>+</mo><msub><mi>ρ</mi><mi>p</mi></msub><msub><mi>μ</mi><mrow><mi>t</mi><mo>−</mo><mi>p</mi></mrow></msub><mo>+</mo><msub><mi>ϵ</mi><mi>t</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mu_t=\\rho_1\\mu_{t-1}+\\rho_2\\mu_{t-2}+\\cdots+\\rho_p\\mu_{t-p}+\\epsilon_t\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.791661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.791661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8694379999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ρ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">μ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.28055599999999997em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">t</span><span class=\"mbin mtight\">−</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">ϵ</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2805559999999999em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">t</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212155353.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212155412.png\" alt=\"\" /></p>\n<p><strong>拉格朗日乘数检验的 EViews 操作</strong></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212160815.png\" alt=\"\" /></p>\n<h3 id=\"序列相关性的补救\"><a class=\"anchor\" href=\"#序列相关性的补救\">#</a> 序列相关性的补救</h3>\n<p><strong>非纯序列相关：</strong></p>\n<p>​\t- 正确的模型设定，特别是出现负的序列相关时；</p>\n<p><strong>纯序列相关：</strong></p>\n<ol>\n<li>\n<p>广义最小二乘法：广义差分法（GLS）</p>\n<p><strong>EViews 操作：</strong></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212161406.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212161447.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>AR 方法</p>\n</li>\n<li>\n<p>尼威 - 韦斯特（Newey-West HAC）方法</p>\n<ul>\n<li>\n<p>只修正标准误而不会改变系数的估计值</p>\n</li>\n<li>\n<p>在大样本估计中，效果更好</p>\n</li>\n<li>\n<p>绝大多数学术论文采用此种方法</p>\n<p><strong>EViews 操作：</strong></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212161623.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212161648.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212161659.png\" alt=\"\" /></p>\n</li>\n</ul>\n<p>经验方法：</p>\n<ul>\n<li>采用时间序列数据作回归时，不对原模型进行序列相关检验，而是直接选择广义差分法或者 NW 法；</li>\n<li>如果确实存在序列相关，则被有效地消除了；</li>\n<li>如果不存在序列相关，则广义差分法或 NW 法等价于普通最小二乘法；</li>\n</ul>\n</li>\n</ol>\n<hr />\n<h2 id=\"第七章-异方差性\"><a class=\"anchor\" href=\"#第七章-异方差性\">#</a> 第七章 异方差性</h2>\n<h3 id=\"异方差的概念\"><a class=\"anchor\" href=\"#异方差的概念\">#</a> 异方差的概念</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212165647.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212165634.png\" alt=\"\" /></p>\n<h3 id=\"异方差的类型\"><a class=\"anchor\" href=\"#异方差的类型\">#</a> 异方差的类型</h3>\n<p>** 非纯异方差：** 由模型设定偏误导致（如遗漏变量）；</p>\n<p><strong>纯异方差：</strong></p>\n<ul>\n<li>横截面数据：被解释变量的取值差异较大、解释变量的偏态；</li>\n<li>时间序列数据：学习效应、数据采集技术的变化</li>\n<li>异常值</li>\n</ul>\n<h3 id=\"异方差的特征\"><a class=\"anchor\" href=\"#异方差的特征\">#</a> 异方差的特征</h3>\n<ul>\n<li>OLS 估计量仍是无偏的；</li>\n<li>OLS 估计量不再是有效的（即最小方差估计量）；</li>\n<li>OLS 估计量的标准误是有偏的，且偏差通常是负的，意味着 OLS 通常会高估了参数的 t 值，导致原本不显著的变量可能变得显著；</li>\n</ul>\n<p>综上：若存在异方差，OLS 估计的假设检验将变的不可靠。</p>\n<h3 id=\"异方差的检验\"><a class=\"anchor\" href=\"#异方差的检验\">#</a> 异方差的检验</h3>\n<p><strong>检验思路：</strong></p>\n<p>​\t检验异⽅差，也就是检验随机误差项的方差与比例因子 Z 或解释变量 X 之间的相关性及其 “形式”；又因随机误差项方差的样本对应物是 OLS 的残差平方，因此所有的检验方法都基于<u><strong>残差平方</strong></u>。</p>\n<p><strong>异方差的检验方法：</strong></p>\n<ul>\n<li>\n<p>图解法</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212170852.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>帕克检验</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212190703.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>怀特检验（White）</p>\n<p>基本思想：异方差来源于解释变量及其高次方。</p>\n<p><strong>EViews 操作：</strong></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212190935.png\" alt=\"\" /></p>\n</li>\n</ul>\n<h3 id=\"异方差的补救\"><a class=\"anchor\" href=\"#异方差的补救\">#</a> 异方差的补救</h3>\n<p><strong>非纯异方差：</strong></p>\n<p>​\t- 正确的模型设定</p>\n<p><strong>纯异方差：</strong></p>\n<ul>\n<li>\n<p>广义最小二乘法：<a href=\"#WLS\">加权最小二乘法</a></p>\n</li>\n<li>\n<p>修正异方差的标准误：<a href=\"#White\">White 调整法</a></p>\n</li>\n<li>\n<p>重新定义新变量：<a href=\"#ln\">变换方程形式</a></p>\n</li>\n</ul>\n<ol>\n<li>首先考虑采用重新定义变量的方式</li>\n<li>大样本情况：White 调整法</li>\n<li>若能找到明确的比列因子（权重），则采用 WLS</li>\n</ol>\n<h4 id=\"span-idwls加权最小二乘法wlsspan\"><a class=\"anchor\" href=\"#span-idwls加权最小二乘法wlsspan\">#</a> <span id='WLS'>加权最小二乘法 (WLS)</span></h4>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212191410.png\" alt=\"\" /></p>\n<p>在实际操作中人们通常采用如下的经验方法：</p>\n<p>​\t不对原模型进行异方差检验，而是直接选择加权最小二乘法，尤其是采用截面数据作样本时。</p>\n<p>​\t如果确定存在异方差，则被有效地消除了；如果不存在异方差，则加权最小二乘法等价于普通最小二乘法。</p>\n<h4 id=\"span-idwhitewhite调整法span\"><a class=\"anchor\" href=\"#span-idwhitewhite调整法span\">#</a> <span id='White'>White 调整法</span></h4>\n<ul>\n<li>只修正标准误⽽不会改变系数的估计值；</li>\n<li>在⼤样本估计中，效果更好；</li>\n<li>绝⼤多数学术论⽂采用此种⽅法；</li>\n</ul>\n<p><strong>EViews 操作：</strong></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212192120.png\" alt=\"\" /></p>\n<h4 id=\"span-idln变换方程形式span\"><a class=\"anchor\" href=\"#span-idln变换方程形式span\">#</a> <span id='ln'>变换方程形式</span></h4>\n<p>一般采用对解释变量取对数的形式。</p>\n<hr />\n<h2 id=\"第八章-虚拟变量\"><a class=\"anchor\" href=\"#第八章-虚拟变量\">#</a> 第八章 虚拟变量</h2>\n<h3 id=\"虚拟变量概念\"><a class=\"anchor\" href=\"#虚拟变量概念\">#</a> 虚拟变量概念</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212193128.png\" alt=\"\" /></p>\n<p>​\t虚拟变量既可以作为解释变量，又可以作为被解释变量；虚拟应变量模型又称为概率模型、离散选择模型。</p>\n<p><strong>设置原则：</strong></p>\n<ul>\n<li>每⼀定性变量所需的虚拟变量个数要比该定性变量的类别数少 1，即如果有 m 个定性变量，只在模型中引⼊ m-1 个虚拟变量；</li>\n<li>在同⼀个⽅程中，可以引⼊多个虚拟变量来考察多种定性因素的影响；</li>\n</ul>\n<h3 id=\"虚拟变量的引入\"><a class=\"anchor\" href=\"#虚拟变量的引入\">#</a> 虚拟变量的引入</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211213191601.png\" alt=\"\" /></p>\n<h3 id=\"线性概率模型lpm\"><a class=\"anchor\" href=\"#线性概率模型lpm\">#</a> 线性概率模型（LPM)</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212193508.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212193548.png\" alt=\"\" /></p>\n<h3 id=\"logit模型\"><a class=\"anchor\" href=\"#logit模型\">#</a> Logit 模型</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212194008.png\" alt=\"\" /></p>\n<p><strong>EViews 操作：</strong></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212194042.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212194053.png\" alt=\"\" /></p>\n<p>其参数估计值的解释：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212194425.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212194441.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212194455.png\" alt=\"\" /></p>\n<h3 id=\"probit模型\"><a class=\"anchor\" href=\"#probit模型\">#</a> Probit 模型</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212194625.png\" alt=\"\" /></p>\n<p><strong>EViews 操作：</strong></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212194708.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211212194721.png\" alt=\"\" /></p>\n<h3 id=\"其它虚拟应变量模型\"><a class=\"anchor\" href=\"#其它虚拟应变量模型\">#</a> 其它虚拟应变量模型</h3>\n<p><strong>多元 Logit 模型：</strong></p>\n<ul>\n<li>被解释变量存在多种离散且⽆序的选择；</li>\n<li>如择业的选择、交通⼯具的选择；</li>\n<li>采用极⼤似然估计法，Eviews 中有示例程序；</li>\n</ul>\n<p><strong>序次 Logit 模型：</strong></p>\n<ul>\n<li>被解释变量存在多种离散且有序的选择；</li>\n<li>如债券的信用评级、舆论调查结果；</li>\n<li>采用极⼤似然估计法，Eviews 中可实现菜单操作；</li>\n</ul>\n",
            "tags": [
                "金融",
                "金融",
                "计量经济学",
                "量化金融"
            ]
        },
        {
            "id": "https://nc3021.github.io/2021/11/26/front-end/HTML/",
            "url": "https://nc3021.github.io/2021/11/26/front-end/HTML/",
            "title": "HTML学习",
            "date_published": "2021-11-26T11:30:30.109Z",
            "content_html": "<h1 id=\"html学习\"><a class=\"anchor\" href=\"#html学习\">#</a> HTML 学习</h1>\n<h2 id=\"标签\"><a class=\"anchor\" href=\"#标签\">#</a> 标签</h2>\n<ul>\n<li>\n<p>标题标签</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>一级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>二级标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109193502.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>段落标签</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>段落标签<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>换行标签 (无额外行间距)</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span> <span class=\"token punctuation\">/></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>文本标签</p>\n<p><strong>加粗标签</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>强调标签<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>字体加粗标签<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>倾斜标签</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>em</span><span class=\"token punctuation\">></span></span>倾斜标签<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>em</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>i</span><span class=\"token punctuation\">></span></span>倾斜标签<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>i</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>删除线标签</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>del</span><span class=\"token punctuation\">></span></span>删除线<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>del</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>s</span><span class=\"token punctuation\">></span></span>删除线<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>s</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>下划线标签</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ins</span><span class=\"token punctuation\">></span></span>下划线<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ins</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>u</span><span class=\"token punctuation\">></span></span>下划线<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>u</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>容器标签</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>占一行,大盒子<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>小盒子<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>图像标签</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>img.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>替换文字<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">title</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>提示文本<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109193522.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>超链接标签</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>外部链接<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">target</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>_blank<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>超链接<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>空链接<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>下载文件路径<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>下载链接<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109193603.png\" alt=\"\" /><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109193632.png\" alt=\"\" /></p>\n<p>快捷键： <code>a</code> + <code>tab</code></p>\n</li>\n<li>\n<p>注释标签</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 注释标签 --></span></pre></td></tr></table></figure></li>\n<li>\n<p>表格标签</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>姓名<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>性别<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>刘德华<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>男<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>表格属性</strong></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109193733.png\" alt=\"\" /></p>\n<p><strong>表头标签</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>th</span><span class=\"token punctuation\">></span></span>表头<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>th</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>表格结构标签</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>thead</span><span class=\"token punctuation\">></span></span>表格头部区域，，必须有表头标签<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>thead</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tbody</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tbody</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>合并单元格</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">&lt;!-- 跨列 --></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">colspan</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">&lt;!-- 跨行 --></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span> <span class=\"token attr-name\">span</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>列表标签</p>\n<p><strong>无序列表</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>有序列表</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ol</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ol</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>自定义列表</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dl</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dt</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dt</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>dd</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dd</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>dl</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">&lt;!--dl 里只能有 dt 与 dd--></span></pre></td></tr></table></figure></li>\n<li>\n<p>表单标签</p>\n<p><strong>表单域属性</strong></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109194639.png\" alt=\"\" /></p>\n<p><input><strong>标签</strong></p>\n<p>!!<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRlZS5jb20vbXpjeTMwMjEyMTMvaW1hZ2UvcmF3L21hc3Rlci9pbWcvMjAyMjAxMDkxOTQ2NTYucG5n\"></span></p>\n<p><label><strong>标签</strong></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109194717.png\" alt=\"\" /></p>\n<p>&lt;select&gt;<strong> 标签</strong></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109194740.png\" alt=\"\" /></p>\n</li>\n</ul>\n<h2 id=\"特殊字符\"><a class=\"anchor\" href=\"#特殊字符\">#</a> 特殊字符</h2>\n<p><img data-src=\"https://i.loli.net/2021/11/08/ioQNV32cBLfekuw.png\" alt=\"\" /></p>\n",
            "tags": [
                "前端",
                "前端"
            ]
        },
        {
            "id": "https://nc3021.github.io/2021/11/26/hybrid-learning/Typora%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/",
            "url": "https://nc3021.github.io/2021/11/26/hybrid-learning/Typora%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/",
            "title": "Typora使用教程",
            "date_published": "2021-11-26T11:30:18.723Z",
            "content_html": "<h1 id=\"typora使用教程\"><a class=\"anchor\" href=\"#typora使用教程\">#</a> Typora 使用教程</h1>\n<h2 id=\"常用快捷键\"><a class=\"anchor\" href=\"#常用快捷键\">#</a> 常用快捷键</h2>\n<ul>\n<li>加粗：<strong>ctrl+B</strong> （bold）</li>\n<li>字体倾斜：<strong>ctrl+I</strong> （incline）</li>\n<li>下划线：<strong>ctrl+U</strong> （under）</li>\n<li>多级标题：<strong>ctrl+1~6</strong>   （写 Bolg 时必须按顺序使用）</li>\n<li>有序列表：<strong>ctrl+shift+[</strong></li>\n<li>无序列表：<strong>ctrl+shift+]</strong></li>\n<li>降级：<strong>Tab</strong></li>\n<li>升级：<strong>shift+Tab</strong></li>\n<li>插入链接：<strong>ctrl+K</strong> （link）</li>\n<li>插入公式：<strong>ctrl+shift+M</strong></li>\n<li>代码：<strong>ctrl+shift+K</strong></li>\n<li>插入图片：<strong>ctrl+shift+I</strong> （image）</li>\n<li>创建表格：<strong>ctrl+T</strong> （table）</li>\n<li>选中一行：<strong>ctrl+L</strong> （line）</li>\n<li>选中一字：<strong>ctrl+D</strong></li>\n<li>选中相同格式的文字：<strong>ctrl+E</strong></li>\n<li>搜索：<strong>ctrl+F</strong></li>\n<li>搜索并替换：<strong>ctrl+H</strong></li>\n<li>删除线：<strong>Alt+shift+5</strong></li>\n<li>引用：<strong>ctrl+shift+Q</strong></li>\n<li>生成目录：<strong>[TOC]+Enter</strong></li>\n<li>分割线：<strong>---+Enter</strong></li>\n</ul>\n<h2 id=\"字体\"><a class=\"anchor\" href=\"#字体\">#</a> 字体</h2>\n<ol>\n<li>\n<p>斜体：</p>\n<pre><code>*斜体字体1*，_斜体字体2_\n</code></pre>\n<p><em>斜体字体 1</em>，<em>斜体字体 2</em></p>\n</li>\n<li>\n<p>加粗：</p>\n<pre><code>**加粗字体1**，__加粗字体2__\n</code></pre>\n<p><strong>加粗字体 1</strong>，<strong>加粗字体 2</strong></p>\n</li>\n<li>\n<p>删除线：</p>\n<pre><code>~~需要删除的文字~~\n</code></pre>\n<p><s>需要删除的文字</s></p>\n</li>\n<li>\n<p>大高亮</p>\n<pre><code>==高亮==\n</code></pre>\n<p><mark>高亮</mark></p>\n</li>\n<li>\n<p>小高亮</p>\n<pre><code>`高亮`\n</code></pre>\n<p><code>高亮</code></p>\n</li>\n</ol>\n<h2 id=\"数学公式\"><a class=\"anchor\" href=\"#数学公式\">#</a> 数学公式</h2>\n<p>行内的数学公式用两个 <code>$</code>  将 LaTex 公式包裹；</p>\n<p>而行外的公式（单独一行）用两个 <code>$$</code>  将 LaTex 公式包裹。</p>\n<p><strong>常用数学 LaTex 公式</strong></p>\n<p><img data-src=\"https://www.zhihu.com/equation?tex=%5Csqrt%7Bab%7D\" alt=\"[公式]\" /> <code>$\\sqrt&#123;ab&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Csqrt%5Bn%5D%7Bab%7D\" alt=\"[公式]\" /> <code>$\\sqrt[n]&#123;ab&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Clog_%7Ba%7D%7Bb%7D\" alt=\"[公式]\" /> <code>$\\log_&#123;a&#125;&#123;b&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Clg%7Bab%7D\" alt=\"[公式]\" /> <code>$\\lg&#123;ab&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=a%5E%7Bb%7D\" alt=\"[公式]\" /> <code>$a^&#123;b&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=a_%7Bb%7D\" alt=\"[公式]\" /> <code>$a_&#123;b&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=x_a%5Eb\" alt=\"[公式]\" /> <code>$x_a^b$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cint\" alt=\"[公式]\" /> <code>$\\int$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cint_%7Ba%7D%5E%7Bb%7D\" alt=\"[公式]\" /> <code>$\\int_&#123;a&#125;^&#123;b&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Coint\" alt=\"[公式]\" /> <code>$\\oint$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Coint_a%5Eb\" alt=\"[公式]\" /> <code>$\\oint_a^b$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Csum\" alt=\"[公式]\" /> <code>$\\sum$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Csum_a%5Eb\" alt=\"[公式]\" /> <code>$\\sum_a^b$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Ccoprod\" alt=\"[公式]\" /> <code>$\\coprod$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Ccoprod_a%5Eb\" alt=\"[公式]\" /> <code>$\\coprod_a^b$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cprod\" alt=\"[公式]\" /> <code>$\\prod$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cprod_a%5Eb\" alt=\"[公式]\" /> <code>$\\prod_a^b$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cbigcap\" alt=\"[公式]\" /> <code>$\\bigcap$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cbigcap_a%5Eb\" alt=\"[公式]\" /> <code>$\\bigcap_a^b$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cbigcup\" alt=\"[公式]\" /> <code>$\\bigcup$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cbigcup_a%5Eb\" alt=\"[公式]\" /> <code>$\\bigcup_a^b$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cbigsqcup\" alt=\"[公式]\" /> <code>$\\bigsqcup$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cbigsqcup_a%5Eb\" alt=\"[公式]\" /> <code>$\\bigsqcup_a^b$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cbigvee\" alt=\"[公式]\" /> <code>$\\bigvee$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cbigvee_a%5Eb\" alt=\"[公式]\" /> <code>$\\bigvee_a^b$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cbigwedge\" alt=\"[公式]\" /> <code>$\\bigwedge$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cbigwedge_a%5Eb\" alt=\"[公式]\" /> <code>$\\bigwedge_a^b$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cwidetilde%7Bab%7D\" alt=\"[公式]\" /> <code>$\\widetilde&#123;ab&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cwidehat%7Bab%7D\" alt=\"[公式]\" /> <code>$\\widehat&#123;ab&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Coverleftarrow%7Bab%7D\" alt=\"[公式]\" /> <code>$\\overleftarrow&#123;ab&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Coverrightarrow%7Bab%7D\" alt=\"[公式]\" /> <code>$\\overrightarrow&#123;ab&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Coverbrace%7Bab%7D\" alt=\"[公式]\" /> <code>$\\overbrace&#123;ab&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cunderbrace%7Bab%7D\" alt=\"[公式]\" /> <code>$\\underbrace&#123;ab&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cunderline%7Bab%7D\" alt=\"[公式]\" /> <code>$\\underline&#123;ab&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Coverline%7Bab%7D\" alt=\"[公式]\" /> <code>$\\overline&#123;ab&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7Bab%7D%7Bcd%7D\" alt=\"[公式]\" /> <code>$\\frac&#123;ab&#125;&#123;cd&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B%5Cpartial+a%7D%7B%5Cpartial+b%7D\" alt=\"[公式]\" /> <code>$\\frac&#123;\\partial a&#125;&#123;\\partial b&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Cfrac%7B%5Ctext%7Bd%7Dx%7D%7B%5Ctext%7Bd%7Dy%7D\" alt=\"[公式]\" /> <code>$\\frac&#123;\\text&#123;d&#125;x&#125;&#123;\\text&#123;d&#125;y&#125;$</code> <img data-src=\"https://www.zhihu.com/equation?tex=%5Clim_%7Ba+%5Crightarrow+b%7D\" alt=\"[公式]\" /> <code>$\\lim_&#123;a \\rightarrow b&#125;$</code></p>\n<p><strong>希腊字母</strong></p>\n<p><img data-src=\"https://www.zhihu.com/equation?tex=%5Calpha\" alt=\"[公式]\" /> 希腊字母</p>\n<table>\n<thead>\n<tr>\n<th>字母</th>\n<th>实现</th>\n<th>字母</th>\n<th style=\"text-align:right\">实现</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>A</td>\n<td><code>A</code></td>\n<td>α</td>\n<td style=\"text-align:right\"><code>\\alpha</code></td>\n</tr>\n<tr>\n<td>B</td>\n<td><code>B</code></td>\n<td>β</td>\n<td style=\"text-align:right\"><code>\\beta</code></td>\n</tr>\n<tr>\n<td>Γ</td>\n<td><code>\\Gamma</code></td>\n<td>γ</td>\n<td style=\"text-align:right\"><code>\\gamma</code></td>\n</tr>\n<tr>\n<td>Δ</td>\n<td><code>\\Delta</code></td>\n<td>δ</td>\n<td style=\"text-align:right\"><code>\\delta</code></td>\n</tr>\n<tr>\n<td>E</td>\n<td><code>E</code></td>\n<td>ϵ</td>\n<td style=\"text-align:right\"><code>\\epsilon</code></td>\n</tr>\n<tr>\n<td>Z</td>\n<td><code>Z</code></td>\n<td>ζ</td>\n<td style=\"text-align:right\"><code>\\zeta</code></td>\n</tr>\n<tr>\n<td>H</td>\n<td><code>H</code></td>\n<td>η</td>\n<td style=\"text-align:right\"><code>\\eta</code></td>\n</tr>\n<tr>\n<td>Θ</td>\n<td><code>\\Theta</code></td>\n<td>θ</td>\n<td style=\"text-align:right\"><code>\\theta</code></td>\n</tr>\n<tr>\n<td>I</td>\n<td><code>I</code></td>\n<td>ι</td>\n<td style=\"text-align:right\"><code>\\iota</code></td>\n</tr>\n<tr>\n<td>K</td>\n<td><code>K</code></td>\n<td>κ</td>\n<td style=\"text-align:right\"><code>\\kappa</code></td>\n</tr>\n<tr>\n<td>Λ</td>\n<td><code>\\Lambda</code></td>\n<td>λ</td>\n<td style=\"text-align:right\"><code>\\lambda</code></td>\n</tr>\n<tr>\n<td>M</td>\n<td><code>M</code></td>\n<td>μ</td>\n<td style=\"text-align:right\"><code>\\mu</code></td>\n</tr>\n<tr>\n<td>N</td>\n<td><code>N</code></td>\n<td>ν</td>\n<td style=\"text-align:right\"><code>\\nu</code></td>\n</tr>\n<tr>\n<td>Ξ</td>\n<td><code>\\Xi</code></td>\n<td>ξ</td>\n<td style=\"text-align:right\"><code>\\xi</code></td>\n</tr>\n<tr>\n<td>O</td>\n<td><code>O</code></td>\n<td>ο</td>\n<td style=\"text-align:right\"><code>\\omicron</code></td>\n</tr>\n<tr>\n<td>Π</td>\n<td><code>\\Pi</code></td>\n<td>π</td>\n<td style=\"text-align:right\"><code>\\pi</code></td>\n</tr>\n<tr>\n<td>P</td>\n<td><code>P</code></td>\n<td>ρ</td>\n<td style=\"text-align:right\"><code>\\rho</code></td>\n</tr>\n<tr>\n<td>Σ</td>\n<td><code>\\Sigma</code></td>\n<td>σ</td>\n<td style=\"text-align:right\"><code>\\sigma</code></td>\n</tr>\n<tr>\n<td>T</td>\n<td><code>T</code></td>\n<td>τ</td>\n<td style=\"text-align:right\"><code>\\tau</code></td>\n</tr>\n<tr>\n<td>Υ</td>\n<td><code>\\Upsilon</code></td>\n<td>υ</td>\n<td style=\"text-align:right\"><code>\\upsilon</code></td>\n</tr>\n<tr>\n<td>Φ</td>\n<td><code>\\Phi</code></td>\n<td>ϕ</td>\n<td style=\"text-align:right\"><code>\\phi</code></td>\n</tr>\n<tr>\n<td>X</td>\n<td><code>X</code></td>\n<td>χ</td>\n<td style=\"text-align:right\"><code>\\chi</code></td>\n</tr>\n<tr>\n<td>Ψ</td>\n<td><code>\\Psi</code></td>\n<td>ψ</td>\n<td style=\"text-align:right\"><code>\\psi</code></td>\n</tr>\n<tr>\n<td>Ω</td>\n<td><code>\\Omega</code></td>\n<td>ω</td>\n<td style=\"text-align:right\"><code>\\omega</code></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"段落\"><a class=\"anchor\" href=\"#段落\">#</a> 段落</h2>\n<ol>\n<li>更小行间距 ：<strong>shift+Enter</strong></li>\n<li>打断线：<br/>打断线后的内容将自动换行</li>\n<li>引用：<strong>&gt;+Space + 文字</strong></li>\n</ol>\n<h2 id=\"特殊符号\"><a class=\"anchor\" href=\"#特殊符号\">#</a> 特殊符号</h2>\n<ol>\n<li>\n<p><code>&lt;</code> ：＆ｌｔ；</p>\n</li>\n<li>\n<p><code>＆</code> ：＆ａｍｐ；</p>\n</li>\n<li></li>\n</ol>\n<ul class=\"task-list\">\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_0\" disabled=\"true\" /><label for=\"cbx_0\"> 待办事项</label></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" id=\"cbx_1\" checked=\"true\" disabled=\"true\" /><label for=\"cbx_1\"> 已办事项</label></p>\n<p><code>-</code> + <code>空格</code>  + <code>[</code> + <code>空格</code>  + <code>]</code> + <code>空格</code></p>\n</li>\n</ul>\n<ol start=\"4\">\n<li>\n<p>省略号</p>\n<ul>\n<li>低端对其的省略号（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>…</mo></mrow><annotation encoding=\"application/x-tex\">\\ldots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.12em;vertical-align:0em;\"></span><span class=\"minner\">…</span></span></span></span>）： <code>$\\ldots$</code></li>\n<li>中线对其的省略号（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⋯</mo></mrow><annotation encoding=\"application/x-tex\">\\cdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.31em;vertical-align:0em;\"></span><span class=\"minner\">⋯</span></span></span></span>）： <code>$\\cdots$</code></li>\n<li>竖直对齐的省略号（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi><mi mathvariant=\"normal\">⋮</mi><mpadded height=\"+0em\" voffset=\"0em\"><mspace mathbackground=\"black\" width=\"0em\" height=\"1.5em\"></mspace></mpadded></mi></mrow><annotation encoding=\"application/x-tex\">\\vdots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.53em;vertical-align:-0.03em;\"></span><span class=\"mord\"><span class=\"mord\">⋮</span><span class=\"mord rule\" style=\"border-right-width:0em;border-top-width:1.5em;bottom:0em;\"></span></span></span></span></span>）： <code>$\\vdots$</code></li>\n<li>写对期齐的省略号（<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⋱</mo></mrow><annotation encoding=\"application/x-tex\">\\ddots</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.82em;vertical-align:0em;\"></span><span class=\"minner\">⋱</span></span></span></span>）： <code>$\\ddots$</code></li>\n</ul>\n</li>\n<li>\n<blockquote>\n<p>​    竖直线，可以用来写备注吧 (细节还不太懂)   <code>&gt;</code></p>\n</blockquote>\n</li>\n<li></li>\n</ol>\n<h2 id=\"跳转\"><a class=\"anchor\" href=\"#跳转\">#</a> 跳转</h2>\n<ol>\n<li>\n<p>文档之间跳转</p>\n<ul>\n<li>\n<p>相对路径（适用于 markdown 的阅读）：</p>\n<p><code>[content](相对地址)</code></p>\n<p>如果在相对文件夹下，相对地址为 <code>./xxx.md</code> ;</p>\n<p><code>../</code>  用于表示上一级目录，以此类推；</p>\n</li>\n<li>\n<p>绝对路径（适用于博客的阅读）：</p>\n<p>HTML 写法：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">helf</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>xxx.com<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>Markdown 写法：</p>\n<pre><code>[content](xxx.com)  //快捷键 ctrl+\n</code></pre>\n</li>\n</ul>\n</li>\n<li>\n<p>文档内跳转</p>\n<p>第一步：定义一个锚 (id)</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>jump<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span>content<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>第二步：</p>\n<pre><code>[点击跳转](#jump)\n</code></pre>\n</li>\n</ol>\n",
            "tags": [
                "杂学",
                "Typora",
                "markdown"
            ]
        },
        {
            "id": "https://nc3021.github.io/2021/11/26/financial/Eviews/",
            "url": "https://nc3021.github.io/2021/11/26/financial/Eviews/",
            "title": "EViews操作",
            "date_published": "2021-11-26T08:01:56.692Z",
            "content_html": "<h1 id=\"eviews操作\"><a class=\"anchor\" href=\"#eviews操作\">#</a> EViews 操作</h1>\n<h2 id=\"回归数据分析\"><a class=\"anchor\" href=\"#回归数据分析\">#</a> 回归数据分析</h2>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211211144053.png\" alt=\"\" /></p>\n<h2 id=\"假设检验\"><a class=\"anchor\" href=\"#假设检验\">#</a> 假设检验</h2>\n<p><img data-src=\"https://i.loli.net/2021/11/16/dajXyExDBHbZA56.png\" alt=\"\" /></p>\n<p><img data-src=\"C:%5CUsers%5C%E4%BD%A0%E7%8C%9C%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20211116103231625.png\" alt=\"image-20211116103231625\" /></p>\n<h2 id=\"ols拟合\"><a class=\"anchor\" href=\"#ols拟合\">#</a> OLS 拟合</h2>\n<p><img data-src=\"https://i.loli.net/2021/11/16/Em53r1qtTp4ZoRa.png\" alt=\"\" /></p>\n<h2 id=\"拟合优度检验\"><a class=\"anchor\" href=\"#拟合优度检验\">#</a> 拟合优度检验</h2>\n<p><img data-src=\"https://i.loli.net/2021/11/16/nOJXp7yvcZuBdjI.png\" alt=\"\" /></p>\n<h2 id=\"相关性分析\"><a class=\"anchor\" href=\"#相关性分析\">#</a> 相关性分析</h2>\n<p><img data-src=\"https://i.loli.net/2021/11/16/k9HBYeK1CfnsZqV.png\" alt=\"\" /></p>\n<p><img data-src=\"https://i.loli.net/2021/11/16/xgms2JN6ZpIqRbY.png\" alt=\"\" /></p>\n<h2 id=\"检查是否为遗漏变量\"><a class=\"anchor\" href=\"#检查是否为遗漏变量\">#</a> 检查是否为遗漏变量</h2>\n<p><img data-src=\"https://i.loli.net/2021/11/16/TxFZnfXI32hRy48.png\" alt=\"\" /></p>\n<h2 id=\"方差膨胀因子vif\"><a class=\"anchor\" href=\"#方差膨胀因子vif\">#</a> 方差膨胀因子 VIF</h2>\n<p><img data-src=\"https://i.loli.net/2021/11/16/LCfMNrSpJEuVYXw.png\" alt=\"\" /></p>\n<h2 id=\"white检验\"><a class=\"anchor\" href=\"#white检验\">#</a> White 检验</h2>\n<p><img data-src=\"https://i.loli.net/2021/11/16/fceaKF8BdrXqW4Y.png\" alt=\"\" /></p>\n<p><img data-src=\"https://i.loli.net/2021/11/16/YtxPiSzeyhJWmD5.png\" alt=\"\" /></p>\n<h2 id=\"white调整法处理异方差\"><a class=\"anchor\" href=\"#white调整法处理异方差\">#</a> White 调整法处理异方差</h2>\n<p><img data-src=\"https://i.loli.net/2021/11/16/B5T6Oi9MIEZfUrt.png\" alt=\"\" /></p>\n<h2 id=\"取对数处理异方差\"><a class=\"anchor\" href=\"#取对数处理异方差\">#</a> 取对数处理异方差</h2>\n<p><img data-src=\"https://i.loli.net/2021/11/16/E5FdY8JAINBSfxb.png\" alt=\"\" /></p>\n<p><img data-src=\"https://i.loli.net/2021/11/16/zvp8EIU6DcdXCNi.png\" alt=\"\" /></p>\n<h2 id=\"建立logit模型\"><a class=\"anchor\" href=\"#建立logit模型\">#</a> 建立 Logit 模型</h2>\n<p><img data-src=\"https://i.loli.net/2021/11/16/RAVhzSIUaGQb17x.png\" alt=\"\" /></p>\n",
            "tags": [
                "金融",
                "金融",
                "计量经济学",
                "EViews",
                "量化金融"
            ]
        },
        {
            "id": "https://nc3021.github.io/2021/11/26/front-end/CSS/",
            "url": "https://nc3021.github.io/2021/11/26/front-end/CSS/",
            "title": "CSS学习",
            "date_published": "2021-11-26T08:01:56.688Z",
            "content_html": "<h1 id=\"css学习\"><a class=\"anchor\" href=\"#css学习\">#</a> CSS 学习</h1>\n<h2 id=\"css选择器\"><a class=\"anchor\" href=\"#css选择器\">#</a> CSS 选择器</h2>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109194817.png\" alt=\"\" /></p>\n<h3 id=\"标签选择器\"><a class=\"anchor\" href=\"#标签选择器\">#</a> 标签选择器：</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109194849.png\" alt=\"\" /></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token selector\">P</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>green<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"类选择器\"><a class=\"anchor\" href=\"#类选择器\">#</a> 类选择器 .</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    红色字体</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token selector\">.red</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"id选择器\"><a class=\"anchor\" href=\"#id选择器\">#</a> id 选择器  #</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    红色字体</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token selector\">#red</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre> /*只能调用一次*/</pre></td></tr></table></figure><p>快捷键： <code>div</code> + <code>#</code> + <code>xxx</code></p>\n<h3 id=\"通配符选择器\"><a class=\"anchor\" href=\"#通配符选择器\">#</a> 通配符选择器 *</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109194910.png\" alt=\"\" /></p>\n<h2 id=\"css字体属性\"><a class=\"anchor\" href=\"#css字体属性\">#</a> CSS 字体属性</h2>\n<h3 id=\"字体系列-font-family\"><a class=\"anchor\" href=\"#字体系列-font-family\">#</a> 字体系列 font-family</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   p&#123;font-family:\"Microsoft Yahei\",Arial;&#125;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"字体大小-font-size\"><a class=\"anchor\" href=\"#字体大小-font-size\">#</a> 字体大小 font-size</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109194938.png\" alt=\"\" /></p>\n<h3 id=\"字体粗细-font-weight\"><a class=\"anchor\" href=\"#字体粗细-font-weight\">#</a> 字体粗细 font-weight</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"><span class=\"token selector\">.bold</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span>700<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/*font-weight:bold   两者等效 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109194955.png\" alt=\"\" /></p>\n<h3 id=\"文字样式-font-style\"><a class=\"anchor\" href=\"#文字样式-font-style\">#</a> 文字样式 font-style</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109195012.png\" alt=\"\" /></p>\n<h3 id=\"字体复合属性-font\"><a class=\"anchor\" href=\"#字体复合属性-font\">#</a> 字体复合属性 font</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109195025.png\" alt=\"\" /></p>\n<h2 id=\"css文本属性\"><a class=\"anchor\" href=\"#css文本属性\">#</a> CSS 文本属性</h2>\n<h3 id=\"文本颜色-color\"><a class=\"anchor\" href=\"#文本颜色-color\">#</a> 文本颜色 color</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/09/6sBzWlIGDJwU81t.png\" alt=\"\" /></p>\n<h3 id=\"文本对齐-text-align\"><a class=\"anchor\" href=\"#文本对齐-text-align\">#</a> 文本对齐 text-align</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/09/tngFhDlwQo3buix.png\" alt=\"\" /></p>\n<h3 id=\"装饰文本-text-decoration\"><a class=\"anchor\" href=\"#装饰文本-text-decoration\">#</a> 装饰文本 text-decoration</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/09/bfPesMgSwWER9VK.png\" alt=\"\" /></p>\n<h3 id=\"文本缩进-text-indent\"><a class=\"anchor\" href=\"#文本缩进-text-indent\">#</a> 文本缩进 text-indent</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/09/kx9ZMcnOILbN2js.png\" alt=\"\" /></p>\n<h3 id=\"行间距-line-height\"><a class=\"anchor\" href=\"#行间距-line-height\">#</a> 行间距 line-height</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/09/PqYlACidGrxLNok.png\" alt=\"\" /></p>\n<h3 id=\"css引入方式\"><a class=\"anchor\" href=\"#css引入方式\">#</a> CSS 引入方式</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/09/CtLgyoRjfmwal39.png\" alt=\"\" /></p>\n<p>外部引入快捷键：link +Tab</p>\n<h2 id=\"emment语法\"><a class=\"anchor\" href=\"#emment语法\">#</a> Emment 语法</h2>\n<h3 id=\"快速生成html\"><a class=\"anchor\" href=\"#快速生成html\">#</a> 快速生成 HTML</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109195650.png\" alt=\"\" /></p>\n<h3 id=\"快速生成css\"><a class=\"anchor\" href=\"#快速生成css\">#</a> 快速生成 CSS</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/10/gfREu5e4l2bxYSW.png\" alt=\"\" /></p>\n<h2 id=\"复合选择器\"><a class=\"anchor\" href=\"#复合选择器\">#</a> 复合选择器</h2>\n<p><img data-src=\"https://i.loli.net/2021/11/10/YRMbUhiynS3B4f1.png\" alt=\"\" /></p>\n<h3 id=\"后代选择器\"><a class=\"anchor\" href=\"#后代选择器\">#</a> 后代选择器</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/10/WrLx3O9uNSjcfFq.png\" alt=\"\" /></p>\n<h3 id=\"子选择器\"><a class=\"anchor\" href=\"#子选择器\">#</a> 子选择器</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/10/mXuo4xSEfhONZen.png\" alt=\"\" /></p>\n<p>（亲儿子包含所有儿子）</p>\n<h3 id=\"并集选择器\"><a class=\"anchor\" href=\"#并集选择器\">#</a> 并集选择器</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/10/V6AoCtNfEKgmD3v.png\" alt=\"\" /></p>\n<h3 id=\"伪类选择器\"><a class=\"anchor\" href=\"#伪类选择器\">#</a> 伪类选择器</h3>\n<h4 id=\"链接伪类选择器\"><a class=\"anchor\" href=\"#链接伪类选择器\">#</a> 链接伪类选择器</h4>\n<p><img data-src=\"https://i.loli.net/2021/11/10/RlmMSI1ivKQG2Ta.png\" alt=\"\" /></p>\n<p>需要按照 LVHA 顺序声明</p>\n<h4 id=\"focus伪类选择器\"><a class=\"anchor\" href=\"#focus伪类选择器\">#</a> focus 伪类选择器</h4>\n<p><img data-src=\"https://i.loli.net/2021/11/10/os27TGQ3tBkd1zj.png\" alt=\"\" /></p>\n<h2 id=\"元素显示模式\"><a class=\"anchor\" href=\"#元素显示模式\">#</a> 元素显示模式</h2>\n<p><img data-src=\"https://i.loli.net/2021/11/10/eQNda9g5sXPzhRY.png\" alt=\"\" /></p>\n<p><img data-src=\"https://i.loli.net/2021/11/10/mYajh1rD26FvQiO.png\" alt=\"\" /></p>\n<h3 id=\"显示模式的转换\"><a class=\"anchor\" href=\"#显示模式的转换\">#</a> 显示模式的转换</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token selector\">div</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span>inline<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token selector\">a</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span>block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token selector\">span</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">display</span><span class=\"token punctuation\">:</span>inline-block<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"css背景\"><a class=\"anchor\" href=\"#css背景\">#</a> CSS 背景</h2>\n<h3 id=\"背景颜色\"><a class=\"anchor\" href=\"#背景颜色\">#</a> 背景颜色</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>div&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   background-color: #FF6700;</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   opacity: 0.5;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>   &#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>div&#123;</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>   backfround:rgba(0,128,0,.3)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;</pre></td></tr></table></figure><p><img data-src=\"https://i.loli.net/2021/11/10/yOZ48ac19ozg6BR.png\" alt=\"\" /></p>\n<h3 id=\"背景图片\"><a class=\"anchor\" href=\"#背景图片\">#</a> 背景图片</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>background-image：none|url(url)</pre></td></tr></table></figure><p>优点：便于控制位置</p>\n<p>url：绝对或相对地址</p>\n<h3 id=\"背景平铺\"><a class=\"anchor\" href=\"#背景平铺\">#</a> 背景平铺</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>background-repeat: repeat|no-repeat|repeat-x|repeat-y;</pre></td></tr></table></figure><h3 id=\"背景图片位置\"><a class=\"anchor\" href=\"#背景图片位置\">#</a> 背景图片位置</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/10/xO6JXvYrpZniFdq.png\" alt=\"\" /></p>\n<p><img data-src=\"https://i.loli.net/2021/11/10/xUNITDa1CGoVHR5.png\" alt=\"\" /></p>\n<h3 id=\"背景图像固定\"><a class=\"anchor\" href=\"#背景图像固定\">#</a> 背景图像固定</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>background-attachment：scroll|fixed</pre></td></tr></table></figure><h3 id=\"背景符合写法\"><a class=\"anchor\" href=\"#背景符合写法\">#</a> 背景符合写法</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/10/GIhOCQtszncoPpb.png\" alt=\"\" /></p>\n<h2 id=\"css三大特性\"><a class=\"anchor\" href=\"#css三大特性\">#</a> CSS 三大特性</h2>\n<h3 id=\"层叠性\"><a class=\"anchor\" href=\"#层叠性\">#</a> 层叠性</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/10/AhKFeMiUnm7O9vx.png\" alt=\"\" /></p>\n<h3 id=\"继承性\"><a class=\"anchor\" href=\"#继承性\">#</a> 继承性</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/10/AI7bwF6HEpzNovD.png\" alt=\"\" /></p>\n<h3 id=\"优先级\"><a class=\"anchor\" href=\"#优先级\">#</a> 优先级</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/10/fo56NnKBygda2Dr.png\" alt=\"\" /></p>\n<p><img data-src=\"https://i.loli.net/2021/11/10/t2dvcBOZaoTAuIq.png\" alt=\"\" /></p>\n<h2 id=\"盒子模型\"><a class=\"anchor\" href=\"#盒子模型\">#</a> 盒子模型</h2>\n<p><img data-src=\"https://i.loli.net/2021/11/12/pvFML79hSiORPaK.png\" alt=\"\" /></p>\n<h3 id=\"边框-border\"><a class=\"anchor\" href=\"#边框-border\">#</a> 边框 border</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109201825.png\" alt=\"\" /></p>\n<p>边框各样式示例：</p>\n<p><img data-src=\"https://i.loli.net/2021/11/12/btNeEgIhox5zPaV.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109202037.png\" alt=\"\" /></p>\n<p>边框复合写法：</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109202045.png\" alt=\"\" /></p>\n<p><img data-src=\"https://i.loli.net/2021/11/12/nvgqYAr3NTQyU8t.png\" alt=\"\" /></p>\n<h3 id=\"内边距-padding\"><a class=\"anchor\" href=\"#内边距-padding\">#</a> 内边距 padding</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/12/9guDw1qLWtPkmZU.png\" alt=\"\" /></p>\n<p>一旦设定了 height 或 width,padding 就会使其比原有盒子更大（margin 不会）；</p>\n<h3 id=\"外边距-margin\"><a class=\"anchor\" href=\"#外边距-margin\">#</a> 外边距 margin</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/12/n14dpqYOjox6EUD.png\" alt=\"\" /></p>\n<p>块级元素水平居中：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>margin:0 auto;</pre></td></tr></table></figure><p>行内元素或行内块元素水平居中：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>text-align:center;</pre></td></tr></table></figure><p>外边距合并：</p>\n<p><img data-src=\"https://i.loli.net/2021/11/12/a3IyTLZ5dM4VgpU.png\" alt=\"\" /></p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109202130.png\" alt=\"\" /></p>\n<p>清除浏览器自带的标签内外边距：</p>\n<p><img data-src=\"https://i.loli.net/2021/11/12/NJk7gfDRZzLOmvM.png\" alt=\"\" /></p>\n<h3 id=\"圆角边框\"><a class=\"anchor\" href=\"#圆角边框\">#</a> 圆角边框</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20220109202302.png\" alt=\"\" /></p>\n<p>属性为一个值则对应四角，两个值则对应（左上右下，右上左下），四个值则对应（左上，右上，右下，左下）；</p>\n<p>分开写法：</p>\n<p><img data-src=\"https://i.loli.net/2021/11/12/Sbe8CYQNZEA5q9p.png\" alt=\"\" /></p>\n<p>圆形边框：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>border-radius:50%;(在正方形盒子里)</pre></td></tr></table></figure><h3 id=\"盒子阴影-box-shadow\"><a class=\"anchor\" href=\"#盒子阴影-box-shadow\">#</a> 盒子阴影 box-shadow</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/12/xe1BifprjPugUL8.png\" alt=\"\" /></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>div:hover&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> box-shadow:10px 10px 10px -4px rgba(0,0,0,.3);</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#125;</pre></td></tr></table></figure><h3 id=\"文字阴影-text-shadow\"><a class=\"anchor\" href=\"#文字阴影-text-shadow\">#</a> 文字阴影 text-shadow</h3>\n<p><img data-src=\"https://i.loli.net/2021/11/12/un573tQZ2xj4oqO.png\" alt=\"\" /></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>div:hover&#123;</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> text-shadow:5px 5px 6px rgba(0,0,0,.3);</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>&#125;</pre></td></tr></table></figure><h2 id=\"浮动\"><a class=\"anchor\" href=\"#浮动\">#</a> 浮动</h2>\n<p><img data-src=\"https://i.loli.net/2021/11/12/kGd8Ca7cj6USLi3.png\" alt=\"\" /></p>\n<p><img data-src=\"https://i.loli.net/2021/11/12/7sNLv3CAmVhYZcH.png\" alt=\"\" /></p>\n<p><img data-src=\"https://i.loli.net/2021/11/12/AXyZ5g6brx4oWNl.png\" alt=\"\" /></p>\n<h2 id=\"flex布局\"><a class=\"anchor\" href=\"#flex布局\">#</a> Flex 布局</h2>\n<p><strong>Flex 容器</strong></p>\n<p>指定一个容器为 flex 布局：</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">display</span><span class=\"token punctuation\">:</span> flex | inline-flex<span class=\"token punctuation\">;</span>      //可以有两种取值</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>//如果你使用块元素如 div，你就可以使用 flex，而如果你使用行内元素，你可以使用 inline-flex。</pre></td></tr></table></figure><blockquote>\n<p>备注：<strong>当时设置 flex 布局之后，子元素的 float、clear、vertical-align 的属性将会失效。</strong></p>\n</blockquote>\n<h3 id=\"容器属性\"><a class=\"anchor\" href=\"#容器属性\">#</a> 容器属性</h3>\n<ul>\n<li><a href=\"#direction\">flex-direction</a></li>\n<li><a href=\"#wrap\">flex-wrap</a></li>\n<li><a href=\"#content\">justify-content</a></li>\n<li><a href=\"#items\">align-items</a></li>\n<li><a href=\"#content\">align-content</a></li>\n</ul>\n<p><span id='direction'><strong>flex-direction: 决定主轴的方向 (即项目的排列方向)</strong></span></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> row | row-reverse | column | column-reverse<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>row（默认值），主轴为水平方向，起点在左端；</p>\n<p>row-reverse：主轴为水平方向，起点在右端；</p>\n<p>column：主轴为垂直方向，起点在上沿；</p>\n<p>column-reverse：主轴为垂直方向，起点在下沿；</p>\n</blockquote>\n<hr />\n<p><span id='wrap'> <strong>flex-wrap: 决定容器内项目是否可换行</strong></span></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> nowrap | wrap | wrap-reverse<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>nowrap （默认值）不换行，即当主轴尺寸固定时，当空间不足时，项目尺寸会随之调整而并不会挤到下一行；</p>\n<p>wrap：项目主轴总尺寸超出容器时换行，第一行在上方；</p>\n<p>wrap-reverse：换行，第一行在下方；</p>\n</blockquote>\n<hr />\n<p><span id='content'> <strong>justify-content：定义了项目在主轴的对齐方式。</strong></span></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> flex-start | flex-end | center | space-between | space-around<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>flex-start（默认值）左对齐；</p>\n<p>flex-end：右对齐</p>\n<p>center：居中</p>\n<p>space-between：两端对齐，项目之间的间隔相等，即剩余空间等分成间隙。</p>\n</blockquote>\n<hr />\n<p><span id='items'><strong>align-items: 定义了项目在交叉轴上的对齐方式</strong></span></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> flex-start | flex-end | center | baseline | stretch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>stretch（默认值） 即如果项目未设置高度或者设为 auto，将占满整个容器的高度；</p>\n<p>flex-start：交叉轴的起点对齐；</p>\n<p>flex-end：交叉轴的终点对齐；</p>\n<p>center：交叉轴的中点对齐；</p>\n<p>baseline: 项目的第一行文字的基线对齐；</p>\n</blockquote>\n<hr />\n<p><span id='content'><strong>align-content: 定义了多根轴线的对齐方式，如果项目只有一根轴线，那么该属性将不起作用</strong></span></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.container</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">align-content</span><span class=\"token punctuation\">:</span> flex-start | flex-end | center | space-between | space-around | stretch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>stretch（默认值）三条轴线平分容器的交叉方向上的空间；</p>\n<p>flex-start：轴线全部在交叉轴上的起点对齐；</p>\n<p>flex-end：轴线全部在交叉轴上的终点对齐；</p>\n<p>center：轴线全部在交叉轴上的中间对齐；</p>\n<p>space-between：轴线两端对齐，之间的间隔相等，即剩余空间等分成间隙；</p>\n<p>space-around：每个轴线两侧的间隔相等，所以轴线之间的间隔比轴线与边缘的间隔大一倍；</p>\n</blockquote>\n<h3 id=\"项目属性\"><a class=\"anchor\" href=\"#项目属性\">#</a> 项目属性</h3>\n<ul>\n<li><a href=\"#order\">order</a></li>\n<li><a href=\"#basis\">flex-basis</a></li>\n<li><a href=\"#grow\">flex-grow</a></li>\n<li><a href=\"#shrink\">flex-shrink</a></li>\n<li><a href=\"#flex\">flex</a></li>\n<li><a href=\"#self\">align-self</a></li>\n</ul>\n<p><span id='order'><strong>order: 定义项目在容器中的排列顺序，数值越小，排列越靠前，默认值为 0</strong></span></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">order</span><span class=\"token punctuation\">:</span> &lt;integer><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>默认值为 0，也可以设置负数</p>\n</blockquote>\n<hr />\n<p><span id='basis'><strong>flex-basis: 定义了在分配多余空间之前，项目占据的主轴空间，浏览器根据这个属性，计算主轴是否有多余空间</strong></span></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> &lt;length> | auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>默认值：auto，即项目本来的大小，这时候 item 的宽高取决于 width 或 height 的值。</p>\n<p>备注：当主轴为水平方向的时候，当设置了 flex-basis，项目的宽度设置值会失效，flex-basis 需要跟 flex-grow 和 flex-shrink 配合使用才能发挥效果。</p>\n</blockquote>\n<hr />\n<p><span id='grow'><strong>flex-grow: 定义项目的放大比例</strong></span></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> &lt;number><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>默认值为 0，即如果存在剩余空间，也不放大；</p>\n<p>备注：当所有的项目都以 flex-basis 的值进行排列后，仍有剩余空间，如果所有项目的 flex-grow 属性都为 1，则它们将等分剩余空间 (如果有的话)。</p>\n<p>如果一个项目的 flex-grow 属性为 2，其他项目都为 1，则前者占据的剩余空间将比其他项多一倍。</p>\n<p>当然如果当所有项目以 flex-basis 的值排列完后发现空间不够了，且 flex-wrap：nowrap 时，此时 flex-grow 则不起作用了，这时候就需要接下来的这个属性。</p>\n</blockquote>\n<hr />\n<p><span id='shrink'><strong>flex-shrink: 定义了项目的缩小比例</strong></span></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> &lt;number><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>默认值: 1，即如果空间不足，该项目将缩小，负值对该属性无效。</p>\n<p>如果所有项目的 flex-shrink 属性都为 1，当空间不足时，都将等比例缩小。</p>\n<p>如果一个项目的 flex-shrink 属性为 0，其他项目都为 1，则空间不足时，前者不缩小。</p>\n</blockquote>\n<hr />\n<p><span id='flex'><strong>flex: flex-grow, flex-shrink 和 flex-basis 的简写</strong></span></p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.item</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> none | [ &lt;<span class=\"token string\">'flex-grow'</span>> &lt;<span class=\"token string\">'flex-shrink'</span>>? || &lt;<span class=\"token string\">'flex-basis'</span>> ]</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>暂略</p>\n</blockquote>\n<hr />\n<p><span id='self'><strong>align-self: 允许单个项目有与其他项目不一样的对齐方式</strong></span></p>\n<pre><code>.item &#123;\n     align-self: auto | flex-start | flex-end | center | baseline | stretch;\n&#125;\n</code></pre>\n<blockquote>\n<p>暂略</p>\n</blockquote>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNTMwMzQ5Mw==\">30 分钟学会 Flex 布局 - 知乎 (zhihu.com)</span></p>\n<h2 id=\"问题与解决方案\"><a class=\"anchor\" href=\"#问题与解决方案\">#</a> 问题与解决方案</h2>\n<ul>\n<li>\n<p>为什么 CSS 样式一般放在 head 中？</p>\n<p><img data-src=\"https://i.loli.net/2021/11/09/5R4zWBr6vdHNFfU.png\" alt=\"\" /></p>\n</li>\n<li>\n<p>overflow</p>\n</li>\n<li>\n<p>属性选择器</p>\n</li>\n</ul>\n",
            "tags": [
                "前端",
                "前端"
            ]
        },
        {
            "id": "https://nc3021.github.io/2021/11/25/hybrid-learning/Git/",
            "url": "https://nc3021.github.io/2021/11/25/hybrid-learning/Git/",
            "title": "Git使用说明",
            "date_published": "2021-11-25T13:36:15.659Z",
            "content_html": "<h1 id=\"git使用说明\"><a class=\"anchor\" href=\"#git使用说明\">#</a> Git 使用说明</h1>\n<h2 id=\"git-本地命令\"><a class=\"anchor\" href=\"#git-本地命令\">#</a> Git 本地命令</h2>\n<h3 id=\"创建版本库\"><a class=\"anchor\" href=\"#创建版本库\">#</a> 创建版本库</h3>\n<ol>\n<li>\n<p>先创建空文件夹（路径上没有中文）</p>\n</li>\n<li>\n<p>在该文件夹上用  <code>git bash</code>  打开</p>\n</li>\n<li></li>\n</ol>\n<pre><code>$ git init\n</code></pre>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211120201247.png\" alt=\"\" /></p>\n<h3 id=\"将文件添加到版本库\"><a class=\"anchor\" href=\"#将文件添加到版本库\">#</a> 将文件添加到版本库</h3>\n<ol>\n<li>\n<figure class=\"highlight git\"><figcaption data-lang=\"git\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token command\">$ git add xxx.txt</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token command\">$ git add<span class=\"token parameter\"> -A</span>    //添加所有文件</span></pre></td></tr></table></figure><p>可以重复多次使用添加多个文件</p>\n</li>\n<li>\n<figure class=\"highlight git\"><figcaption data-lang=\"git\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token command\">$ git commit<span class=\"token parameter\"> -m</span></span><span class=\"token string\">\"本次提交内容的说明\"</span></pre></td></tr></table></figure><p>将添加的所有文件提交到仓库</p>\n</li>\n</ol>\n<h3 id=\"查看仓库当前状态\"><a class=\"anchor\" href=\"#查看仓库当前状态\">#</a> 查看仓库当前状态</h3>\n<pre><code>$ git status\n</code></pre>\n<p>随时可以掌握工作区状态</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211120202408.png\" alt=\"\" /></p>\n<pre><code>$ git diff\n</code></pre>\n<p>可以查看文件被修改前后的内容</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211120202606.png\" alt=\"\" /></p>\n<h3 id=\"版本回退\"><a class=\"anchor\" href=\"#版本回退\">#</a> 版本回退</h3>\n<pre><code>$ git reset --hard commit_id //退回某个版本\n$ git reset --hard HEAD^ //退回上一个版本\n</code></pre>\n<pre><code>$ git log  \n</code></pre>\n<p>可以查看提交历史，方便回退到过去的哪个版本；</p>\n<p>查看结束后按 <code>q</code>  退出；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211120204012.png\" alt=\"\" /></p>\n<pre><code>$ git reflog\n</code></pre>\n<p>可以查看命令历史，方便确定回到未来的哪个版本；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211120203952.png\" alt=\"\" /></p>\n<h3 id=\"撤销修改\"><a class=\"anchor\" href=\"#撤销修改\">#</a> 撤销修改</h3>\n<pre><code>$ git checkout -- &lt;file&gt;\n</code></pre>\n<p>让这个文件回退到最近一次 <code>git commit</code>  或 <code>git add</code>  时的状态（即撤销在工作区的修改内容，即使文件被删除了也可以恢复）</p>\n<pre><code>$git reset HEAD &lt;file&gt;\n</code></pre>\n<p>清除暂存区的提交内容</p>\n<h3 id=\"删除文件\"><a class=\"anchor\" href=\"#删除文件\">#</a> 删除文件</h3>\n<pre><code>$ git rm &lt;file&gt;\n</code></pre>\n<h2 id=\"git-远程仓库\"><a class=\"anchor\" href=\"#git-远程仓库\">#</a> Git 远程仓库</h2>\n<h3 id=\"关联远程仓库\"><a class=\"anchor\" href=\"#关联远程仓库\">#</a> 关联远程仓库</h3>\n<pre><code>$ git remote add xxx（远程仓库的本地名）git@xxx.com(仓库官网地址):xx（用户名）/xxxx(文件夹名).git\n$ git remote add origin git@gitee.com:mzcy3021213/image.git\n</code></pre>\n<p>将 <code>remote</code>  改为 <code>clone</code>  即可克隆远程库生成一个本地库；</p>\n<pre><code>$ git remote rm &lt;远程仓库的本地名&gt;\n</code></pre>\n<p>取消关联远程仓库</p>\n<h3 id=\"关联远程的其它分支\"><a class=\"anchor\" href=\"#关联远程的其它分支\">#</a> 关联远程的其它分支</h3>\n<pre><code>$ git branch --set-upstream-to=origin/&lt;分支&gt; &lt;分支&gt;\n</code></pre>\n<h3 id=\"拉取\"><a class=\"anchor\" href=\"#拉取\">#</a> 拉取</h3>\n<pre><code>$ git pull\n</code></pre>\n<h3 id=\"推送\"><a class=\"anchor\" href=\"#推送\">#</a> 推送</h3>\n<pre><code>$ git push -u origin master \n</code></pre>\n<p>加上了 <code>-u</code>  参数，Git 不但会把本地的 <code>master</code>  分支内容推送的远程新的 <code>master</code>  分支，还会把本地的 <code>master</code>  分支和远程的 <code>master</code>  分支关联起来，在以后的推送或者拉取时就可以简化命令；</p>\n<pre><code>$ git push origin dev\n</code></pre>\n<p>推送到远程的 dev 分支；</p>\n<h3 id=\"多人协作\"><a class=\"anchor\" href=\"#多人协作\">#</a> 多人协作</h3>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211123155748.png\" alt=\"\" /></p>\n<h2 id=\"分支管理\"><a class=\"anchor\" href=\"#分支管理\">#</a> 分支管理</h2>\n<h3 id=\"创建并切换分支\"><a class=\"anchor\" href=\"#创建并切换分支\">#</a> 创建并切换分支</h3>\n<pre><code>$ git branch &lt;分支名&gt;       //创建分支\n$ git checkout &lt;分支名&gt;     \n$ git switch &lt;分支名&gt;       //切换分支\n\n$ git checkout -b &lt;分支名&gt;  \n$ git switch -c &lt;分支名&gt;    //创建并切换分支\n</code></pre>\n<pre><code>$ git branch                //查看当前分支\n</code></pre>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211123145722.png\" alt=\"\" /></p>\n<p><code>git branch</code>  命令会列出所有分支，当前分支前面会标一个 <code>*</code>  号；</p>\n<h3 id=\"合并分支\"><a class=\"anchor\" href=\"#合并分支\">#</a> 合并分支</h3>\n<pre><code>$ git merge &lt;分支名&gt;              \n</code></pre>\n<p><code>git merge</code>  命令用于合并指定分支到当前分支</p>\n<h3 id=\"删除分支\"><a class=\"anchor\" href=\"#删除分支\">#</a> 删除分支</h3>\n<pre><code>$ git branch -d &lt;分支名&gt;\n</code></pre>\n<h3 id=\"储藏分支\"><a class=\"anchor\" href=\"#储藏分支\">#</a> 储藏分支</h3>\n<pre><code>$ git stash                   \n</code></pre>\n<p>存储还未完成的分支；</p>\n<pre><code>$ git stash list\n</code></pre>\n<p>查看存储的分支；</p>\n<pre><code>$ git stash apply          \n$ git stash pop\n</code></pre>\n<p>恢复分支：一种是用 <code>git stash apply</code>  恢复，但是恢复后，stash 内容并不删除，你需要用 <code>git stash drop</code>  来删除；</p>\n<p>另一种方式是用 <code>git stash pop</code> ，恢复的同时把 stash 内容也删了；</p>\n<h3 id=\"修复分支\"><a class=\"anchor\" href=\"#修复分支\">#</a> 修复分支</h3>\n<pre><code>$ git cherry-pick &lt;提交的编号&gt;\n</code></pre>\n<p>将对其它分支修改的提交移植到本分支上；</p>\n<p><img data-src=\"https://gitee.com/mzcy3021213/image/raw/master/img/20211123155844.png\" alt=\"\" /></p>\n<h3 id=\"分支标签\"><a class=\"anchor\" href=\"#分支标签\">#</a> 分支标签</h3>\n<pre><code>$ git tag &lt;标签名&gt;\n</code></pre>\n<p>对当前分支创建标签</p>\n<pre><code>$ git tag \n</code></pre>\n<p>查询所有标签</p>\n<pre><code>$ git tag &lt;标签名&gt; &lt;提交编号&gt;\n</code></pre>\n<p>对历史提交打上标签</p>\n<pre><code>$ git tag -d &lt;标签名&gt;\n</code></pre>\n<p>删除标签</p>\n",
            "tags": [
                "杂学",
                "Git",
                "分布式文件管理"
            ]
        }
    ]
}